{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/nexmoe/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/IMG_7858.jpg","path":"images/IMG_7858.jpg","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/article_bg_01.webp","path":"images/article_bg_01.webp","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/article_bg_02.webp","path":"images/article_bg_02.webp","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/article_bg_03.webp","path":"images/article_bg_03.webp","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/article_bg_04.webp","path":"images/article_bg_04.webp","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/ffbackground.webp","path":"images/ffbackground.webp","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/fflog.webp","path":"images/fflog.webp","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/sasaki.ico","path":"images/sasaki.ico","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/coldrain.jpeg","path":"images/coldrain.jpeg","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/IMG_8606.webp","path":"images/IMG_8606.webp","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/spec-ff.jpg","path":"images/spec-ff.jpg","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/one.png","path":"images/one.png","modified":0,"renderable":1},{"_id":"source/404.html","path":"404.html","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1577256094398},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1577256094398},{"_id":"themes/landscape/README.md","hash":"c2118504a024e7eade2ad2a0cc293db8d3eb63fa","modified":1577254339207},{"_id":"themes/landscape/LICENSE","hash":"63175a16773044bed84e1778009a54ad03dd5520","modified":1577254339206},{"_id":"themes/landscape/_config.yml","hash":"239d79b4673f007effde1fac87a054a5fe9a38ef","modified":1578646639909},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1577256094409},{"_id":"source/_posts/hello-world.md","hash":"730c2c84eaf7fbf70a1a445b223ffd471e62f315","modified":1578646659835},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1577256094399},{"_id":"themes/landscape/languages/default.yml","hash":"1b2b75ca9ff3bfeddb596239889b584cdfcecc32","modified":1577254339207},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1577256094400},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1577254339208},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1577256094400},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1577256094400},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1577256094401},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1577256094401},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1577256094401},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1577256094401},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ccbba6315760755926f5abfe1b98c225a6650581","modified":1577254339209},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1577254339209},{"_id":"themes/landscape/layout/archive.ejs","hash":"b6c505939cd3f45c3a062b201bf8799a8e5ad7a0","modified":1577254339214},{"_id":"themes/landscape/layout/category.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1577254339214},{"_id":"themes/landscape/layout/index.ejs","hash":"7ccb03f40fada2cd74c00554e5b6718508545d71","modified":1577254339214},{"_id":"themes/landscape/layout/layout.ejs","hash":"bbead31ed8f81cb75b22d6c220793c9ed4ff3e66","modified":1577254339214},{"_id":"themes/landscape/layout/page.ejs","hash":"c311e177fc5eea6954e313374e73bd690814c91a","modified":1577254339215},{"_id":"themes/landscape/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1577254339215},{"_id":"themes/landscape/layout/tag.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1577254339215},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1577256094410},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1577256094402},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"02f833407a2d3b211cfc3869808d0e815f97014d","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1577256094402},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1577256094403},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1577256094402},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1577254339210},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"af13f26ebecc228ff8893cf458959aec9ba328d0","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1577256094403},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1577256094404},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"50bd0c1251ec1594b19f9abe000fbaf5e9edd078","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"ff2ba380abe9f938bea3e37986e3d6d4b6a6c202","modified":1577017260000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"a46946f96a512c6e035491b767b1a60828ce85b8","modified":1577017260000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"be3f71b3f32ec965409185eadeca9414c5e77fbe","modified":1577017260000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"ac93edcc618dcdad716e2549636e9834da2092d7","modified":1577017260000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"934c2175bd3d865d3e695755b2653463e0156e34","modified":1577017260000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"6ca407e889fc1294a5ca3c4baa26cc51b444eb3e","modified":1577017260000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577256094421},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577256094421},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577256094421},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577256094422},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577256094421},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577256094421},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1577256094410},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1577256094423},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1577256094424},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1577256094424},{"_id":"themes/landscape/source/css/style.styl","hash":"ec41fc3daaa72d9dd83b165ab68a35e26b10230e","modified":1577017260000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1577256094413},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1577256094425},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1577254339212},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1577254339213},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1577256094405},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1577256094405},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1577254339213},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1577256094406},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577256094423},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577256094422},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577256094422},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1577256094423},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1577256094422},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1577256094423},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1577256094410},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1577256094412},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1577256094412},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1577256094412},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1577256094412},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1577256094413},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1577256094413},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577256094414},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577256094418},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577256094414},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577256094417},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577256094416},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1577256094420},{"_id":"themes/landscape/.DS_Store","hash":"3d1f98ea5e34e6ff6d0c4a5000bb02c1dfd4bb2f","modified":1579056855856},{"_id":"themes/landscape/package-lock.json","hash":"8c803a254d1ca477cfec6b31dc35f24812563ccf","modified":1577255286620},{"_id":"themes/landscape/languages/it.yml","hash":"6ae71000ed039f56572143ffe90da17b95d1a66f","modified":1577254339208},{"_id":"themes/landscape/scripts/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1577254339215},{"_id":"themes/landscape/layout/_partial/categories.ejs","hash":"02cf5a962644da311e52fa441d2b300b0c9286a5","modified":1577254339210},{"_id":"themes/landscape/layout/_partial/menu.ejs","hash":"fdf2b8d1c39df30583b49eada4342646c17e9dfd","modified":1578366876382},{"_id":"themes/landscape/layout/_partial/photoswipe.ejs","hash":"d1d36cf0a2c03ff3c2acbc208fe11cd0afd8b7bd","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/screen.ejs","hash":"13af4ef864cd53ec5a657aa1f5ebc4bc2c175297","modified":1577258652375},{"_id":"themes/landscape/layout/_partial/scripts.ejs","hash":"041a2e405157447b20b5d339596f35a2ec89808c","modified":1577254339213},{"_id":"themes/landscape/layout/_partial/tags.ejs","hash":"16cfcf585417ec279c12d8cfbcf6383bf7f2a8c6","modified":1577254339214},{"_id":"themes/landscape/source/css/diaspora.css","hash":"3e664ef2066a8ea3b47c77d7fc7e7f894e421b4a","modified":1578647811435},{"_id":"themes/landscape/source/img/favicon.png","hash":"efb938a836c0b69baecdaadb89a94511f9abb299","modified":1577254339217},{"_id":"themes/landscape/source/img/logo.png","hash":"26aa13d23a30369b683aab639499f977fe9f8175","modified":1577254339218},{"_id":"themes/landscape/source/js/diaspora.js","hash":"2600c388af9e050a180e451d1578bc0e9e1d601a","modified":1578554784051},{"_id":"themes/landscape/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1577254339222},{"_id":"themes/landscape/source/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1577254339224},{"_id":"themes/landscape/source/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1577254339225},{"_id":"themes/landscape/source/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1577254339225},{"_id":"themes/landscape/source/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1577254339227},{"_id":"themes/landscape/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1577254339221},{"_id":"themes/landscape/source/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1577254339226},{"_id":"themes/landscape/layout/_partial/post/article.ejs","hash":"e825fd563381178382f790a6ce3da71ca7a3f113","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/post/gitalk.ejs","hash":"92002826f42956360b867fcc364e5a6a47f0bac3","modified":1578361890162},{"_id":"themes/landscape/layout/_partial/post/header.ejs","hash":"1809fa1db9c24613b7579ba9977296ffd561bc6f","modified":1578362022124},{"_id":"themes/landscape/layout/_partial/post/item.ejs","hash":"b7a75aa667765b5c3a16b3b9a71ed38ea0a128a4","modified":1577254339212},{"_id":"themes/landscape/source/img/cover.jpg","hash":"dc7103d4c4e05650595712b3fa395b89726df32b","modified":1577254339217},{"_id":"themes/landscape/source/img/welcome-cover.jpg","hash":"c393dfeb52aff20a9921c1f56e2ce127683ab35a","modified":1577254339219},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1577254339223},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1577254339223},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1577254339224},{"_id":"themes/landscape/source/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1577254339224},{"_id":"source/about/me.md","hash":"f60c39053a6356e0e157ee84b8d2ab6d62145496","modified":1578361619504},{"_id":"source/_posts/my-text.md","hash":"58f5139b72ea7041283ea5a4c7a40f8217ed7651","modified":1578361793588},{"_id":"source/_posts/vue-3-0-学习记录.md","hash":"a5aed8b065fcb0923f38d53063d2ea5c9fd5cc65","modified":1578549075887},{"_id":"themes/landscape/source/img/vue3.0.jpg","hash":"b5b2179598657db69c60604de8385c46977c76aa","modified":1578362504017},{"_id":"themes/landscape/source/img/ffBg.jpg","hash":"835e41f28aa250a67884d8291273bf776a0a1af0","modified":1578365800353},{"_id":"themes/landscape/source/img/bg_ff.jpg","hash":"e5b9997d2d28d26664c61b3b992a46165c9848b0","modified":1578364923197},{"_id":"source/_posts/css-drygoods.md","hash":"d079014b650a5d859ef51c559336b35335a8a795","modified":1579077654067},{"_id":"source/_posts/image/css_text_ff.jpg","hash":"3a444b7375b71d614ad14788dfa4baab0965eb93","modified":1578449328749},{"_id":"source/_posts/img/css_text_ff.jpg","hash":"3a444b7375b71d614ad14788dfa4baab0965eb93","modified":1578449328749},{"_id":"themes/landscape/source/img/lalafei.jpeg","hash":"40d385a5ca2bba93796958877139244913b1cf0b","modified":1578450635949},{"_id":"public/2019/12/25/hello-world/index.html","hash":"927a02d9ffb9d5e864b22d0ccf7c435a3286a1e7","modified":1578647903587},{"_id":"public/archives/index.html","hash":"d65ca82a09a216499786677ff1d9698f32d24a7f","modified":1579405715949},{"_id":"public/archives/2019/index.html","hash":"223bb3c27a93c8ae0731d1b6f7d8980056dec727","modified":1578647903587},{"_id":"public/archives/2019/12/index.html","hash":"832a216508efee7fba6be1904d5e3aaba42a51b6","modified":1578647903587},{"_id":"public/archives/2020/index.html","hash":"32b35f0a5413cc2ffde417cf38b6047a3bd10166","modified":1579405715949},{"_id":"public/archives/2020/01/index.html","hash":"7a52fb180491abf62d23acef0b4f466d31e57127","modified":1579405715949},{"_id":"public/index.html","hash":"8a78cb979cf77c0a845a1715e417ad2138a83d0c","modified":1579405715949},{"_id":"public/2020/01/08/css-drygoods/index.html","hash":"5e9b25e209be616e3404432cd12adb380d4ca829","modified":1579405715949},{"_id":"public/2020/01/07/vue-3-0-学习记录/index.html","hash":"912b0148e629f1ea84b5e2c9f4fddc9329027072","modified":1578471251901},{"_id":"public/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1578900736238},{"_id":"public/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1578900736238},{"_id":"public/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1578900736238},{"_id":"public/img/lalafei.jpeg","hash":"40d385a5ca2bba93796958877139244913b1cf0b","modified":1578451844332},{"_id":"public/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1578900736238},{"_id":"public/img/welcome-cover.jpg","hash":"c393dfeb52aff20a9921c1f56e2ce127683ab35a","modified":1578451844332},{"_id":"public/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1578900736238},{"_id":"public/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1578900736238},{"_id":"public/img/cover.jpg","hash":"dc7103d4c4e05650595712b3fa395b89726df32b","modified":1578451844332},{"_id":"public/img/ffBg.jpg","hash":"835e41f28aa250a67884d8291273bf776a0a1af0","modified":1578451844332},{"_id":"public/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1578900736238},{"_id":"public/js/diaspora.js","hash":"2600c388af9e050a180e451d1578bc0e9e1d601a","modified":1578900736238},{"_id":"public/css/diaspora.css","hash":"3e664ef2066a8ea3b47c77d7fc7e7f894e421b4a","modified":1578900736238},{"_id":"public/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1578900736238},{"_id":"public/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1578900736238},{"_id":"public/img/bg_ff.jpg","hash":"e5b9997d2d28d26664c61b3b992a46165c9848b0","modified":1578558284053},{"_id":"public/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1578900736238},{"_id":"public/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1578900736238},{"_id":"source/404/index.md","hash":"b798133ab9b83745dc395f71a283573d8d82a8f9","modified":1579252527810},{"_id":"public/404.html","hash":"756bf1f2f63be189879ee24df03bb57c1079eb3c","modified":1579405715949},{"_id":"themes/landscape/source/img/sasaki.ico","hash":"9fb5284dc3315f6483c59c4ff5f1033574cf42a4","modified":1578471135591},{"_id":"public/img/sasaki.ico","hash":"9fb5284dc3315f6483c59c4ff5f1033574cf42a4","modified":1578900736238},{"_id":"themes/landscape/source/img/blackNight.jpeg","hash":"52fa8443ee9f2e5b88ede3ca0953b61aab0aa2dd","modified":1578549035250},{"_id":"themes/landscape/source/img/ff14Log2.jpg","hash":"24820b35045e3d1a079f4b183c717232ffe6be97","modified":1578549035336},{"_id":"themes/landscape/source/img/fflog.jpg","hash":"f7e745f625330b426739ed5df28ee01e01e4113b","modified":1578551637654},{"_id":"source/_posts/vue-3-study.md","hash":"5d0afb7264cc50f4f2c6dfe9d7cd9101fe8d5923","modified":1579247663391},{"_id":"source/_posts/check-rule.md","hash":"354137c00b9e5786a2633f4194ea01f6ecdd17c2","modified":1579077654075},{"_id":"themes/landscape/source/.DS_Store","hash":"26635e96e26ac6a04fa5973ad1b6698c72fa81ef","modified":1578646190235},{"_id":"themes/landscape/source/img/leishen.jpg","hash":"ecbfa117bb66e399088e8814dbfc26eb3ecea788","modified":1578551976295},{"_id":"themes/landscape/source/img/article_bg_01.jpg","hash":"dd0ee02dd3ecaa78d4033e53ed82d8f9c982396c","modified":1578553075718},{"_id":"themes/landscape/source/img/ffbackground.jpg","hash":"cdff142e2a989857c08a1a159e764c52af8aa983","modified":1578552906741},{"_id":"public/2020/01/09/check-rule/index.html","hash":"ee883fa7920911d9f96a7a5a93ffeeb6b076f428","modified":1579405715949},{"_id":"public/2020/01/07/vue-3-study/index.html","hash":"51e2e061ad184a75a3271da6af8183cbdb667b94","modified":1579405715949},{"_id":"public/img/leishen.jpg","hash":"ecbfa117bb66e399088e8814dbfc26eb3ecea788","modified":1578558284053},{"_id":"public/img/article_bg_01.jpg","hash":"dd0ee02dd3ecaa78d4033e53ed82d8f9c982396c","modified":1578900736238},{"_id":"public/img/ffbackground.jpg","hash":"cdff142e2a989857c08a1a159e764c52af8aa983","modified":1578900736238},{"_id":"public/img/fflog.jpg","hash":"f7e745f625330b426739ed5df28ee01e01e4113b","modified":1578900736238},{"_id":"source/_posts/es2020.md","hash":"fd7acf0593ad481442e61f745c40e5a8a7ca51dd","modified":1579077646957},{"_id":"themes/landscape/source/img/article_bg_04.jpg","hash":"3dc4c1fc9b933a321fa609ad573bc4720b0c67b7","modified":1578626033630},{"_id":"themes/landscape/source/img/article_bg_02.jpg","hash":"a15f51c636fd859d5fd9555027bb36a3c5c358c0","modified":1578624713179},{"_id":"themes/landscape/source/img/article_bg_03.jpg","hash":"5abd864dd9ff4e1664ed1219d900f8687b684a21","modified":1578625201802},{"_id":"public/2020/01/10/es2020/index.html","hash":"c3f07a5acb5e7d3eee60ebec90a0355ec46cd4d1","modified":1579405715949},{"_id":"public/img/article_bg_04.jpg","hash":"3dc4c1fc9b933a321fa609ad573bc4720b0c67b7","modified":1578900736238},{"_id":"public/img/article_bg_02.jpg","hash":"a15f51c636fd859d5fd9555027bb36a3c5c358c0","modified":1578900736238},{"_id":"public/img/article_bg_03.jpg","hash":"5abd864dd9ff4e1664ed1219d900f8687b684a21","modified":1578900736238},{"_id":"themes/landscape/source/img/article_bg_04.webp","hash":"e7f20329b0e55852a4500460c5860fc86b1299c5","modified":1578646606479},{"_id":"themes/landscape/source/img/article_bg_02.webp","hash":"a63a273ad3e656780a50a70cdd56cfc6485a402b","modified":1578647263697},{"_id":"themes/landscape/source/img/article_bg_03.webp","hash":"3b5d276bba3ff7e3b37cd1b98bb3c1baec6e197a","modified":1578646606392},{"_id":"themes/landscape/source/img/article_bg_01.webp","hash":"54de5ea67912d27664d448c700d5ba89e3ab58d8","modified":1578646606238},{"_id":"themes/landscape/source/img/fflog.webp","hash":"86368ccd0b65132597e23902b7c3548f537df4de","modified":1578646606664},{"_id":"themes/landscape/source/img/ffbackground.webp","hash":"1b534202bda709f6cb61935c99b40fc043e758fb","modified":1578646606593},{"_id":"public/img/article_bg_04.webp","hash":"e7f20329b0e55852a4500460c5860fc86b1299c5","modified":1578900736238},{"_id":"public/img/article_bg_02.webp","hash":"a63a273ad3e656780a50a70cdd56cfc6485a402b","modified":1578900736238},{"_id":"public/img/article_bg_03.webp","hash":"3b5d276bba3ff7e3b37cd1b98bb3c1baec6e197a","modified":1578900736238},{"_id":"public/img/article_bg_01.webp","hash":"54de5ea67912d27664d448c700d5ba89e3ab58d8","modified":1578900736238},{"_id":"public/img/fflog.webp","hash":"86368ccd0b65132597e23902b7c3548f537df4de","modified":1578900736238},{"_id":"public/img/ffbackground.webp","hash":"1b534202bda709f6cb61935c99b40fc043e758fb","modified":1578900736238},{"_id":"source/_posts/css-animation.md","hash":"0eec1c474f1b0660761fadb3d8e57a7b106801b7","modified":1579137718247},{"_id":"public/2020/01/13/css-animation/index.html","hash":"5be4b12bbaf7a39ad8526932d88716101f3211eb","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1579405715949},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1579405715949},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1579405715949},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1579405715949},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1579405715949},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1579405715949},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1579405715949},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1579405715949},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1579405715949},{"_id":"themes/landscape/font/appstore-fill.svg","hash":"6ecc527b424afb79bca7d26191c53ebc08091454","modified":1577017260000},{"_id":"themes/landscape/font/QQ.svg","hash":"195665f0d13e71bbbea8ecbe2e46c0e4e67341fe","modified":1577017260000},{"_id":"themes/landscape/font/battlenet.svg","hash":"961c2592ed5ea31319bd476e481549d69e8d075d","modified":1577017260000},{"_id":"themes/landscape/font/bilibili.svg","hash":"0f9d92835db855bf581b9858a8fc1e3380be8808","modified":1577017260000},{"_id":"themes/landscape/font/container.svg","hash":"851225195cff6589a5247cb383194057190dd842","modified":1577017260000},{"_id":"themes/landscape/font/eye-fill.svg","hash":"158b8b01f5c43219b599799273a0f8d553e91723","modified":1577017260000},{"_id":"themes/landscape/font/calendar-fill.svg","hash":"05e5b979cf8d150731c0eab66a4394df9498f1d6","modified":1577017260000},{"_id":"themes/landscape/font/dribbble.svg","hash":"0785c0b322c849b0b4736b88fc5d4fed7fbaf07d","modified":1577017260000},{"_id":"themes/landscape/font/ellipsis.svg","hash":"c4074867e95f14d55c3e44145ef6388f60684c5e","modified":1577017260000},{"_id":"themes/landscape/font/home.svg","hash":"97ab890dc43804b584ce3bb407bdbbb32030391b","modified":1577017260000},{"_id":"themes/landscape/font/info-circle.svg","hash":"016e0515fccbd158cd1094376910725f7325acd8","modified":1577017260000},{"_id":"themes/landscape/font/github.svg","hash":"b10f18d0644d120624c25b8ad5a2bc1ef5cff3a0","modified":1577017260000},{"_id":"themes/landscape/font/right.svg","hash":"640b5fad35d5b1b1052c2f44bb58b1db5446a296","modified":1577017260000},{"_id":"themes/landscape/font/tags-fill.svg","hash":"87f59d1b14a5160e726ec3edc6e06fbe953f40f4","modified":1577017260000},{"_id":"themes/landscape/font/steam.svg","hash":"cf35facf841e5be58ac7c35945ae4a576d460b7c","modified":1577017260000},{"_id":"themes/landscape/font/time-circle-fill.svg","hash":"ecdacea2e496c505a7d07770e54c503420ef9290","modified":1577017260000},{"_id":"themes/landscape/font/tag-fill.svg","hash":"f4a7d7cb92e40295a6b4c37b8d06385cf024eb9d","modified":1577017260000},{"_id":"themes/landscape/font/telegram.svg","hash":"51d8f5b3fffb40696f5830608ce2abfcebf36e2c","modified":1577017260000},{"_id":"themes/landscape/font/twitter.svg","hash":"bfad6767a6cc6058f0e4798225dc8f5898a228ca","modified":1577017260000},{"_id":"themes/landscape/font/weibo.svg","hash":"277d4076a9d17b8762e66fe81cbf0ec9f99a59cd","modified":1577017260000},{"_id":"themes/landscape/font/unorderedlist.svg","hash":"46722843f0674341bffd8ad7f2da1deabde2ba82","modified":1577017260000},{"_id":"themes/landscape/font/wechat-fill.svg","hash":"fdb6fa45343307af0d6ebb70a75688afbc4444b3","modified":1577017260000},{"_id":"themes/landscape/font/zhihu.svg","hash":"78e11c8e8f9ba84ebb2043a8fdbc484b56db3a95","modified":1577017260000},{"_id":"themes/landscape/font/youtube.svg","hash":"fe59b1fb78e5661feae8775bdafe855f28092f0c","modified":1577017260000},{"_id":"themes/landscape/font/areachart.svg","hash":"71e8bef524be4ba17ac9918d8598a606b2bb26c9","modified":1577017260000},{"_id":"themes/landscape/font/left.svg","hash":"3fa57b536daade473b90cd496a39962c90de12ab","modified":1577017260000},{"_id":"themes/landscape/font/menu.svg","hash":"93c34d0e2156caa8dca37007da3647a6af0fa352","modified":1577017260000},{"_id":"themes/landscape/font/mail-fill.svg","hash":"88ef0ea02f5449d7d24ce3f957847219e5205fa0","modified":1577017260000},{"_id":"themes/landscape/languages/en.yml","hash":"6bbe7dac5af2fc1abbe49b7f78f8e24e99678ea5","modified":1577017260000},{"_id":"themes/landscape/languages/zh-HK.yml","hash":"0f6a83e3eb33d5afad81fec5d4d225cb587a10a4","modified":1577017260000},{"_id":"themes/landscape/layout/archives.ejs","hash":"bc8e075018eaeb040928af62300d248cf42f58f4","modified":1577017260000},{"_id":"themes/landscape/layout/py.ejs","hash":"fda887942ec72268489244ea5dddf98a45dd5937","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/analytics.ejs","hash":"a9066ea1f75b616e48ba1d5348b10f5721d7c700","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/copyright.ejs","hash":"ad4e69376f3b3ec9bad6deb71bff0745cdb886eb","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/paginator.ejs","hash":"37edff153d06f722442b13559e5849534ff4c6f6","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/site-verification.ejs","hash":"0e3f39f0b42c0d20c3424a6a06b2f08486b2141c","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_analytics/baidu.ejs","hash":"ef3b445b93529c6591b560f7c4f1ebdca56e4553","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_analytics/cnzz.ejs","hash":"03d9d13ef82bceec59f73e525a1124df5f6f97d3","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_analytics/google.ejs","hash":"ec710def09c853e63dc4598ace5b6346035c1098","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_analytics/gtags.ejs","hash":"7f394a1d7560fd52c9d3ec654c9e374342942b2d","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_analytics/gtm-body.ejs","hash":"9e4d32cf44d3ed373ba0b3e8a714378be0b69a78","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_analytics/gtm-head.ejs","hash":"a0d96fe2a7f108cd6e2b8be5ab0b85d29e4dba57","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_analytics/la.ejs","hash":"92a267edbf6df81ccf4239c1047d1dc7b3f57cf5","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_analytics/tencent.ejs","hash":"e2e27f03fe5e22faf217858c7887849028905773","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_comment/DiscussBot.ejs","hash":"c905c27f2e338dad0236ad3af60070629e3af97f","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_comment/changyan.ejs","hash":"1d703bf1e19ec5f0721dac537f917a077899462b","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_comment/disqusjs.ejs","hash":"477d18a9c061cc750f6468189bd16218b317b023","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_comment/disqus.ejs","hash":"48d8f5e4ac308f8a92a48f8f7dfe99e5465dcb6e","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_comment/gitalk.ejs","hash":"0fcfd92a3a70d1c2b0cbd3e484d2f842088a3863","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_comment/gitment.ejs","hash":"c04e14664b69c4a7f12fc88b547994ddd9a74e1d","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_comment/livere.ejs","hash":"af2ef5889f3f8a3326bcee017319586a0179e439","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/_comment/valine.ejs","hash":"6a0c66594459db76d6abc99b88f1e23dbcc13cb6","modified":1577017260000},{"_id":"themes/landscape/layout/_partial/comment.ejs","hash":"f1e739a0eb8077168074884590033a43d4e8533f","modified":1577017260000},{"_id":"themes/landscape/layout/_widget/social.ejs","hash":"6a874f100337a4d4fc5f4fade86469d365c6dd10","modified":1577017260000},{"_id":"themes/landscape/scripts/helper/css_auto_version.js","hash":"1df4e02d36ae52e64f4f4e709e488d6e413d9d0c","modified":1577017260000},{"_id":"themes/landscape/README/english.md","hash":"215949a82c6fb02f385e6be6a8025cc268937917","modified":1577017260000},{"_id":"themes/landscape/scripts/helper/js_auto_version.js","hash":"912dfbe49c51614ef886c967349d3cb054de6f2d","modified":1577017260000},{"_id":"themes/landscape/source/js/app.js","hash":"cc22307ebddc836e24d3286699033aaec184779d","modified":1577017260000},{"_id":"themes/landscape/WIKI/README.md","hash":"ef998ff4417d23ec4fd0baede1a0e5add6c87b74","modified":1577017260000},{"_id":"themes/landscape/WIKI/deploy.sh","hash":"ebb1fb1669abb9ebc07ed0769086097afdb1879c","modified":1577017260000},{"_id":"themes/landscape/WIKI/package.json","hash":"1a51fa8fccd41579b332eb98d7daa6e06231aa63","modified":1577017260000},{"_id":"themes/landscape/WIKI/component/basic/icon.md","hash":"dcf7033f5e22a503f909a4d3266e037e4d887851","modified":1577017260000},{"_id":"themes/landscape/WIKI/component/basic/color.md","hash":"4767e43809633187cbd7b41a990f64769c757e45","modified":1577017260000},{"_id":"themes/landscape/WIKI/contribution/README.md","hash":"acc51a21f5e5f036f4f7a0d4109c2800be361fb8","modified":1577017260000},{"_id":"themes/landscape/WIKI/contribution/catalog.md","hash":"b59b2f664c98393fe53361343a268301ace539c1","modified":1577017260000},{"_id":"themes/landscape/WIKI/en/Hexo/README.md","hash":"81d48222e68d5ef00bc3958941b36d49895e3f3c","modified":1577017260000},{"_id":"themes/landscape/WIKI/en/component/basic/color.md","hash":"c5ee0fcf7f184afa2ca9363fb8ff26f55768fec0","modified":1577017260000},{"_id":"themes/landscape/WIKI/en/Hexo/comment.md","hash":"7f52cda67d77e3de25b7e69786e43687402774df","modified":1577017260000},{"_id":"themes/landscape/WIKI/en/component/basic/icon.md","hash":"c860a7902e1dbe042191483f6a3312e88aa2baee","modified":1577017260000},{"_id":"themes/landscape/WIKI/en/Hexo/notice.md","hash":"042702cf30e9cad288100d2456044f247519ddc4","modified":1577017260000},{"_id":"themes/landscape/WIKI/en/Hexo/use.md","hash":"5f60cccfabe3737ab7535fb282b19dfe226a3f4e","modified":1577017260000},{"_id":"themes/landscape/WIKI/en/README.md","hash":"b96f8f0115e6af9afcda8afedb7210da3c0feb95","modified":1577017260000},{"_id":"themes/landscape/WIKI/.vuepress/enhanceApp.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577017260000},{"_id":"themes/landscape/WIKI/hexo/README.md","hash":"eb3cc689a787da800c77905159f4039d1b87f9e5","modified":1577017260000},{"_id":"themes/landscape/WIKI/hexo/math.md","hash":"13797c1dc101e0c07742391e5dfbde747fa1980c","modified":1577017260000},{"_id":"themes/landscape/WIKI/hexo/comment.md","hash":"148d6c37ff6902a0bc8929120ba821509eea3e43","modified":1577017260000},{"_id":"themes/landscape/WIKI/hexo/notice.md","hash":"efc11be37c49389c4464eea54b0916c5b31143e3","modified":1577017260000},{"_id":"themes/landscape/WIKI/hexo/statistics.md","hash":"f55a1a804ecafa9852c1f16eb9deb2bee49a5c8c","modified":1577017260000},{"_id":"themes/landscape/WIKI/hexo/use.md","hash":"54082ba5ad1d50a20a94daa9be0408b269a2912c","modified":1577017260000},{"_id":"themes/landscape/WIKI/.vuepress/config.js","hash":"c1d864c72bef973e2b8ccf844107182d94886a7a","modified":1577017260000},{"_id":"themes/landscape/WIKI/.vuepress/styles/palette.styl","hash":"de2cee235d25015f2efbd465eb7e5903a75d9dda","modified":1577017260000},{"_id":"themes/landscape/WIKI/.vuepress/public/manifest.json","hash":"871e6dc1aee085dca0f06e68928e99de69c6ae85","modified":1577017260000},{"_id":"themes/landscape/WIKI/yarn.lock","hash":"2e0539aac0bac2aa1e64dbc7ae96080168cc9b6d","modified":1577017260000},{"_id":"themes/landscape/WIKI/package-lock.json","hash":"41397626d1542f175db3643dc5c36f7e4e305080","modified":1577017260000},{"_id":"themes/landscape/WIKI/cover.png","hash":"933112bf55ba0dfff98fd8f3e670f12fe83d3c9f","modified":1577017260000},{"_id":"themes/landscape/CODE_OF_CONDUCT.md","hash":"d1bb942aafc0077e32e7c9433d2fd9a4ed85c17a","modified":1577017260000},{"_id":"themes/landscape/_config.example.yml","hash":"7f31e1cb0f7d7d721aad7aec26292f8ad214022a","modified":1577017260000},{"_id":"themes/landscape/font.php","hash":"9e498b59d93b1c63c4fe3c634161d6f79ec204cc","modified":1577017260000},{"_id":"themes/landscape/cover.png","hash":"56de9278ccf3bca1cae7eb7e15bad8aa593f1a55","modified":1577017260000},{"_id":"themes/nexmoe/.gitignore","hash":"dfd61e96233270b66f2f5d6509f4c02b612e9d2a","modified":1579057244478},{"_id":"themes/nexmoe/_config.example.yml","hash":"0f95fb94638969b41f8b4af71e705ed560c9ea4c","modified":1579077083723},{"_id":"themes/nexmoe/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1579057244478},{"_id":"themes/nexmoe/README.md","hash":"b1bbb88b4b96b2cbe6816a1676a010cf3d00f3e9","modified":1579057244478},{"_id":"themes/nexmoe/CODE_OF_CONDUCT.md","hash":"d1bb942aafc0077e32e7c9433d2fd9a4ed85c17a","modified":1579057244478},{"_id":"themes/nexmoe/_config.yml","hash":"3030a8a4c8a94fc7255fcd719a93e10719a0ba77","modified":1579078990925},{"_id":"themes/nexmoe/font.php","hash":"9e498b59d93b1c63c4fe3c634161d6f79ec204cc","modified":1579057244499},{"_id":"themes/nexmoe/README/english.md","hash":"215949a82c6fb02f385e6be6a8025cc268937917","modified":1579057244479},{"_id":"themes/nexmoe/WIKI/README.md","hash":"ef998ff4417d23ec4fd0baede1a0e5add6c87b74","modified":1579057244480},{"_id":"themes/nexmoe/WIKI/deploy.sh","hash":"ebb1fb1669abb9ebc07ed0769086097afdb1879c","modified":1579057244488},{"_id":"themes/nexmoe/WIKI/package.json","hash":"1a51fa8fccd41579b332eb98d7daa6e06231aa63","modified":1579057244493},{"_id":"themes/nexmoe/font/QQ.svg","hash":"195665f0d13e71bbbea8ecbe2e46c0e4e67341fe","modified":1579057244499},{"_id":"themes/nexmoe/font/appstore-fill.svg","hash":"6ecc527b424afb79bca7d26191c53ebc08091454","modified":1579057244500},{"_id":"themes/nexmoe/font/areachart.svg","hash":"71e8bef524be4ba17ac9918d8598a606b2bb26c9","modified":1579057244500},{"_id":"themes/nexmoe/font/battlenet.svg","hash":"961c2592ed5ea31319bd476e481549d69e8d075d","modified":1579057244500},{"_id":"themes/nexmoe/font/calendar-fill.svg","hash":"05e5b979cf8d150731c0eab66a4394df9498f1d6","modified":1579057244500},{"_id":"themes/nexmoe/font/container.svg","hash":"851225195cff6589a5247cb383194057190dd842","modified":1579057244501},{"_id":"themes/nexmoe/font/ellipsis.svg","hash":"c4074867e95f14d55c3e44145ef6388f60684c5e","modified":1579057244501},{"_id":"themes/nexmoe/font/dribbble.svg","hash":"0785c0b322c849b0b4736b88fc5d4fed7fbaf07d","modified":1579057244501},{"_id":"themes/nexmoe/font/eye-fill.svg","hash":"158b8b01f5c43219b599799273a0f8d553e91723","modified":1579057244501},{"_id":"themes/nexmoe/font/github.svg","hash":"b10f18d0644d120624c25b8ad5a2bc1ef5cff3a0","modified":1579057244501},{"_id":"themes/nexmoe/font/home.svg","hash":"97ab890dc43804b584ce3bb407bdbbb32030391b","modified":1579057244502},{"_id":"themes/nexmoe/font/info-circle.svg","hash":"016e0515fccbd158cd1094376910725f7325acd8","modified":1579057244502},{"_id":"themes/nexmoe/font/left.svg","hash":"3fa57b536daade473b90cd496a39962c90de12ab","modified":1579057244502},{"_id":"themes/nexmoe/font/menu.svg","hash":"93c34d0e2156caa8dca37007da3647a6af0fa352","modified":1579057244502},{"_id":"themes/nexmoe/font/mail-fill.svg","hash":"88ef0ea02f5449d7d24ce3f957847219e5205fa0","modified":1579057244502},{"_id":"themes/nexmoe/font/right.svg","hash":"640b5fad35d5b1b1052c2f44bb58b1db5446a296","modified":1579057244503},{"_id":"themes/nexmoe/font/steam.svg","hash":"cf35facf841e5be58ac7c35945ae4a576d460b7c","modified":1579057244503},{"_id":"themes/nexmoe/font/tag-fill.svg","hash":"f4a7d7cb92e40295a6b4c37b8d06385cf024eb9d","modified":1579057244503},{"_id":"themes/nexmoe/font/tags-fill.svg","hash":"87f59d1b14a5160e726ec3edc6e06fbe953f40f4","modified":1579057244503},{"_id":"themes/nexmoe/font/telegram.svg","hash":"51d8f5b3fffb40696f5830608ce2abfcebf36e2c","modified":1579057244503},{"_id":"themes/nexmoe/font/time-circle-fill.svg","hash":"ecdacea2e496c505a7d07770e54c503420ef9290","modified":1579057244503},{"_id":"themes/nexmoe/font/twitter.svg","hash":"bfad6767a6cc6058f0e4798225dc8f5898a228ca","modified":1579057244504},{"_id":"themes/nexmoe/font/unorderedlist.svg","hash":"46722843f0674341bffd8ad7f2da1deabde2ba82","modified":1579057244504},{"_id":"themes/nexmoe/font/wechat-fill.svg","hash":"fdb6fa45343307af0d6ebb70a75688afbc4444b3","modified":1579057244504},{"_id":"themes/nexmoe/font/weibo.svg","hash":"277d4076a9d17b8762e66fe81cbf0ec9f99a59cd","modified":1579057244504},{"_id":"themes/nexmoe/font/youtube.svg","hash":"fe59b1fb78e5661feae8775bdafe855f28092f0c","modified":1579057244504},{"_id":"themes/nexmoe/font/zhihu.svg","hash":"78e11c8e8f9ba84ebb2043a8fdbc484b56db3a95","modified":1579057244505},{"_id":"themes/nexmoe/languages/default.yml","hash":"8208cc5f31946e89c2208e5affa128c8117bfae7","modified":1579057244505},{"_id":"themes/nexmoe/languages/en.yml","hash":"6bbe7dac5af2fc1abbe49b7f78f8e24e99678ea5","modified":1579057244505},{"_id":"themes/nexmoe/languages/zh-CN.yml","hash":"f23cbf5457443b9f3336beb290375e554cfbc83d","modified":1579057244505},{"_id":"themes/nexmoe/font/bilibili.svg","hash":"0f9d92835db855bf581b9858a8fc1e3380be8808","modified":1579057244500},{"_id":"themes/nexmoe/languages/zh-HK.yml","hash":"0f6a83e3eb33d5afad81fec5d4d225cb587a10a4","modified":1579057244505},{"_id":"themes/nexmoe/languages/zh-TW.yml","hash":"0f6a83e3eb33d5afad81fec5d4d225cb587a10a4","modified":1579057244506},{"_id":"themes/nexmoe/layout/archives.ejs","hash":"bc8e075018eaeb040928af62300d248cf42f58f4","modified":1579057244512},{"_id":"themes/nexmoe/layout/layout.ejs","hash":"8a42607a8ec619c76985cd592a4a30df255db30a","modified":1579057244513},{"_id":"themes/nexmoe/layout/index.ejs","hash":"c01019384154cba3e9fc741398622f9e611d068d","modified":1579076701567},{"_id":"themes/nexmoe/layout/post.ejs","hash":"0f30ebb65110a0acef986c5d880e974c31087ee8","modified":1579057244513},{"_id":"themes/nexmoe/layout/py.ejs","hash":"fda887942ec72268489244ea5dddf98a45dd5937","modified":1579057244513},{"_id":"themes/nexmoe/WIKI/.vuepress/enhanceApp.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579057244479},{"_id":"themes/nexmoe/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"feb8a8754a6bd76bb4c612436b79a44f18bb2ec5","modified":1579057244477},{"_id":"themes/nexmoe/.github/ISSUE_TEMPLATE/bug_report_en.md","hash":"8d52806087943924734c51e51d11ccbdc0617046","modified":1579057244477},{"_id":"themes/nexmoe/.github/ISSUE_TEMPLATE/feature_request_en.md","hash":"1de5315f528b54fd1be9f1c42bd14d9eee078dc6","modified":1579057244477},{"_id":"themes/nexmoe/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"0b267713fc9f986ef35b56ca3dfc55b2224395fd","modified":1579057244477},{"_id":"themes/nexmoe/WIKI/.vuepress/config.js","hash":"c1d864c72bef973e2b8ccf844107182d94886a7a","modified":1579057244479},{"_id":"themes/nexmoe/.github/workflows/vuepress.yml","hash":"8c886ab09446b64a36badb89e6e43293ad52ea6b","modified":1579057244477},{"_id":"themes/nexmoe/WIKI/contribution/README.md","hash":"acc51a21f5e5f036f4f7a0d4109c2800be361fb8","modified":1579057244481},{"_id":"themes/nexmoe/WIKI/contribution/catalog.md","hash":"b59b2f664c98393fe53361343a268301ace539c1","modified":1579057244481},{"_id":"themes/nexmoe/WIKI/en/README.md","hash":"b96f8f0115e6af9afcda8afedb7210da3c0feb95","modified":1579057244489},{"_id":"themes/nexmoe/WIKI/hexo/README.md","hash":"eb3cc689a787da800c77905159f4039d1b87f9e5","modified":1579057244490},{"_id":"themes/nexmoe/WIKI/hexo/comment.md","hash":"148d6c37ff6902a0bc8929120ba821509eea3e43","modified":1579057244490},{"_id":"themes/nexmoe/WIKI/hexo/statistics.md","hash":"f55a1a804ecafa9852c1f16eb9deb2bee49a5c8c","modified":1579057244491},{"_id":"themes/nexmoe/WIKI/hexo/math.md","hash":"13797c1dc101e0c07742391e5dfbde747fa1980c","modified":1579057244490},{"_id":"themes/nexmoe/WIKI/hexo/notice.md","hash":"efc11be37c49389c4464eea54b0916c5b31143e3","modified":1579057244490},{"_id":"themes/nexmoe/WIKI/hexo/use.md","hash":"54082ba5ad1d50a20a94daa9be0408b269a2912c","modified":1579057244491},{"_id":"themes/nexmoe/layout/_partial/after-footer.ejs","hash":"02f833407a2d3b211cfc3869808d0e815f97014d","modified":1579057244509},{"_id":"themes/nexmoe/layout/_partial/analytics.ejs","hash":"a9066ea1f75b616e48ba1d5348b10f5721d7c700","modified":1579057244510},{"_id":"themes/nexmoe/layout/_partial/comment.ejs","hash":"f1e739a0eb8077168074884590033a43d4e8533f","modified":1579057244510},{"_id":"themes/nexmoe/layout/_partial/copyright.ejs","hash":"ad4e69376f3b3ec9bad6deb71bff0745cdb886eb","modified":1579057244510},{"_id":"themes/nexmoe/layout/_partial/header.ejs","hash":"64d755f32736c63860da7e5b218907d9171ff129","modified":1579076823034},{"_id":"themes/nexmoe/layout/_partial/paginator.ejs","hash":"37edff153d06f722442b13559e5849534ff4c6f6","modified":1579057244510},{"_id":"themes/nexmoe/layout/_partial/sidebar.ejs","hash":"ff2ba380abe9f938bea3e37986e3d6d4b6a6c202","modified":1579057244511},{"_id":"themes/nexmoe/layout/_partial/site-verification.ejs","hash":"0e3f39f0b42c0d20c3424a6a06b2f08486b2141c","modified":1579057244511},{"_id":"themes/nexmoe/layout/_widget/archive.ejs","hash":"be3f71b3f32ec965409185eadeca9414c5e77fbe","modified":1579057244511},{"_id":"themes/nexmoe/layout/_widget/category.ejs","hash":"a46946f96a512c6e035491b767b1a60828ce85b8","modified":1579057244511},{"_id":"themes/nexmoe/layout/_widget/recent_posts.ejs","hash":"ac93edcc618dcdad716e2549636e9834da2092d7","modified":1579057244512},{"_id":"themes/nexmoe/layout/_widget/social.ejs","hash":"6a874f100337a4d4fc5f4fade86469d365c6dd10","modified":1579057244512},{"_id":"themes/nexmoe/layout/_widget/tag.ejs","hash":"934c2175bd3d865d3e695755b2653463e0156e34","modified":1579057244512},{"_id":"themes/nexmoe/layout/_widget/tagcloud.ejs","hash":"6ca407e889fc1294a5ca3c4baa26cc51b444eb3e","modified":1579057244512},{"_id":"themes/nexmoe/scripts/helper/css_auto_version.js","hash":"1df4e02d36ae52e64f4f4e709e488d6e413d9d0c","modified":1579057244514},{"_id":"themes/nexmoe/scripts/helper/js_auto_version.js","hash":"912dfbe49c51614ef886c967349d3cb054de6f2d","modified":1579057244514},{"_id":"themes/nexmoe/source/js/app.js","hash":"cc22307ebddc836e24d3286699033aaec184779d","modified":1579057244515},{"_id":"themes/nexmoe/source/css/style.styl","hash":"4763f1fdb8bf6066365dfc32f8cb2f91082da5b7","modified":1579248171097},{"_id":"themes/nexmoe/WIKI/.vuepress/styles/palette.styl","hash":"de2cee235d25015f2efbd465eb7e5903a75d9dda","modified":1579057244480},{"_id":"themes/nexmoe/WIKI/component/basic/color.md","hash":"4767e43809633187cbd7b41a990f64769c757e45","modified":1579057244480},{"_id":"themes/nexmoe/WIKI/.vuepress/public/manifest.json","hash":"871e6dc1aee085dca0f06e68928e99de69c6ae85","modified":1579057244479},{"_id":"themes/nexmoe/WIKI/component/basic/icon.md","hash":"dcf7033f5e22a503f909a4d3266e037e4d887851","modified":1579057244480},{"_id":"themes/nexmoe/WIKI/en/Hexo/README.md","hash":"81d48222e68d5ef00bc3958941b36d49895e3f3c","modified":1579057244488},{"_id":"themes/nexmoe/WIKI/en/Hexo/comment.md","hash":"7f52cda67d77e3de25b7e69786e43687402774df","modified":1579057244488},{"_id":"themes/nexmoe/WIKI/en/Hexo/notice.md","hash":"042702cf30e9cad288100d2456044f247519ddc4","modified":1579057244489},{"_id":"themes/nexmoe/WIKI/en/Hexo/use.md","hash":"5f60cccfabe3737ab7535fb282b19dfe226a3f4e","modified":1579057244489},{"_id":"themes/nexmoe/WIKI/yarn.lock","hash":"2e0539aac0bac2aa1e64dbc7ae96080168cc9b6d","modified":1579057244496},{"_id":"themes/nexmoe/layout/_partial/_analytics/baidu.ejs","hash":"ef3b445b93529c6591b560f7c4f1ebdca56e4553","modified":1579057244506},{"_id":"themes/nexmoe/layout/_partial/_analytics/cnzz.ejs","hash":"03d9d13ef82bceec59f73e525a1124df5f6f97d3","modified":1579057244506},{"_id":"themes/nexmoe/layout/_partial/_analytics/google.ejs","hash":"ec710def09c853e63dc4598ace5b6346035c1098","modified":1579057244507},{"_id":"themes/nexmoe/layout/_partial/_analytics/gtags.ejs","hash":"7f394a1d7560fd52c9d3ec654c9e374342942b2d","modified":1579057244507},{"_id":"themes/nexmoe/layout/_partial/_analytics/gtm-body.ejs","hash":"9e4d32cf44d3ed373ba0b3e8a714378be0b69a78","modified":1579057244507},{"_id":"themes/nexmoe/layout/_partial/_analytics/gtm-head.ejs","hash":"a0d96fe2a7f108cd6e2b8be5ab0b85d29e4dba57","modified":1579057244507},{"_id":"themes/nexmoe/layout/_partial/_analytics/la.ejs","hash":"92a267edbf6df81ccf4239c1047d1dc7b3f57cf5","modified":1579057244507},{"_id":"themes/nexmoe/layout/_partial/_analytics/tencent.ejs","hash":"e2e27f03fe5e22faf217858c7887849028905773","modified":1579057244508},{"_id":"themes/nexmoe/layout/_partial/_comment/DiscussBot.ejs","hash":"c905c27f2e338dad0236ad3af60070629e3af97f","modified":1579057244508},{"_id":"themes/nexmoe/layout/_partial/_comment/changyan.ejs","hash":"1d703bf1e19ec5f0721dac537f917a077899462b","modified":1579057244508},{"_id":"themes/nexmoe/layout/_partial/_comment/disqus.ejs","hash":"48d8f5e4ac308f8a92a48f8f7dfe99e5465dcb6e","modified":1579057244508},{"_id":"themes/nexmoe/layout/_partial/_comment/disqusjs.ejs","hash":"477d18a9c061cc750f6468189bd16218b317b023","modified":1579057244508},{"_id":"themes/nexmoe/layout/_partial/_comment/gitalk.ejs","hash":"fa89274f82dd0dc4e98ca06fe2d2e764a3886291","modified":1579137559314},{"_id":"themes/nexmoe/layout/_partial/_comment/gitment.ejs","hash":"c04e14664b69c4a7f12fc88b547994ddd9a74e1d","modified":1579057244509},{"_id":"themes/nexmoe/layout/_partial/_comment/livere.ejs","hash":"af2ef5889f3f8a3326bcee017319586a0179e439","modified":1579076464728},{"_id":"themes/nexmoe/layout/_partial/_comment/valine.ejs","hash":"6a0c66594459db76d6abc99b88f1e23dbcc13cb6","modified":1579057244509},{"_id":"themes/nexmoe/cover.png","hash":"56de9278ccf3bca1cae7eb7e15bad8aa593f1a55","modified":1579057244499},{"_id":"themes/nexmoe/WIKI/package-lock.json","hash":"41397626d1542f175db3643dc5c36f7e4e305080","modified":1579057244493},{"_id":"themes/nexmoe/WIKI/en/component/basic/icon.md","hash":"c860a7902e1dbe042191483f6a3312e88aa2baee","modified":1579057244489},{"_id":"themes/nexmoe/WIKI/en/component/basic/color.md","hash":"c5ee0fcf7f184afa2ca9363fb8ff26f55768fec0","modified":1579057244489},{"_id":"themes/nexmoe/WIKI/cover.png","hash":"933112bf55ba0dfff98fd8f3e670f12fe83d3c9f","modified":1579057244487},{"_id":"themes/nexmoe/source/img/article_bg_04.webp","hash":"e7f20329b0e55852a4500460c5860fc86b1299c5","modified":1579077144959},{"_id":"themes/nexmoe/source/img/article_bg_02.webp","hash":"a63a273ad3e656780a50a70cdd56cfc6485a402b","modified":1579077144964},{"_id":"themes/nexmoe/source/img/article_bg_03.webp","hash":"3b5d276bba3ff7e3b37cd1b98bb3c1baec6e197a","modified":1579077144963},{"_id":"themes/nexmoe/source/img/sasaki.ico","hash":"9fb5284dc3315f6483c59c4ff5f1033574cf42a4","modified":1579077144963},{"_id":"themes/nexmoe/source/img/article_bg_01.webp","hash":"54de5ea67912d27664d448c700d5ba89e3ab58d8","modified":1579077144967},{"_id":"themes/nexmoe/source/img/IMG_7858.jpg","hash":"80a21b4087167fa4a1ac9e1fc7d9d53ed152340e","modified":1579077068615},{"_id":"themes/nexmoe/source/img/article_bg_04.jpg","hash":"3dc4c1fc9b933a321fa609ad573bc4720b0c67b7","modified":1579077144969},{"_id":"themes/nexmoe/source/img/article_bg_02.jpg","hash":"a15f51c636fd859d5fd9555027bb36a3c5c358c0","modified":1579077145020},{"_id":"themes/nexmoe/source/img/ffbackground.webp","hash":"1b534202bda709f6cb61935c99b40fc043e758fb","modified":1579077144976},{"_id":"themes/nexmoe/source/img/fflog.webp","hash":"86368ccd0b65132597e23902b7c3548f537df4de","modified":1579077144977},{"_id":"themes/nexmoe/source/img/article_bg_03.jpg","hash":"5abd864dd9ff4e1664ed1219d900f8687b684a21","modified":1579077145035},{"_id":"themes/nexmoe/source/img/article_bg_01.jpg","hash":"dd0ee02dd3ecaa78d4033e53ed82d8f9c982396c","modified":1579077145072},{"_id":"themes/nexmoe/source/img/fflog.jpg","hash":"f7e745f625330b426739ed5df28ee01e01e4113b","modified":1579077145251},{"_id":"themes/nexmoe/source/img/ffbackground.jpg","hash":"cdff142e2a989857c08a1a159e764c52af8aa983","modified":1579077145165},{"_id":"themes/nexmoe/source/images/article_bg_04.webp","hash":"e7f20329b0e55852a4500460c5860fc86b1299c5","modified":1579077144959},{"_id":"themes/nexmoe/source/images/IMG_7858.jpg","hash":"80a21b4087167fa4a1ac9e1fc7d9d53ed152340e","modified":1579077068615},{"_id":"themes/nexmoe/source/images/article_bg_02.webp","hash":"a63a273ad3e656780a50a70cdd56cfc6485a402b","modified":1579077144964},{"_id":"themes/nexmoe/source/images/article_bg_03.webp","hash":"3b5d276bba3ff7e3b37cd1b98bb3c1baec6e197a","modified":1579077144963},{"_id":"themes/nexmoe/source/images/sasaki.ico","hash":"9fb5284dc3315f6483c59c4ff5f1033574cf42a4","modified":1579077144963},{"_id":"themes/nexmoe/source/images/article_bg_01.webp","hash":"54de5ea67912d27664d448c700d5ba89e3ab58d8","modified":1579077144967},{"_id":"themes/nexmoe/source/images/article_bg_04.jpg","hash":"3dc4c1fc9b933a321fa609ad573bc4720b0c67b7","modified":1579077144969},{"_id":"themes/nexmoe/source/images/article_bg_02.jpg","hash":"a15f51c636fd859d5fd9555027bb36a3c5c358c0","modified":1579077145020},{"_id":"themes/nexmoe/source/images/ffbackground.webp","hash":"1b534202bda709f6cb61935c99b40fc043e758fb","modified":1579077144976},{"_id":"themes/nexmoe/source/images/fflog.webp","hash":"86368ccd0b65132597e23902b7c3548f537df4de","modified":1579077144977},{"_id":"themes/nexmoe/source/images/article_bg_03.jpg","hash":"5abd864dd9ff4e1664ed1219d900f8687b684a21","modified":1579077145035},{"_id":"themes/nexmoe/source/images/ffbackground.jpg","hash":"cdff142e2a989857c08a1a159e764c52af8aa983","modified":1579077145165},{"_id":"themes/nexmoe/source/images/article_bg_01.jpg","hash":"dd0ee02dd3ecaa78d4033e53ed82d8f9c982396c","modified":1579077145072},{"_id":"themes/nexmoe/source/images/fflog.jpg","hash":"f7e745f625330b426739ed5df28ee01e01e4113b","modified":1579077145251},{"_id":"source/about/index.md","hash":"5e089c251bb910ff27badb9dafa74652b2837150","modified":1579247423367},{"_id":"themes/nexmoe/source/images/IMG_8606.jpg","hash":"a9ffa808869099dd4a682754b81757e970dc4b44","modified":1579079803209},{"_id":"themes/nexmoe/source/images/carole.jpg","hash":"4aea018ecc75df55a9c00b86712fd920b4aa0ee7","modified":1579081329312},{"_id":"public/about.html","hash":"fcb3569e063c137487d83ff9b00b4dfed8db1b7d","modified":1579405715949},{"_id":"public/images/article_bg_04.webp","hash":"e7f20329b0e55852a4500460c5860fc86b1299c5","modified":1579405715949},{"_id":"public/images/carole.jpg","hash":"4aea018ecc75df55a9c00b86712fd920b4aa0ee7","modified":1579165983664},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1579405715949},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1579405715949},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1579405715949},{"_id":"public/images/article_bg_03.webp","hash":"3b5d276bba3ff7e3b37cd1b98bb3c1baec6e197a","modified":1579405715949},{"_id":"public/images/IMG_7858.jpg","hash":"80a21b4087167fa4a1ac9e1fc7d9d53ed152340e","modified":1579405715949},{"_id":"public/images/article_bg_02.webp","hash":"a63a273ad3e656780a50a70cdd56cfc6485a402b","modified":1579405715949},{"_id":"public/images/sasaki.ico","hash":"9fb5284dc3315f6483c59c4ff5f1033574cf42a4","modified":1579405715949},{"_id":"public/js/app.js","hash":"cc22307ebddc836e24d3286699033aaec184779d","modified":1579405715949},{"_id":"public/images/article_bg_01.webp","hash":"54de5ea67912d27664d448c700d5ba89e3ab58d8","modified":1579405715949},{"_id":"public/css/style.css","hash":"f71f62630c7f240c14d74bf715a99ffda7edd66c","modified":1579405715949},{"_id":"public/images/ffbackground.webp","hash":"1b534202bda709f6cb61935c99b40fc043e758fb","modified":1579405715949},{"_id":"public/images/fflog.webp","hash":"86368ccd0b65132597e23902b7c3548f537df4de","modified":1579405715949},{"_id":"public/images/IMG_8606.jpg","hash":"a9ffa808869099dd4a682754b81757e970dc4b44","modified":1579165983664},{"_id":"themes/nexmoe/source/images/coldrain.jpeg","hash":"ff3a0b3c059227464aa208d06b07d7fa5b2f9b5c","modified":1579157421768},{"_id":"public/images/coldrain.jpeg","hash":"ff3a0b3c059227464aa208d06b07d7fa5b2f9b5c","modified":1579405715949},{"_id":"themes/nexmoe/source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1579166226749},{"_id":"themes/nexmoe/source/images/IMG_8606.webp","hash":"2fa232f6ad49dcade41122eff2ad70c1573b26a5","modified":1579166419763},{"_id":"public/images/IMG_8606.webp","hash":"2fa232f6ad49dcade41122eff2ad70c1573b26a5","modified":1579405715949},{"_id":"source/_posts/front-end-specification.md","hash":"cb812c22c0c5024f138f630ba7445f1dd1eb0948","modified":1579248254033},{"_id":"themes/nexmoe/source/images/spec-ff.jpg","hash":"ea95218b508c40571f1280e799ffd96fcf80be41","modified":1579243988941},{"_id":"themes/nexmoe/source/images/one.png","hash":"caaf118d7b60cea69f8d11dddda7c5b865812073","modified":1579247143952},{"_id":"public/2020/01/17/front-end-specification/index.html","hash":"750faad2c37600d2d48c1b0956aecdfd0a4ce2a9","modified":1579405715949},{"_id":"public/images/one.png","hash":"caaf118d7b60cea69f8d11dddda7c5b865812073","modified":1579405715949},{"_id":"public/images/spec-ff.jpg","hash":"ea95218b508c40571f1280e799ffd96fcf80be41","modified":1579405715949},{"_id":"source/404/index/index.html","hash":"ff5fa21c80878bf6dd03e1b3124e3853e1b20a24","modified":1579251059721},{"_id":"public/404/index/index.html","hash":"10421c937dbc68b0c32655098088960f2a11221f","modified":1579251326588},{"_id":"source/404/index.html","hash":"ff5fa21c80878bf6dd03e1b3124e3853e1b20a24","modified":1579251246967},{"_id":"public/404/index.html","hash":"7d77fc13119d9bd1095e7ff68b23f8b291839451","modified":1579251277219},{"_id":"source/404/404.html","hash":"ff5fa21c80878bf6dd03e1b3124e3853e1b20a24","modified":1579251413455},{"_id":"public/404/404.html","hash":"4426b37e482787306f1d764e6d5a574af998a74d","modified":1579252541685},{"_id":"public/404/index.md","hash":"b798133ab9b83745dc395f71a283573d8d82a8f9","modified":1579252541685},{"_id":"source/404.html","hash":"534dbf270e4da50a223d9bca3a129d301430e123","modified":1579405348060},{"_id":"source/404text.html","hash":"ee83536f70fe1b7523c21fc7923b2966e19e2ebb","modified":1579405344006},{"_id":"public/404text.html","hash":"530200e18ea3389440cce1c26eff281a2473d95b","modified":1579405403428},{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1579405684393}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2020-01-08T05:14:14.000Z","cover":"/images/IMG_8606.webp","_content":"{% aplayer \"Confession\" \"coldrain\" \"https://www.yoriichi.cn/comm-music/Confession.mp3\" \"/images/coldrain.jpeg\" \"autoplay\" %}\n\n什么都能聊的前端攻城狮\n自由主义，现实主义\n自律即自由\n## 我\n爱好：动漫，音乐，健身，游戏，美食，爱自己。\n## 一句话\n不管浪活着，还是浪死了，都是水的梦想。\n## 一张图\n<img width=200 src=\"/images/one.png\" >\n\n<!-- ![](/images/one.png) -->","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2020-01-08 13:14:14\npermalink: /about\ncover: /images/IMG_8606.webp\n---\n{% aplayer \"Confession\" \"coldrain\" \"https://www.yoriichi.cn/comm-music/Confession.mp3\" \"/images/coldrain.jpeg\" \"autoplay\" %}\n\n什么都能聊的前端攻城狮\n自由主义，现实主义\n自律即自由\n## 我\n爱好：动漫，音乐，健身，游戏，美食，爱自己。\n## 一句话\n不管浪活着，还是浪死了，都是水的梦想。\n## 一张图\n<img width=200 src=\"/images/one.png\" >\n\n<!-- ![](/images/one.png) -->","updated":"2020-01-17T07:50:23.367Z","path":"/about.html","_id":"ck5f2zu910000e0c914t28g0z","comments":1,"layout":"page","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>\n        <div id=\"aplayer-IYyXQvoC\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\">\n            <pre class=\"aplayer-lrc-content\"></pre>\n        </div>\n        <script>\n          var ap = new APlayer({\n            element: document.getElementById(\"aplayer-IYyXQvoC\"),\n            narrow: false,\n            autoplay: true,\n            showlrc: false,\n            music: {\n              title: \"Confession\",\n              author: \"coldrain\",\n              url: \"https://www.yoriichi.cn/comm-music/Confession.mp3\",\n              pic: \"/images/coldrain.jpeg\",\n              lrc: \"\"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        </script>\n\n<p>什么都能聊的前端攻城狮<br>自由主义，现实主义<br>自律即自由</p>\n<h2 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h2><p>爱好：动漫，音乐，健身，游戏，美食，爱自己。</p>\n<h2 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h2><p>不管浪活着，还是浪死了，都是水的梦想。</p>\n<h2 id=\"一张图\"><a href=\"#一张图\" class=\"headerlink\" title=\"一张图\"></a>一张图</h2><img width=200 src=\"/images/one.png\" >\n\n<!-- ![](/images/one.png) -->","site":{"data":{}},"excerpt":"","more":"\n        <div id=\"aplayer-IYyXQvoC\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\">\n            <pre class=\"aplayer-lrc-content\"></pre>\n        </div>\n        <script>\n          var ap = new APlayer({\n            element: document.getElementById(\"aplayer-IYyXQvoC\"),\n            narrow: false,\n            autoplay: true,\n            showlrc: false,\n            music: {\n              title: \"Confession\",\n              author: \"coldrain\",\n              url: \"https://www.yoriichi.cn/comm-music/Confession.mp3\",\n              pic: \"/images/coldrain.jpeg\",\n              lrc: \"\"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        </script>\n\n<p>什么都能聊的前端攻城狮<br>自由主义，现实主义<br>自律即自由</p>\n<h2 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h2><p>爱好：动漫，音乐，健身，游戏，美食，爱自己。</p>\n<h2 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h2><p>不管浪活着，还是浪死了，都是水的梦想。</p>\n<h2 id=\"一张图\"><a href=\"#一张图\" class=\"headerlink\" title=\"一张图\"></a>一张图</h2><img width=200 src=\"/images/one.png\" >\n\n<!-- ![](/images/one.png) -->"},{"layout":"false","title":"404","date":"2015-02-05T12:03:48.000Z","_content":"<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <link href=\"https://fonts.googleapis.com/css?family=Lato\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"css/futuriste.css\">\n    <title>404 pages</title>\n</head>\n<style>\n    * {\n        padding: 0px;\n        margin: 0px;\n    }\n\n    body {\n        background: black;\n    }\n\n    .st0 {\n        font-family: 'FootlightMTLight';\n    }\n\n    .st1 {\n        font-size: 83.0285px;\n    }\n\n    .st2 {\n        fill: gray;\n    }\n\n    svg {\n        width: 500px;\n        height: 400px;\n        text-align: center;\n        fill: #ff4e6a;\n    }\n\n    path#XMLID_5_ {\n\n        fill: #ff4e6a;\n        filter: url(#blurFilter4);\n    }\n\n    path#XMLID_11_,\n    path#XMLID_2_ {\n        fill: #ff4e6a;\n    }\n\n    .circle {\n        animation: out 2s infinite ease-out;\n        fill: #ff4e6a;\n    }\n\n    #container {\n        text-align: center;\n    }\n\n    .message {\n        color: #ff4e6a;\n    }\n\n    .message:after {\n        content: \"]\";\n    }\n\n    .message:before {\n        content: \"[\";\n    }\n\n    .message:after,\n    .message:before {\n\n        color: #ff4e6a;\n        font-size: 20px;\n        -webkit-animation-name: opacity;\n        -webkit-animation-duration: 2s;\n        -webkit-animation-iteration-count: infinite;\n        -webkit-animation-name: opacity;\n        animation-name: opacity;\n        -webkit-animation-duration: 2s;\n        animation-duration: 2s;\n        -webkit-animation-iteration-count: infinite;\n        animation-iteration-count: infinite;\n        margin: 0 50px;\n    }\n\n    @-webkit-keyframes opacity {\n\n        0%,\n        100% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: 1;\n        }\n    }\n\n    @keyframes opacity {\n\n        0%,\n        100% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: 1;\n        }\n    }\n\n    @keyframes out {\n        0% {\n            r: 1;\n            opacity: 0.9;\n        }\n\n        25% {\n            r: 5;\n            opacity: 0.3;\n        }\n\n        50% {\n            r: 10;\n            opacity: 0.2;\n        }\n\n        75% {\n            r: 15;\n            opacity: 0.1;\n        }\n\n        100% {\n            r: 20;\n            opacity: 0;\n        }\n    }\n</style>\n\n<body>\n\n\n    <div id=\"container\">\n\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 200 82.7\" style=\"enable-background:new 0 0 200 82.7;\" xml:space=\"preserve\">\n\n            <g id=\"Calque_1\">\n                <text id=\"XMLID_3_\" transform=\"matrix(1.2187 0 0 1 11 75.6393)\" class=\"st0 st1\">4</text>\n                <text id=\"XMLID_4_\" transform=\"matrix(1.2187 0 0 1 127.5 75.6393)\" class=\"st0 st1\">4</text>\n            </g>\n            <g id=\"Calque_2\">\n                <g>\n                    <path id=\"XMLID_11_\" d=\"M81.8,29.2c4.1-5.7,10.7-9.4,18.3-9.4c6.3,0,12.1,2.7,16.1,6.9c0.6-0.4,1.1-0.7,1.7-1.1\n\t\tc-4.4-4.8-10.8-7.9-17.8-7.9c-8.3,0-15.6,4.2-20,10.6C80.7,28.5,81.3,28.8,81.8,29.2z\" />\n                    <path id=\"XMLID_2_\" d=\"M118.1,53.7c-4,5.7-10.7,9.5-18.2,9.5c-6.3,0-12.1-2.6-16.2-6.8c-0.6,0.4-1.1,0.7-1.7,1.1\n\t\tc4.4,4.8,10.8,7.8,17.9,7.8c8.3,0,15.6-4.3,19.9-10.7C119.2,54.5,118.6,54.1,118.1,53.7z\" />\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"360 100 41.3\" to=\"0 100 41.3\"\n                        dur=\"10s\" repeatCount=\"indefinite\" />\n                </g>\n                <g id=\"XMLID_6_\">\n                    <g id=\"XMLID_18_\">\n\n\n\n                        <circle class=\"circle\" cx=\"100\" cy=\"41\" r=\"1\"></circle>\n                    </g>\n                </g>\n                <defs>\n                    <filter id=\"blurFilter4\" x=\"-20\" y=\"-20\" width=\"200\" height=\"200\">\n                        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"2\" />\n                    </filter>\n                </defs>\n                <path id=\"XMLID_5_\" class=\"st2\" d=\"M103.8,16.7c0.1,0.3,0.1,0.6,0.1,0.9c11.6,1.9,20.4,11.9,20.4,24.1c0,13.5-10.9,24.4-24.4,24.4\n  S75.6,55.1,75.6,41.7c0-3.2,0.6-6.3,1.7-9.1c-0.3-0.2-0.5-0.3-0.7-0.5c-1.2,3-1.9,6.2-1.9,9.6c0,14,11.3,25.3,25.3,25.3\n  s25.3-11.3,25.3-25.3C125.3,29,115.9,18.5,103.8,16.7z\" />\n            </g>\n        </svg>\n\n        <div class=\"message\">\n            Page not found\n        </div>\n    </div>\n</body>\n\n</html>","source":"404.html","raw":"---\nlayout: false\ntitle: \"404\"\ndate: 2015-02-05 20:03:48\n---\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <link href=\"https://fonts.googleapis.com/css?family=Lato\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"css/futuriste.css\">\n    <title>404 pages</title>\n</head>\n<style>\n    * {\n        padding: 0px;\n        margin: 0px;\n    }\n\n    body {\n        background: black;\n    }\n\n    .st0 {\n        font-family: 'FootlightMTLight';\n    }\n\n    .st1 {\n        font-size: 83.0285px;\n    }\n\n    .st2 {\n        fill: gray;\n    }\n\n    svg {\n        width: 500px;\n        height: 400px;\n        text-align: center;\n        fill: #ff4e6a;\n    }\n\n    path#XMLID_5_ {\n\n        fill: #ff4e6a;\n        filter: url(#blurFilter4);\n    }\n\n    path#XMLID_11_,\n    path#XMLID_2_ {\n        fill: #ff4e6a;\n    }\n\n    .circle {\n        animation: out 2s infinite ease-out;\n        fill: #ff4e6a;\n    }\n\n    #container {\n        text-align: center;\n    }\n\n    .message {\n        color: #ff4e6a;\n    }\n\n    .message:after {\n        content: \"]\";\n    }\n\n    .message:before {\n        content: \"[\";\n    }\n\n    .message:after,\n    .message:before {\n\n        color: #ff4e6a;\n        font-size: 20px;\n        -webkit-animation-name: opacity;\n        -webkit-animation-duration: 2s;\n        -webkit-animation-iteration-count: infinite;\n        -webkit-animation-name: opacity;\n        animation-name: opacity;\n        -webkit-animation-duration: 2s;\n        animation-duration: 2s;\n        -webkit-animation-iteration-count: infinite;\n        animation-iteration-count: infinite;\n        margin: 0 50px;\n    }\n\n    @-webkit-keyframes opacity {\n\n        0%,\n        100% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: 1;\n        }\n    }\n\n    @keyframes opacity {\n\n        0%,\n        100% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: 1;\n        }\n    }\n\n    @keyframes out {\n        0% {\n            r: 1;\n            opacity: 0.9;\n        }\n\n        25% {\n            r: 5;\n            opacity: 0.3;\n        }\n\n        50% {\n            r: 10;\n            opacity: 0.2;\n        }\n\n        75% {\n            r: 15;\n            opacity: 0.1;\n        }\n\n        100% {\n            r: 20;\n            opacity: 0;\n        }\n    }\n</style>\n\n<body>\n\n\n    <div id=\"container\">\n\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 200 82.7\" style=\"enable-background:new 0 0 200 82.7;\" xml:space=\"preserve\">\n\n            <g id=\"Calque_1\">\n                <text id=\"XMLID_3_\" transform=\"matrix(1.2187 0 0 1 11 75.6393)\" class=\"st0 st1\">4</text>\n                <text id=\"XMLID_4_\" transform=\"matrix(1.2187 0 0 1 127.5 75.6393)\" class=\"st0 st1\">4</text>\n            </g>\n            <g id=\"Calque_2\">\n                <g>\n                    <path id=\"XMLID_11_\" d=\"M81.8,29.2c4.1-5.7,10.7-9.4,18.3-9.4c6.3,0,12.1,2.7,16.1,6.9c0.6-0.4,1.1-0.7,1.7-1.1\n\t\tc-4.4-4.8-10.8-7.9-17.8-7.9c-8.3,0-15.6,4.2-20,10.6C80.7,28.5,81.3,28.8,81.8,29.2z\" />\n                    <path id=\"XMLID_2_\" d=\"M118.1,53.7c-4,5.7-10.7,9.5-18.2,9.5c-6.3,0-12.1-2.6-16.2-6.8c-0.6,0.4-1.1,0.7-1.7,1.1\n\t\tc4.4,4.8,10.8,7.8,17.9,7.8c8.3,0,15.6-4.3,19.9-10.7C119.2,54.5,118.6,54.1,118.1,53.7z\" />\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"360 100 41.3\" to=\"0 100 41.3\"\n                        dur=\"10s\" repeatCount=\"indefinite\" />\n                </g>\n                <g id=\"XMLID_6_\">\n                    <g id=\"XMLID_18_\">\n\n\n\n                        <circle class=\"circle\" cx=\"100\" cy=\"41\" r=\"1\"></circle>\n                    </g>\n                </g>\n                <defs>\n                    <filter id=\"blurFilter4\" x=\"-20\" y=\"-20\" width=\"200\" height=\"200\">\n                        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"2\" />\n                    </filter>\n                </defs>\n                <path id=\"XMLID_5_\" class=\"st2\" d=\"M103.8,16.7c0.1,0.3,0.1,0.6,0.1,0.9c11.6,1.9,20.4,11.9,20.4,24.1c0,13.5-10.9,24.4-24.4,24.4\n  S75.6,55.1,75.6,41.7c0-3.2,0.6-6.3,1.7-9.1c-0.3-0.2-0.5-0.3-0.7-0.5c-1.2,3-1.9,6.2-1.9,9.6c0,14,11.3,25.3,25.3,25.3\n  s25.3-11.3,25.3-25.3C125.3,29,115.9,18.5,103.8,16.7z\" />\n            </g>\n        </svg>\n\n        <div class=\"message\">\n            Page not found\n        </div>\n    </div>\n</body>\n\n</html>","updated":"2020-01-17T09:23:28.150Z","path":"404.html","_id":"ck5hyaxqm0000tsc90n2bhl47","comments":1,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <link href=\"https://fonts.googleapis.com/css?family=Lato\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"css/futuriste.css\">\n    <title>404 pages</title>\n<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n<style>\n    * {\n        padding: 0px;\n        margin: 0px;\n    }\n\n    body {\n        background: black;\n    }\n\n    .st0 {\n        font-family: 'FootlightMTLight';\n    }\n\n    .st1 {\n        font-size: 83.0285px;\n    }\n\n    .st2 {\n        fill: gray;\n    }\n\n    svg {\n        width: 500px;\n        height: 400px;\n        text-align: center;\n        fill: #ff4e6a;\n    }\n\n    path#XMLID_5_ {\n\n        fill: #ff4e6a;\n        filter: url(#blurFilter4);\n    }\n\n    path#XMLID_11_,\n    path#XMLID_2_ {\n        fill: #ff4e6a;\n    }\n\n    .circle {\n        animation: out 2s infinite ease-out;\n        fill: #ff4e6a;\n    }\n\n    #container {\n        text-align: center;\n    }\n\n    .message {\n        color: #ff4e6a;\n    }\n\n    .message:after {\n        content: \"]\";\n    }\n\n    .message:before {\n        content: \"[\";\n    }\n\n    .message:after,\n    .message:before {\n\n        color: #ff4e6a;\n        font-size: 20px;\n        -webkit-animation-name: opacity;\n        -webkit-animation-duration: 2s;\n        -webkit-animation-iteration-count: infinite;\n        -webkit-animation-name: opacity;\n        animation-name: opacity;\n        -webkit-animation-duration: 2s;\n        animation-duration: 2s;\n        -webkit-animation-iteration-count: infinite;\n        animation-iteration-count: infinite;\n        margin: 0 50px;\n    }\n\n    @-webkit-keyframes opacity {\n\n        0%,\n        100% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: 1;\n        }\n    }\n\n    @keyframes opacity {\n\n        0%,\n        100% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: 1;\n        }\n    }\n\n    @keyframes out {\n        0% {\n            r: 1;\n            opacity: 0.9;\n        }\n\n        25% {\n            r: 5;\n            opacity: 0.3;\n        }\n\n        50% {\n            r: 10;\n            opacity: 0.2;\n        }\n\n        75% {\n            r: 15;\n            opacity: 0.1;\n        }\n\n        100% {\n            r: 20;\n            opacity: 0;\n        }\n    }\n</style>\n\n<body>\n\n\n    <div id=\"container\">\n\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 200 82.7\" style=\"enable-background:new 0 0 200 82.7;\" xml:space=\"preserve\">\n\n            <g id=\"Calque_1\">\n                <text id=\"XMLID_3_\" transform=\"matrix(1.2187 0 0 1 11 75.6393)\" class=\"st0 st1\">4</text>\n                <text id=\"XMLID_4_\" transform=\"matrix(1.2187 0 0 1 127.5 75.6393)\" class=\"st0 st1\">4</text>\n            </g>\n            <g id=\"Calque_2\">\n                <g>\n                    <path id=\"XMLID_11_\" d=\"M81.8,29.2c4.1-5.7,10.7-9.4,18.3-9.4c6.3,0,12.1,2.7,16.1,6.9c0.6-0.4,1.1-0.7,1.7-1.1\n\t\tc-4.4-4.8-10.8-7.9-17.8-7.9c-8.3,0-15.6,4.2-20,10.6C80.7,28.5,81.3,28.8,81.8,29.2z\" />\n                    <path id=\"XMLID_2_\" d=\"M118.1,53.7c-4,5.7-10.7,9.5-18.2,9.5c-6.3,0-12.1-2.6-16.2-6.8c-0.6,0.4-1.1,0.7-1.7,1.1\n\t\tc4.4,4.8,10.8,7.8,17.9,7.8c8.3,0,15.6-4.3,19.9-10.7C119.2,54.5,118.6,54.1,118.1,53.7z\" />\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"360 100 41.3\" to=\"0 100 41.3\"\n                        dur=\"10s\" repeatCount=\"indefinite\" />\n                </g>\n                <g id=\"XMLID_6_\">\n                    <g id=\"XMLID_18_\">\n\n\n\n                        <circle class=\"circle\" cx=\"100\" cy=\"41\" r=\"1\"></circle>\n                    </g>\n                </g>\n                <defs>\n                    <filter id=\"blurFilter4\" x=\"-20\" y=\"-20\" width=\"200\" height=\"200\">\n                        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"2\" />\n                    </filter>\n                </defs>\n                <path id=\"XMLID_5_\" class=\"st2\" d=\"M103.8,16.7c0.1,0.3,0.1,0.6,0.1,0.9c11.6,1.9,20.4,11.9,20.4,24.1c0,13.5-10.9,24.4-24.4,24.4\n  S75.6,55.1,75.6,41.7c0-3.2,0.6-6.3,1.7-9.1c-0.3-0.2-0.5-0.3-0.7-0.5c-1.2,3-1.9,6.2-1.9,9.6c0,14,11.3,25.3,25.3,25.3\n  s25.3-11.3,25.3-25.3C125.3,29,115.9,18.5,103.8,16.7z\" />\n            </g>\n        </svg>\n\n        <div class=\"message\">\n            Page not found\n        </div>\n    </div>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginModelPath\":\"assets/\",\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":false},\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});</script></body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <link href=\"https://fonts.googleapis.com/css?family=Lato\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"css/futuriste.css\">\n    <title>404 pages</title>\n<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n<style>\n    * {\n        padding: 0px;\n        margin: 0px;\n    }\n\n    body {\n        background: black;\n    }\n\n    .st0 {\n        font-family: 'FootlightMTLight';\n    }\n\n    .st1 {\n        font-size: 83.0285px;\n    }\n\n    .st2 {\n        fill: gray;\n    }\n\n    svg {\n        width: 500px;\n        height: 400px;\n        text-align: center;\n        fill: #ff4e6a;\n    }\n\n    path#XMLID_5_ {\n\n        fill: #ff4e6a;\n        filter: url(#blurFilter4);\n    }\n\n    path#XMLID_11_,\n    path#XMLID_2_ {\n        fill: #ff4e6a;\n    }\n\n    .circle {\n        animation: out 2s infinite ease-out;\n        fill: #ff4e6a;\n    }\n\n    #container {\n        text-align: center;\n    }\n\n    .message {\n        color: #ff4e6a;\n    }\n\n    .message:after {\n        content: \"]\";\n    }\n\n    .message:before {\n        content: \"[\";\n    }\n\n    .message:after,\n    .message:before {\n\n        color: #ff4e6a;\n        font-size: 20px;\n        -webkit-animation-name: opacity;\n        -webkit-animation-duration: 2s;\n        -webkit-animation-iteration-count: infinite;\n        -webkit-animation-name: opacity;\n        animation-name: opacity;\n        -webkit-animation-duration: 2s;\n        animation-duration: 2s;\n        -webkit-animation-iteration-count: infinite;\n        animation-iteration-count: infinite;\n        margin: 0 50px;\n    }\n\n    @-webkit-keyframes opacity {\n\n        0%,\n        100% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: 1;\n        }\n    }\n\n    @keyframes opacity {\n\n        0%,\n        100% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: 1;\n        }\n    }\n\n    @keyframes out {\n        0% {\n            r: 1;\n            opacity: 0.9;\n        }\n\n        25% {\n            r: 5;\n            opacity: 0.3;\n        }\n\n        50% {\n            r: 10;\n            opacity: 0.2;\n        }\n\n        75% {\n            r: 15;\n            opacity: 0.1;\n        }\n\n        100% {\n            r: 20;\n            opacity: 0;\n        }\n    }\n</style>\n\n<body>\n\n\n    <div id=\"container\">\n\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 200 82.7\" style=\"enable-background:new 0 0 200 82.7;\" xml:space=\"preserve\">\n\n            <g id=\"Calque_1\">\n                <text id=\"XMLID_3_\" transform=\"matrix(1.2187 0 0 1 11 75.6393)\" class=\"st0 st1\">4</text>\n                <text id=\"XMLID_4_\" transform=\"matrix(1.2187 0 0 1 127.5 75.6393)\" class=\"st0 st1\">4</text>\n            </g>\n            <g id=\"Calque_2\">\n                <g>\n                    <path id=\"XMLID_11_\" d=\"M81.8,29.2c4.1-5.7,10.7-9.4,18.3-9.4c6.3,0,12.1,2.7,16.1,6.9c0.6-0.4,1.1-0.7,1.7-1.1\n\t\tc-4.4-4.8-10.8-7.9-17.8-7.9c-8.3,0-15.6,4.2-20,10.6C80.7,28.5,81.3,28.8,81.8,29.2z\" />\n                    <path id=\"XMLID_2_\" d=\"M118.1,53.7c-4,5.7-10.7,9.5-18.2,9.5c-6.3,0-12.1-2.6-16.2-6.8c-0.6,0.4-1.1,0.7-1.7,1.1\n\t\tc4.4,4.8,10.8,7.8,17.9,7.8c8.3,0,15.6-4.3,19.9-10.7C119.2,54.5,118.6,54.1,118.1,53.7z\" />\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"360 100 41.3\" to=\"0 100 41.3\"\n                        dur=\"10s\" repeatCount=\"indefinite\" />\n                </g>\n                <g id=\"XMLID_6_\">\n                    <g id=\"XMLID_18_\">\n\n\n\n                        <circle class=\"circle\" cx=\"100\" cy=\"41\" r=\"1\"></circle>\n                    </g>\n                </g>\n                <defs>\n                    <filter id=\"blurFilter4\" x=\"-20\" y=\"-20\" width=\"200\" height=\"200\">\n                        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"2\" />\n                    </filter>\n                </defs>\n                <path id=\"XMLID_5_\" class=\"st2\" d=\"M103.8,16.7c0.1,0.3,0.1,0.6,0.1,0.9c11.6,1.9,20.4,11.9,20.4,24.1c0,13.5-10.9,24.4-24.4,24.4\n  S75.6,55.1,75.6,41.7c0-3.2,0.6-6.3,1.7-9.1c-0.3-0.2-0.5-0.3-0.7-0.5c-1.2,3-1.9,6.2-1.9,9.6c0,14,11.3,25.3,25.3,25.3\n  s25.3-11.3,25.3-25.3C125.3,29,115.9,18.5,103.8,16.7z\" />\n            </g>\n        </svg>\n\n        <div class=\"message\">\n            Page not found\n        </div>\n    </div>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginModelPath\":\"assets/\",\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":false},\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});</script></body>\n\n</html>"}],"Post":[{"title":"css收藏动画汇总","date":"2020-01-13T06:05:28.000Z","cover":"/images/article_bg_01.webp","excerpt":"各种玄幻的CSS花活","_content":"### 利用不同的`delay`实现交错动画\n\n- [Reveal Text](https://codepen.io/alphardex/pen/eYYMYXJ)\n- [Staggered Stair Loading](https://codepen.io/alphardex/pen/MWWvRRR)\n- [Staggered Square Loading](https://codepen.io/alphardex/pen/LYYZZEz)\n- [Staggered Wave Loading](https://codepen.io/alphardex/pen/XWWWBmQ)\n- [Gleaming Loading](https://codepen.io/alphardex/pen/QWLYVjV)\n- [Particle Burst](https://codepen.io/alphardex/pen/pozqwrO)\n- [Gleaming Heading](https://codepen.io/alphardex/pen/rNBrExx)\n- [Staggered Shrinking Loading](https://codepen.io/alphardex/pen/eYmORVe)\n- [Snow](https://codepen.io/alphardex/pen/dyPorwJ)\n- [Staggered Rise In Text](https://codepen.io/alphardex/pen/qBEmGbw)\n- [Staggered LandIn Text](https://codepen.io/alphardex/pen/KKwvKGY)\n\n## 文本\n\n### 利用`background-clip:text`配合`color`实现渐变文字效果\n\n- [Shining Text](https://codepen.io/alphardex/pen/VwweapQ)\n- [Menu Hover Fill Text](https://codepen.io/alphardex/pen/QWwveZG)\n\n### 利用动态`hsl`颜色实现彩虹文字效果\n\n- [Rainbow Color Text](https://codepen.io/alphardex/pen/ExxQOWV)\n\n### 利用`text-shadow`实现发光文字效果\n\n- [Neon Text](https://codepen.io/alphardex/pen/rNNwmZz)\n- [Staggered Glow In Text](https://codepen.io/alphardex/pen/Exxodoq)\n\n### 利用`text-shadow`实现伪3D文字效果\n\n- [Staggered Bouncing 3D Loading](https://codepen.io/alphardex/pen/QWWavvx)\n\n### 利用`web animation`实现冒泡文字效果\n\n- [Bubbling Text](https://codepen.io/alphardex/pen/LYYLdoY)\n\n### 利用动态`max-width`实现文本展开效果\n\n- [Abbr Expansion](https://codepen.io/alphardex/pen/xxKvvMQ)\n\n### 利用绝对定位、3D变换和JS实现翻转文字\n\n- [Rotating Text](https://codepen.io/alphardex/pen/WNNVJeZ)\n\n## 视觉\n\n### 利用`backdrop-filter`实现毛玻璃背景效果\n\n- [Frosted Glass](https://codepen.io/alphardex/pen/pooQMVp)\n\n### 利用背景、绝对定位和`filter`实现毛玻璃景深效果\n\n- [Frosted Glass Depth of Field](https://codepen.io/alphardex/pen/ZEEZpQG)\n\n### 利用`blur`和`contrast`滤镜实现融合效果\n\n- [Snow Scratch](https://codepen.io/alphardex/pen/BaBevXm)\n\n### 利用元素叠加`blur`滤镜实现日光效果\n\n- [Eclipse Loader](https://codepen.io/alphardex/pen/gOOPKJE)\n- [Glowing List Hover](https://codepen.io/alphardex/pen/KKKLdaR)\n- [Glowing Gradient Border](https://codepen.io/alphardex/pen/GRRaMOV)\n- [Glowing Gradient Button](https://codepen.io/alphardex/pen/xxxNpad)\n- [Crimson Crescent Loading](https://codepen.io/alphardex/full/eYmGEGp)\n\n### 利用`mix-blend-mode:screen`实现文本遮罩效果\n\n- [Video Mask Text](https://codepen.io/alphardex/pen/wvvLYpV)\n\n### 利用`-webkit-box-reflect`实现倒影效果\n\n- [Card Flip Reflection](https://codepen.io/alphardex/pen/ExaZgxp)\n\n## 页面\n\n### 利用3D变换实现视差效果\n\n- [Parallax](https://codepen.io/alphardex/pen/qBEZELp)\n\n### 利用`position:sticky`实现粘性滚动效果\n\n- [Sticky Sections](https://codepen.io/alphardex/pen/YzPqeMm)\n\n### 利用绝对定位和交错动画实现镜头拉伸背景效果\n\n- [Ken Burns Effect](https://codepen.io/alphardex/pen/wvBovww)\n\n### 利用伪元素、绝对定位和动画实现滑动幻灯片\n\n- [Animated Image Slider](https://codepen.io/alphardex/details/VwYWpJN)\n\n## 组件\n\n### 利用`border-radius`实现曲边导航栏\n\n- [Nav Tab](https://codepen.io/alphardex/pen/abbWOPR)\n\n### 利用动画和绝对定位实现汉堡菜单\n\n- [Burger Menu](https://codepen.io/alphardex/pen/BaaKvVZ)\n\n### 利用伪元素和动画实现动态划线效果\n\n- [Menu Hover Underline](https://codepen.io/alphardex/pen/MWWEmLK)\n- [Menu Hover Magnify](https://codepen.io/alphardex/pen/ExxPRXN)\n- [Button Hover Border Stroke With Float Text](https://codepen.io/alphardex/pen/pooYKVa)\n- [Header With Slide Bar](https://codepen.io/alphardex/pen/jOEOEzZ)\n- [Button Hover Multiple Border Stroke](https://codepen.io/alphardex/full/ZEYXomW)\n\n### 利用伪元素和`overflow:hidden`实现交错分割文本菜单\n\n- [Split Text Menu](https://codepen.io/alphardex/pen/wvvxVPj)\n- [Staggered Float Text Menu](https://codepen.io/alphardex/pen/wvBeXjd)\n- [Shinchou Menu](https://codepen.io/alphardex/pen/ExavZdV)（慎重勇者风格菜单）\n\n### 利用伪元素和`overflow:hidden`实现填充按钮\n\n- [Confirm Modal](https://codepen.io/alphardex/pen/eYYxzBm)\n\n### 利用伪元素、渐变和`overflow:hidden`实现闪光按钮\n\n- [Button Hover Shining](https://codepen.io/alphardex/pen/eYYzXBZ)\n\n### 利用绝对定位、动画、渐变和`overflow:hidden`实现蛇形边框按钮\n\n- [Snake Border Button](https://codepen.io/alphardex/pen/qBBGxqY)\n\n### 利用伪元素、渐变、背景运动实现动态渐变边框\n\n- [Gradient Border](https://codepen.io/alphardex/pen/vYEYGzp)\n\n### 利用`oveflow:hidden`、`max-height`和`:target`实现手风琴菜单\n\n- [Accordion Menu](https://codepen.io/alphardex/pen/xxxNbar)\n- [Accordion Panel](https://codepen.io/alphardex/pen/LYEYaoJ)\n\n### 利用`overflow:hidden`和`scroll`相关属性实现无缝轮播图\n\n- [Carousel](https://codepen.io/alphardex/pen/RwwqqJE)\n\n### 利用兄弟选择器配合伪元素自定义单复选框\n\n- [Todo List](https://codepen.io/alphardex/pen/rNNPQwa)\n- [Radio Button](https://codepen.io/alphardex/pen/JjjpNWQ)\n- [Checkbox](https://codepen.io/alphardex/pen/yLLjoaL)\n- [Toggle](https://codepen.io/alphardex/pen/poopqvE)\n- [Elevator Switch](https://codepen.io/alphardex/pen/YzzMMPx)\n\n### 利用各种属性实现各种按钮特效\n\n- [Button Collection](https://codepen.io/alphardex/pen/VwwVLdM)\n- [Share Button](https://codepen.io/alphardex/pen/qBBwXZm)\n- [Login Button](https://codepen.io/alphardex/pen/VwZNqEK)\n- [One-Field Login Form](https://codepen.io/alphardex/pen/xxxRPLE)\n\n### 利用多重`box-shadow`阴影实现发光按钮菜单\n\n- [Glowing Menu Buttons](https://codepen.io/alphardex/pen/ExxKjEN)\n\n### 利用`counter`在伪元素的`content`中显示`var`的值\n\n- [Progress Bar](https://codepen.io/alphardex/pen/MWWwNeR)\n\n### 利用`-webkit-slider-thumb`定制滑块\n\n- [Gradient Range Slider](https://codepen.io/alphardex/pen/QWWXyee)\n\n### 利用伪类校验表单\n\n- [Transparent Material Login Form](https://codepen.io/alphardex/pen/zYYZorR)\n\n### 利用动画实现卡片展开\n\n- [Card Hover Expand Body](https://codepen.io/alphardex/pen/YzzGjLL)\n\n### 利用`clip-path`实现卡片多方向展开\n\n- [Name Card Hover Expand](https://codepen.io/alphardex/pen/ZEEBRrq)\n\n### 利用没有`perspective`的`transform-style:preserve-3d`实现等距3D效果\n\n- [3D Cube](https://codepen.io/alphardex/pen/yLLrReg)\n- [Isometric Icon Hover](https://codepen.io/alphardex/pen/oNNRxGQ)\n- [Isometric Images Hover](https://codepen.io/alphardex/pen/QWWRMew)\n- [Isometric Icon Nav Bar](https://codepen.io/alphardex/pen/YzPKENd)\n\n### 利用3D变换实现3D下拉菜单\n\n- [3D Dropdown Menu](https://codepen.io/alphardex/pen/rNaNyev)\n\n### 利用动画和JS实现简单的分页栏\n\n- [Pagination](https://codepen.io/alphardex/pen/QWwwwpp)\n\n### 利用伪元素、`overflow:hidden`、动画、JS实现标签页\n\n- [Tabs](https://codepen.io/alphardex/pen/vYEEdGK)\n\n### 利用伪元素、`:checked`、`~`兄弟选择器实现5星评分\n\n- [Star Rating](https://codepen.io/alphardex/pen/povvGNZ)\n\n### 运用伪元素、层叠关系、3D变换、JS实现翻牌时钟\n\n- [Flip Card Clock](https://codepen.io/alphardex/pen/vYYoBNR)\n\n### 利用鼠标事件监听和`web animation`实现图片悬浮菜单\n\n- [Menu Hover Image](https://codepen.io/alphardex/pen/OJPmQGz)\n\n### 利用`conic-gradient`，伪元素和CSS变量实现圆盘度量计\n\n- [Gauge (No SVG)](https://codepen.io/alphardex/pen/BaydVvQ)\n\n","source":"_posts/css-animation.md","raw":"---\ntitle: css收藏动画汇总\ndate: 2020-01-13 14:05:28\ntags:\ncover: /images/article_bg_01.webp\nexcerpt: 各种玄幻的CSS花活\n---\n### 利用不同的`delay`实现交错动画\n\n- [Reveal Text](https://codepen.io/alphardex/pen/eYYMYXJ)\n- [Staggered Stair Loading](https://codepen.io/alphardex/pen/MWWvRRR)\n- [Staggered Square Loading](https://codepen.io/alphardex/pen/LYYZZEz)\n- [Staggered Wave Loading](https://codepen.io/alphardex/pen/XWWWBmQ)\n- [Gleaming Loading](https://codepen.io/alphardex/pen/QWLYVjV)\n- [Particle Burst](https://codepen.io/alphardex/pen/pozqwrO)\n- [Gleaming Heading](https://codepen.io/alphardex/pen/rNBrExx)\n- [Staggered Shrinking Loading](https://codepen.io/alphardex/pen/eYmORVe)\n- [Snow](https://codepen.io/alphardex/pen/dyPorwJ)\n- [Staggered Rise In Text](https://codepen.io/alphardex/pen/qBEmGbw)\n- [Staggered LandIn Text](https://codepen.io/alphardex/pen/KKwvKGY)\n\n## 文本\n\n### 利用`background-clip:text`配合`color`实现渐变文字效果\n\n- [Shining Text](https://codepen.io/alphardex/pen/VwweapQ)\n- [Menu Hover Fill Text](https://codepen.io/alphardex/pen/QWwveZG)\n\n### 利用动态`hsl`颜色实现彩虹文字效果\n\n- [Rainbow Color Text](https://codepen.io/alphardex/pen/ExxQOWV)\n\n### 利用`text-shadow`实现发光文字效果\n\n- [Neon Text](https://codepen.io/alphardex/pen/rNNwmZz)\n- [Staggered Glow In Text](https://codepen.io/alphardex/pen/Exxodoq)\n\n### 利用`text-shadow`实现伪3D文字效果\n\n- [Staggered Bouncing 3D Loading](https://codepen.io/alphardex/pen/QWWavvx)\n\n### 利用`web animation`实现冒泡文字效果\n\n- [Bubbling Text](https://codepen.io/alphardex/pen/LYYLdoY)\n\n### 利用动态`max-width`实现文本展开效果\n\n- [Abbr Expansion](https://codepen.io/alphardex/pen/xxKvvMQ)\n\n### 利用绝对定位、3D变换和JS实现翻转文字\n\n- [Rotating Text](https://codepen.io/alphardex/pen/WNNVJeZ)\n\n## 视觉\n\n### 利用`backdrop-filter`实现毛玻璃背景效果\n\n- [Frosted Glass](https://codepen.io/alphardex/pen/pooQMVp)\n\n### 利用背景、绝对定位和`filter`实现毛玻璃景深效果\n\n- [Frosted Glass Depth of Field](https://codepen.io/alphardex/pen/ZEEZpQG)\n\n### 利用`blur`和`contrast`滤镜实现融合效果\n\n- [Snow Scratch](https://codepen.io/alphardex/pen/BaBevXm)\n\n### 利用元素叠加`blur`滤镜实现日光效果\n\n- [Eclipse Loader](https://codepen.io/alphardex/pen/gOOPKJE)\n- [Glowing List Hover](https://codepen.io/alphardex/pen/KKKLdaR)\n- [Glowing Gradient Border](https://codepen.io/alphardex/pen/GRRaMOV)\n- [Glowing Gradient Button](https://codepen.io/alphardex/pen/xxxNpad)\n- [Crimson Crescent Loading](https://codepen.io/alphardex/full/eYmGEGp)\n\n### 利用`mix-blend-mode:screen`实现文本遮罩效果\n\n- [Video Mask Text](https://codepen.io/alphardex/pen/wvvLYpV)\n\n### 利用`-webkit-box-reflect`实现倒影效果\n\n- [Card Flip Reflection](https://codepen.io/alphardex/pen/ExaZgxp)\n\n## 页面\n\n### 利用3D变换实现视差效果\n\n- [Parallax](https://codepen.io/alphardex/pen/qBEZELp)\n\n### 利用`position:sticky`实现粘性滚动效果\n\n- [Sticky Sections](https://codepen.io/alphardex/pen/YzPqeMm)\n\n### 利用绝对定位和交错动画实现镜头拉伸背景效果\n\n- [Ken Burns Effect](https://codepen.io/alphardex/pen/wvBovww)\n\n### 利用伪元素、绝对定位和动画实现滑动幻灯片\n\n- [Animated Image Slider](https://codepen.io/alphardex/details/VwYWpJN)\n\n## 组件\n\n### 利用`border-radius`实现曲边导航栏\n\n- [Nav Tab](https://codepen.io/alphardex/pen/abbWOPR)\n\n### 利用动画和绝对定位实现汉堡菜单\n\n- [Burger Menu](https://codepen.io/alphardex/pen/BaaKvVZ)\n\n### 利用伪元素和动画实现动态划线效果\n\n- [Menu Hover Underline](https://codepen.io/alphardex/pen/MWWEmLK)\n- [Menu Hover Magnify](https://codepen.io/alphardex/pen/ExxPRXN)\n- [Button Hover Border Stroke With Float Text](https://codepen.io/alphardex/pen/pooYKVa)\n- [Header With Slide Bar](https://codepen.io/alphardex/pen/jOEOEzZ)\n- [Button Hover Multiple Border Stroke](https://codepen.io/alphardex/full/ZEYXomW)\n\n### 利用伪元素和`overflow:hidden`实现交错分割文本菜单\n\n- [Split Text Menu](https://codepen.io/alphardex/pen/wvvxVPj)\n- [Staggered Float Text Menu](https://codepen.io/alphardex/pen/wvBeXjd)\n- [Shinchou Menu](https://codepen.io/alphardex/pen/ExavZdV)（慎重勇者风格菜单）\n\n### 利用伪元素和`overflow:hidden`实现填充按钮\n\n- [Confirm Modal](https://codepen.io/alphardex/pen/eYYxzBm)\n\n### 利用伪元素、渐变和`overflow:hidden`实现闪光按钮\n\n- [Button Hover Shining](https://codepen.io/alphardex/pen/eYYzXBZ)\n\n### 利用绝对定位、动画、渐变和`overflow:hidden`实现蛇形边框按钮\n\n- [Snake Border Button](https://codepen.io/alphardex/pen/qBBGxqY)\n\n### 利用伪元素、渐变、背景运动实现动态渐变边框\n\n- [Gradient Border](https://codepen.io/alphardex/pen/vYEYGzp)\n\n### 利用`oveflow:hidden`、`max-height`和`:target`实现手风琴菜单\n\n- [Accordion Menu](https://codepen.io/alphardex/pen/xxxNbar)\n- [Accordion Panel](https://codepen.io/alphardex/pen/LYEYaoJ)\n\n### 利用`overflow:hidden`和`scroll`相关属性实现无缝轮播图\n\n- [Carousel](https://codepen.io/alphardex/pen/RwwqqJE)\n\n### 利用兄弟选择器配合伪元素自定义单复选框\n\n- [Todo List](https://codepen.io/alphardex/pen/rNNPQwa)\n- [Radio Button](https://codepen.io/alphardex/pen/JjjpNWQ)\n- [Checkbox](https://codepen.io/alphardex/pen/yLLjoaL)\n- [Toggle](https://codepen.io/alphardex/pen/poopqvE)\n- [Elevator Switch](https://codepen.io/alphardex/pen/YzzMMPx)\n\n### 利用各种属性实现各种按钮特效\n\n- [Button Collection](https://codepen.io/alphardex/pen/VwwVLdM)\n- [Share Button](https://codepen.io/alphardex/pen/qBBwXZm)\n- [Login Button](https://codepen.io/alphardex/pen/VwZNqEK)\n- [One-Field Login Form](https://codepen.io/alphardex/pen/xxxRPLE)\n\n### 利用多重`box-shadow`阴影实现发光按钮菜单\n\n- [Glowing Menu Buttons](https://codepen.io/alphardex/pen/ExxKjEN)\n\n### 利用`counter`在伪元素的`content`中显示`var`的值\n\n- [Progress Bar](https://codepen.io/alphardex/pen/MWWwNeR)\n\n### 利用`-webkit-slider-thumb`定制滑块\n\n- [Gradient Range Slider](https://codepen.io/alphardex/pen/QWWXyee)\n\n### 利用伪类校验表单\n\n- [Transparent Material Login Form](https://codepen.io/alphardex/pen/zYYZorR)\n\n### 利用动画实现卡片展开\n\n- [Card Hover Expand Body](https://codepen.io/alphardex/pen/YzzGjLL)\n\n### 利用`clip-path`实现卡片多方向展开\n\n- [Name Card Hover Expand](https://codepen.io/alphardex/pen/ZEEBRrq)\n\n### 利用没有`perspective`的`transform-style:preserve-3d`实现等距3D效果\n\n- [3D Cube](https://codepen.io/alphardex/pen/yLLrReg)\n- [Isometric Icon Hover](https://codepen.io/alphardex/pen/oNNRxGQ)\n- [Isometric Images Hover](https://codepen.io/alphardex/pen/QWWRMew)\n- [Isometric Icon Nav Bar](https://codepen.io/alphardex/pen/YzPKENd)\n\n### 利用3D变换实现3D下拉菜单\n\n- [3D Dropdown Menu](https://codepen.io/alphardex/pen/rNaNyev)\n\n### 利用动画和JS实现简单的分页栏\n\n- [Pagination](https://codepen.io/alphardex/pen/QWwwwpp)\n\n### 利用伪元素、`overflow:hidden`、动画、JS实现标签页\n\n- [Tabs](https://codepen.io/alphardex/pen/vYEEdGK)\n\n### 利用伪元素、`:checked`、`~`兄弟选择器实现5星评分\n\n- [Star Rating](https://codepen.io/alphardex/pen/povvGNZ)\n\n### 运用伪元素、层叠关系、3D变换、JS实现翻牌时钟\n\n- [Flip Card Clock](https://codepen.io/alphardex/pen/vYYoBNR)\n\n### 利用鼠标事件监听和`web animation`实现图片悬浮菜单\n\n- [Menu Hover Image](https://codepen.io/alphardex/pen/OJPmQGz)\n\n### 利用`conic-gradient`，伪元素和CSS变量实现圆盘度量计\n\n- [Gauge (No SVG)](https://codepen.io/alphardex/pen/BaydVvQ)\n\n","slug":"css-animation","published":1,"updated":"2020-01-16T01:21:58.247Z","_id":"ck5eqn2gm0000yvc906ecdush","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"利用不同的delay实现交错动画\"><a href=\"#利用不同的delay实现交错动画\" class=\"headerlink\" title=\"利用不同的delay实现交错动画\"></a>利用不同的<code>delay</code>实现交错动画</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/eYYMYXJ\" target=\"_blank\" rel=\"noopener\">Reveal Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/MWWvRRR\" target=\"_blank\" rel=\"noopener\">Staggered Stair Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/LYYZZEz\" target=\"_blank\" rel=\"noopener\">Staggered Square Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/XWWWBmQ\" target=\"_blank\" rel=\"noopener\">Staggered Wave Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/QWLYVjV\" target=\"_blank\" rel=\"noopener\">Gleaming Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/pozqwrO\" target=\"_blank\" rel=\"noopener\">Particle Burst</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/rNBrExx\" target=\"_blank\" rel=\"noopener\">Gleaming Heading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/eYmORVe\" target=\"_blank\" rel=\"noopener\">Staggered Shrinking Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/dyPorwJ\" target=\"_blank\" rel=\"noopener\">Snow</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/qBEmGbw\" target=\"_blank\" rel=\"noopener\">Staggered Rise In Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/KKwvKGY\" target=\"_blank\" rel=\"noopener\">Staggered LandIn Text</a></li>\n</ul>\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><h3 id=\"利用background-clip-text配合color实现渐变文字效果\"><a href=\"#利用background-clip-text配合color实现渐变文字效果\" class=\"headerlink\" title=\"利用background-clip:text配合color实现渐变文字效果\"></a>利用<code>background-clip:text</code>配合<code>color</code>实现渐变文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/VwweapQ\" target=\"_blank\" rel=\"noopener\">Shining Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/QWwveZG\" target=\"_blank\" rel=\"noopener\">Menu Hover Fill Text</a></li>\n</ul>\n<h3 id=\"利用动态hsl颜色实现彩虹文字效果\"><a href=\"#利用动态hsl颜色实现彩虹文字效果\" class=\"headerlink\" title=\"利用动态hsl颜色实现彩虹文字效果\"></a>利用动态<code>hsl</code>颜色实现彩虹文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ExxQOWV\" target=\"_blank\" rel=\"noopener\">Rainbow Color Text</a></li>\n</ul>\n<h3 id=\"利用text-shadow实现发光文字效果\"><a href=\"#利用text-shadow实现发光文字效果\" class=\"headerlink\" title=\"利用text-shadow实现发光文字效果\"></a>利用<code>text-shadow</code>实现发光文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/rNNwmZz\" target=\"_blank\" rel=\"noopener\">Neon Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/Exxodoq\" target=\"_blank\" rel=\"noopener\">Staggered Glow In Text</a></li>\n</ul>\n<h3 id=\"利用text-shadow实现伪3D文字效果\"><a href=\"#利用text-shadow实现伪3D文字效果\" class=\"headerlink\" title=\"利用text-shadow实现伪3D文字效果\"></a>利用<code>text-shadow</code>实现伪3D文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/QWWavvx\" target=\"_blank\" rel=\"noopener\">Staggered Bouncing 3D Loading</a></li>\n</ul>\n<h3 id=\"利用web-animation实现冒泡文字效果\"><a href=\"#利用web-animation实现冒泡文字效果\" class=\"headerlink\" title=\"利用web animation实现冒泡文字效果\"></a>利用<code>web animation</code>实现冒泡文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/LYYLdoY\" target=\"_blank\" rel=\"noopener\">Bubbling Text</a></li>\n</ul>\n<h3 id=\"利用动态max-width实现文本展开效果\"><a href=\"#利用动态max-width实现文本展开效果\" class=\"headerlink\" title=\"利用动态max-width实现文本展开效果\"></a>利用动态<code>max-width</code>实现文本展开效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/xxKvvMQ\" target=\"_blank\" rel=\"noopener\">Abbr Expansion</a></li>\n</ul>\n<h3 id=\"利用绝对定位、3D变换和JS实现翻转文字\"><a href=\"#利用绝对定位、3D变换和JS实现翻转文字\" class=\"headerlink\" title=\"利用绝对定位、3D变换和JS实现翻转文字\"></a>利用绝对定位、3D变换和JS实现翻转文字</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/WNNVJeZ\" target=\"_blank\" rel=\"noopener\">Rotating Text</a></li>\n</ul>\n<h2 id=\"视觉\"><a href=\"#视觉\" class=\"headerlink\" title=\"视觉\"></a>视觉</h2><h3 id=\"利用backdrop-filter实现毛玻璃背景效果\"><a href=\"#利用backdrop-filter实现毛玻璃背景效果\" class=\"headerlink\" title=\"利用backdrop-filter实现毛玻璃背景效果\"></a>利用<code>backdrop-filter</code>实现毛玻璃背景效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/pooQMVp\" target=\"_blank\" rel=\"noopener\">Frosted Glass</a></li>\n</ul>\n<h3 id=\"利用背景、绝对定位和filter实现毛玻璃景深效果\"><a href=\"#利用背景、绝对定位和filter实现毛玻璃景深效果\" class=\"headerlink\" title=\"利用背景、绝对定位和filter实现毛玻璃景深效果\"></a>利用背景、绝对定位和<code>filter</code>实现毛玻璃景深效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ZEEZpQG\" target=\"_blank\" rel=\"noopener\">Frosted Glass Depth of Field</a></li>\n</ul>\n<h3 id=\"利用blur和contrast滤镜实现融合效果\"><a href=\"#利用blur和contrast滤镜实现融合效果\" class=\"headerlink\" title=\"利用blur和contrast滤镜实现融合效果\"></a>利用<code>blur</code>和<code>contrast</code>滤镜实现融合效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/BaBevXm\" target=\"_blank\" rel=\"noopener\">Snow Scratch</a></li>\n</ul>\n<h3 id=\"利用元素叠加blur滤镜实现日光效果\"><a href=\"#利用元素叠加blur滤镜实现日光效果\" class=\"headerlink\" title=\"利用元素叠加blur滤镜实现日光效果\"></a>利用元素叠加<code>blur</code>滤镜实现日光效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/gOOPKJE\" target=\"_blank\" rel=\"noopener\">Eclipse Loader</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/KKKLdaR\" target=\"_blank\" rel=\"noopener\">Glowing List Hover</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/GRRaMOV\" target=\"_blank\" rel=\"noopener\">Glowing Gradient Border</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/xxxNpad\" target=\"_blank\" rel=\"noopener\">Glowing Gradient Button</a></li>\n<li><a href=\"https://codepen.io/alphardex/full/eYmGEGp\" target=\"_blank\" rel=\"noopener\">Crimson Crescent Loading</a></li>\n</ul>\n<h3 id=\"利用mix-blend-mode-screen实现文本遮罩效果\"><a href=\"#利用mix-blend-mode-screen实现文本遮罩效果\" class=\"headerlink\" title=\"利用mix-blend-mode:screen实现文本遮罩效果\"></a>利用<code>mix-blend-mode:screen</code>实现文本遮罩效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/wvvLYpV\" target=\"_blank\" rel=\"noopener\">Video Mask Text</a></li>\n</ul>\n<h3 id=\"利用-webkit-box-reflect实现倒影效果\"><a href=\"#利用-webkit-box-reflect实现倒影效果\" class=\"headerlink\" title=\"利用-webkit-box-reflect实现倒影效果\"></a>利用<code>-webkit-box-reflect</code>实现倒影效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ExaZgxp\" target=\"_blank\" rel=\"noopener\">Card Flip Reflection</a></li>\n</ul>\n<h2 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a>页面</h2><h3 id=\"利用3D变换实现视差效果\"><a href=\"#利用3D变换实现视差效果\" class=\"headerlink\" title=\"利用3D变换实现视差效果\"></a>利用3D变换实现视差效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/qBEZELp\" target=\"_blank\" rel=\"noopener\">Parallax</a></li>\n</ul>\n<h3 id=\"利用position-sticky实现粘性滚动效果\"><a href=\"#利用position-sticky实现粘性滚动效果\" class=\"headerlink\" title=\"利用position:sticky实现粘性滚动效果\"></a>利用<code>position:sticky</code>实现粘性滚动效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/YzPqeMm\" target=\"_blank\" rel=\"noopener\">Sticky Sections</a></li>\n</ul>\n<h3 id=\"利用绝对定位和交错动画实现镜头拉伸背景效果\"><a href=\"#利用绝对定位和交错动画实现镜头拉伸背景效果\" class=\"headerlink\" title=\"利用绝对定位和交错动画实现镜头拉伸背景效果\"></a>利用绝对定位和交错动画实现镜头拉伸背景效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/wvBovww\" target=\"_blank\" rel=\"noopener\">Ken Burns Effect</a></li>\n</ul>\n<h3 id=\"利用伪元素、绝对定位和动画实现滑动幻灯片\"><a href=\"#利用伪元素、绝对定位和动画实现滑动幻灯片\" class=\"headerlink\" title=\"利用伪元素、绝对定位和动画实现滑动幻灯片\"></a>利用伪元素、绝对定位和动画实现滑动幻灯片</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/details/VwYWpJN\" target=\"_blank\" rel=\"noopener\">Animated Image Slider</a></li>\n</ul>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"利用border-radius实现曲边导航栏\"><a href=\"#利用border-radius实现曲边导航栏\" class=\"headerlink\" title=\"利用border-radius实现曲边导航栏\"></a>利用<code>border-radius</code>实现曲边导航栏</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/abbWOPR\" target=\"_blank\" rel=\"noopener\">Nav Tab</a></li>\n</ul>\n<h3 id=\"利用动画和绝对定位实现汉堡菜单\"><a href=\"#利用动画和绝对定位实现汉堡菜单\" class=\"headerlink\" title=\"利用动画和绝对定位实现汉堡菜单\"></a>利用动画和绝对定位实现汉堡菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/BaaKvVZ\" target=\"_blank\" rel=\"noopener\">Burger Menu</a></li>\n</ul>\n<h3 id=\"利用伪元素和动画实现动态划线效果\"><a href=\"#利用伪元素和动画实现动态划线效果\" class=\"headerlink\" title=\"利用伪元素和动画实现动态划线效果\"></a>利用伪元素和动画实现动态划线效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/MWWEmLK\" target=\"_blank\" rel=\"noopener\">Menu Hover Underline</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/ExxPRXN\" target=\"_blank\" rel=\"noopener\">Menu Hover Magnify</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/pooYKVa\" target=\"_blank\" rel=\"noopener\">Button Hover Border Stroke With Float Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/jOEOEzZ\" target=\"_blank\" rel=\"noopener\">Header With Slide Bar</a></li>\n<li><a href=\"https://codepen.io/alphardex/full/ZEYXomW\" target=\"_blank\" rel=\"noopener\">Button Hover Multiple Border Stroke</a></li>\n</ul>\n<h3 id=\"利用伪元素和overflow-hidden实现交错分割文本菜单\"><a href=\"#利用伪元素和overflow-hidden实现交错分割文本菜单\" class=\"headerlink\" title=\"利用伪元素和overflow:hidden实现交错分割文本菜单\"></a>利用伪元素和<code>overflow:hidden</code>实现交错分割文本菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/wvvxVPj\" target=\"_blank\" rel=\"noopener\">Split Text Menu</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/wvBeXjd\" target=\"_blank\" rel=\"noopener\">Staggered Float Text Menu</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/ExavZdV\" target=\"_blank\" rel=\"noopener\">Shinchou Menu</a>（慎重勇者风格菜单）</li>\n</ul>\n<h3 id=\"利用伪元素和overflow-hidden实现填充按钮\"><a href=\"#利用伪元素和overflow-hidden实现填充按钮\" class=\"headerlink\" title=\"利用伪元素和overflow:hidden实现填充按钮\"></a>利用伪元素和<code>overflow:hidden</code>实现填充按钮</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/eYYxzBm\" target=\"_blank\" rel=\"noopener\">Confirm Modal</a></li>\n</ul>\n<h3 id=\"利用伪元素、渐变和overflow-hidden实现闪光按钮\"><a href=\"#利用伪元素、渐变和overflow-hidden实现闪光按钮\" class=\"headerlink\" title=\"利用伪元素、渐变和overflow:hidden实现闪光按钮\"></a>利用伪元素、渐变和<code>overflow:hidden</code>实现闪光按钮</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/eYYzXBZ\" target=\"_blank\" rel=\"noopener\">Button Hover Shining</a></li>\n</ul>\n<h3 id=\"利用绝对定位、动画、渐变和overflow-hidden实现蛇形边框按钮\"><a href=\"#利用绝对定位、动画、渐变和overflow-hidden实现蛇形边框按钮\" class=\"headerlink\" title=\"利用绝对定位、动画、渐变和overflow:hidden实现蛇形边框按钮\"></a>利用绝对定位、动画、渐变和<code>overflow:hidden</code>实现蛇形边框按钮</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/qBBGxqY\" target=\"_blank\" rel=\"noopener\">Snake Border Button</a></li>\n</ul>\n<h3 id=\"利用伪元素、渐变、背景运动实现动态渐变边框\"><a href=\"#利用伪元素、渐变、背景运动实现动态渐变边框\" class=\"headerlink\" title=\"利用伪元素、渐变、背景运动实现动态渐变边框\"></a>利用伪元素、渐变、背景运动实现动态渐变边框</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/vYEYGzp\" target=\"_blank\" rel=\"noopener\">Gradient Border</a></li>\n</ul>\n<h3 id=\"利用oveflow-hidden、max-height和-target实现手风琴菜单\"><a href=\"#利用oveflow-hidden、max-height和-target实现手风琴菜单\" class=\"headerlink\" title=\"利用oveflow:hidden、max-height和:target实现手风琴菜单\"></a>利用<code>oveflow:hidden</code>、<code>max-height</code>和<code>:target</code>实现手风琴菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/xxxNbar\" target=\"_blank\" rel=\"noopener\">Accordion Menu</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/LYEYaoJ\" target=\"_blank\" rel=\"noopener\">Accordion Panel</a></li>\n</ul>\n<h3 id=\"利用overflow-hidden和scroll相关属性实现无缝轮播图\"><a href=\"#利用overflow-hidden和scroll相关属性实现无缝轮播图\" class=\"headerlink\" title=\"利用overflow:hidden和scroll相关属性实现无缝轮播图\"></a>利用<code>overflow:hidden</code>和<code>scroll</code>相关属性实现无缝轮播图</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/RwwqqJE\" target=\"_blank\" rel=\"noopener\">Carousel</a></li>\n</ul>\n<h3 id=\"利用兄弟选择器配合伪元素自定义单复选框\"><a href=\"#利用兄弟选择器配合伪元素自定义单复选框\" class=\"headerlink\" title=\"利用兄弟选择器配合伪元素自定义单复选框\"></a>利用兄弟选择器配合伪元素自定义单复选框</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/rNNPQwa\" target=\"_blank\" rel=\"noopener\">Todo List</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/JjjpNWQ\" target=\"_blank\" rel=\"noopener\">Radio Button</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/yLLjoaL\" target=\"_blank\" rel=\"noopener\">Checkbox</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/poopqvE\" target=\"_blank\" rel=\"noopener\">Toggle</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/YzzMMPx\" target=\"_blank\" rel=\"noopener\">Elevator Switch</a></li>\n</ul>\n<h3 id=\"利用各种属性实现各种按钮特效\"><a href=\"#利用各种属性实现各种按钮特效\" class=\"headerlink\" title=\"利用各种属性实现各种按钮特效\"></a>利用各种属性实现各种按钮特效</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/VwwVLdM\" target=\"_blank\" rel=\"noopener\">Button Collection</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/qBBwXZm\" target=\"_blank\" rel=\"noopener\">Share Button</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/VwZNqEK\" target=\"_blank\" rel=\"noopener\">Login Button</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/xxxRPLE\" target=\"_blank\" rel=\"noopener\">One-Field Login Form</a></li>\n</ul>\n<h3 id=\"利用多重box-shadow阴影实现发光按钮菜单\"><a href=\"#利用多重box-shadow阴影实现发光按钮菜单\" class=\"headerlink\" title=\"利用多重box-shadow阴影实现发光按钮菜单\"></a>利用多重<code>box-shadow</code>阴影实现发光按钮菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ExxKjEN\" target=\"_blank\" rel=\"noopener\">Glowing Menu Buttons</a></li>\n</ul>\n<h3 id=\"利用counter在伪元素的content中显示var的值\"><a href=\"#利用counter在伪元素的content中显示var的值\" class=\"headerlink\" title=\"利用counter在伪元素的content中显示var的值\"></a>利用<code>counter</code>在伪元素的<code>content</code>中显示<code>var</code>的值</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/MWWwNeR\" target=\"_blank\" rel=\"noopener\">Progress Bar</a></li>\n</ul>\n<h3 id=\"利用-webkit-slider-thumb定制滑块\"><a href=\"#利用-webkit-slider-thumb定制滑块\" class=\"headerlink\" title=\"利用-webkit-slider-thumb定制滑块\"></a>利用<code>-webkit-slider-thumb</code>定制滑块</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/QWWXyee\" target=\"_blank\" rel=\"noopener\">Gradient Range Slider</a></li>\n</ul>\n<h3 id=\"利用伪类校验表单\"><a href=\"#利用伪类校验表单\" class=\"headerlink\" title=\"利用伪类校验表单\"></a>利用伪类校验表单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/zYYZorR\" target=\"_blank\" rel=\"noopener\">Transparent Material Login Form</a></li>\n</ul>\n<h3 id=\"利用动画实现卡片展开\"><a href=\"#利用动画实现卡片展开\" class=\"headerlink\" title=\"利用动画实现卡片展开\"></a>利用动画实现卡片展开</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/YzzGjLL\" target=\"_blank\" rel=\"noopener\">Card Hover Expand Body</a></li>\n</ul>\n<h3 id=\"利用clip-path实现卡片多方向展开\"><a href=\"#利用clip-path实现卡片多方向展开\" class=\"headerlink\" title=\"利用clip-path实现卡片多方向展开\"></a>利用<code>clip-path</code>实现卡片多方向展开</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ZEEBRrq\" target=\"_blank\" rel=\"noopener\">Name Card Hover Expand</a></li>\n</ul>\n<h3 id=\"利用没有perspective的transform-style-preserve-3d实现等距3D效果\"><a href=\"#利用没有perspective的transform-style-preserve-3d实现等距3D效果\" class=\"headerlink\" title=\"利用没有perspective的transform-style:preserve-3d实现等距3D效果\"></a>利用没有<code>perspective</code>的<code>transform-style:preserve-3d</code>实现等距3D效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/yLLrReg\" target=\"_blank\" rel=\"noopener\">3D Cube</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/oNNRxGQ\" target=\"_blank\" rel=\"noopener\">Isometric Icon Hover</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/QWWRMew\" target=\"_blank\" rel=\"noopener\">Isometric Images Hover</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/YzPKENd\" target=\"_blank\" rel=\"noopener\">Isometric Icon Nav Bar</a></li>\n</ul>\n<h3 id=\"利用3D变换实现3D下拉菜单\"><a href=\"#利用3D变换实现3D下拉菜单\" class=\"headerlink\" title=\"利用3D变换实现3D下拉菜单\"></a>利用3D变换实现3D下拉菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/rNaNyev\" target=\"_blank\" rel=\"noopener\">3D Dropdown Menu</a></li>\n</ul>\n<h3 id=\"利用动画和JS实现简单的分页栏\"><a href=\"#利用动画和JS实现简单的分页栏\" class=\"headerlink\" title=\"利用动画和JS实现简单的分页栏\"></a>利用动画和JS实现简单的分页栏</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/QWwwwpp\" target=\"_blank\" rel=\"noopener\">Pagination</a></li>\n</ul>\n<h3 id=\"利用伪元素、overflow-hidden、动画、JS实现标签页\"><a href=\"#利用伪元素、overflow-hidden、动画、JS实现标签页\" class=\"headerlink\" title=\"利用伪元素、overflow:hidden、动画、JS实现标签页\"></a>利用伪元素、<code>overflow:hidden</code>、动画、JS实现标签页</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/vYEEdGK\" target=\"_blank\" rel=\"noopener\">Tabs</a></li>\n</ul>\n<h3 id=\"利用伪元素、-checked、-兄弟选择器实现5星评分\"><a href=\"#利用伪元素、-checked、-兄弟选择器实现5星评分\" class=\"headerlink\" title=\"利用伪元素、:checked、~兄弟选择器实现5星评分\"></a>利用伪元素、<code>:checked</code>、<code>~</code>兄弟选择器实现5星评分</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/povvGNZ\" target=\"_blank\" rel=\"noopener\">Star Rating</a></li>\n</ul>\n<h3 id=\"运用伪元素、层叠关系、3D变换、JS实现翻牌时钟\"><a href=\"#运用伪元素、层叠关系、3D变换、JS实现翻牌时钟\" class=\"headerlink\" title=\"运用伪元素、层叠关系、3D变换、JS实现翻牌时钟\"></a>运用伪元素、层叠关系、3D变换、JS实现翻牌时钟</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/vYYoBNR\" target=\"_blank\" rel=\"noopener\">Flip Card Clock</a></li>\n</ul>\n<h3 id=\"利用鼠标事件监听和web-animation实现图片悬浮菜单\"><a href=\"#利用鼠标事件监听和web-animation实现图片悬浮菜单\" class=\"headerlink\" title=\"利用鼠标事件监听和web animation实现图片悬浮菜单\"></a>利用鼠标事件监听和<code>web animation</code>实现图片悬浮菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/OJPmQGz\" target=\"_blank\" rel=\"noopener\">Menu Hover Image</a></li>\n</ul>\n<h3 id=\"利用conic-gradient，伪元素和CSS变量实现圆盘度量计\"><a href=\"#利用conic-gradient，伪元素和CSS变量实现圆盘度量计\" class=\"headerlink\" title=\"利用conic-gradient，伪元素和CSS变量实现圆盘度量计\"></a>利用<code>conic-gradient</code>，伪元素和CSS变量实现圆盘度量计</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/BaydVvQ\" target=\"_blank\" rel=\"noopener\">Gauge (No SVG)</a></li>\n</ul>\n","site":{"data":{}},"more":"<h3 id=\"利用不同的delay实现交错动画\"><a href=\"#利用不同的delay实现交错动画\" class=\"headerlink\" title=\"利用不同的delay实现交错动画\"></a>利用不同的<code>delay</code>实现交错动画</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/eYYMYXJ\" target=\"_blank\" rel=\"noopener\">Reveal Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/MWWvRRR\" target=\"_blank\" rel=\"noopener\">Staggered Stair Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/LYYZZEz\" target=\"_blank\" rel=\"noopener\">Staggered Square Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/XWWWBmQ\" target=\"_blank\" rel=\"noopener\">Staggered Wave Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/QWLYVjV\" target=\"_blank\" rel=\"noopener\">Gleaming Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/pozqwrO\" target=\"_blank\" rel=\"noopener\">Particle Burst</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/rNBrExx\" target=\"_blank\" rel=\"noopener\">Gleaming Heading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/eYmORVe\" target=\"_blank\" rel=\"noopener\">Staggered Shrinking Loading</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/dyPorwJ\" target=\"_blank\" rel=\"noopener\">Snow</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/qBEmGbw\" target=\"_blank\" rel=\"noopener\">Staggered Rise In Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/KKwvKGY\" target=\"_blank\" rel=\"noopener\">Staggered LandIn Text</a></li>\n</ul>\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><h3 id=\"利用background-clip-text配合color实现渐变文字效果\"><a href=\"#利用background-clip-text配合color实现渐变文字效果\" class=\"headerlink\" title=\"利用background-clip:text配合color实现渐变文字效果\"></a>利用<code>background-clip:text</code>配合<code>color</code>实现渐变文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/VwweapQ\" target=\"_blank\" rel=\"noopener\">Shining Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/QWwveZG\" target=\"_blank\" rel=\"noopener\">Menu Hover Fill Text</a></li>\n</ul>\n<h3 id=\"利用动态hsl颜色实现彩虹文字效果\"><a href=\"#利用动态hsl颜色实现彩虹文字效果\" class=\"headerlink\" title=\"利用动态hsl颜色实现彩虹文字效果\"></a>利用动态<code>hsl</code>颜色实现彩虹文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ExxQOWV\" target=\"_blank\" rel=\"noopener\">Rainbow Color Text</a></li>\n</ul>\n<h3 id=\"利用text-shadow实现发光文字效果\"><a href=\"#利用text-shadow实现发光文字效果\" class=\"headerlink\" title=\"利用text-shadow实现发光文字效果\"></a>利用<code>text-shadow</code>实现发光文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/rNNwmZz\" target=\"_blank\" rel=\"noopener\">Neon Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/Exxodoq\" target=\"_blank\" rel=\"noopener\">Staggered Glow In Text</a></li>\n</ul>\n<h3 id=\"利用text-shadow实现伪3D文字效果\"><a href=\"#利用text-shadow实现伪3D文字效果\" class=\"headerlink\" title=\"利用text-shadow实现伪3D文字效果\"></a>利用<code>text-shadow</code>实现伪3D文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/QWWavvx\" target=\"_blank\" rel=\"noopener\">Staggered Bouncing 3D Loading</a></li>\n</ul>\n<h3 id=\"利用web-animation实现冒泡文字效果\"><a href=\"#利用web-animation实现冒泡文字效果\" class=\"headerlink\" title=\"利用web animation实现冒泡文字效果\"></a>利用<code>web animation</code>实现冒泡文字效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/LYYLdoY\" target=\"_blank\" rel=\"noopener\">Bubbling Text</a></li>\n</ul>\n<h3 id=\"利用动态max-width实现文本展开效果\"><a href=\"#利用动态max-width实现文本展开效果\" class=\"headerlink\" title=\"利用动态max-width实现文本展开效果\"></a>利用动态<code>max-width</code>实现文本展开效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/xxKvvMQ\" target=\"_blank\" rel=\"noopener\">Abbr Expansion</a></li>\n</ul>\n<h3 id=\"利用绝对定位、3D变换和JS实现翻转文字\"><a href=\"#利用绝对定位、3D变换和JS实现翻转文字\" class=\"headerlink\" title=\"利用绝对定位、3D变换和JS实现翻转文字\"></a>利用绝对定位、3D变换和JS实现翻转文字</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/WNNVJeZ\" target=\"_blank\" rel=\"noopener\">Rotating Text</a></li>\n</ul>\n<h2 id=\"视觉\"><a href=\"#视觉\" class=\"headerlink\" title=\"视觉\"></a>视觉</h2><h3 id=\"利用backdrop-filter实现毛玻璃背景效果\"><a href=\"#利用backdrop-filter实现毛玻璃背景效果\" class=\"headerlink\" title=\"利用backdrop-filter实现毛玻璃背景效果\"></a>利用<code>backdrop-filter</code>实现毛玻璃背景效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/pooQMVp\" target=\"_blank\" rel=\"noopener\">Frosted Glass</a></li>\n</ul>\n<h3 id=\"利用背景、绝对定位和filter实现毛玻璃景深效果\"><a href=\"#利用背景、绝对定位和filter实现毛玻璃景深效果\" class=\"headerlink\" title=\"利用背景、绝对定位和filter实现毛玻璃景深效果\"></a>利用背景、绝对定位和<code>filter</code>实现毛玻璃景深效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ZEEZpQG\" target=\"_blank\" rel=\"noopener\">Frosted Glass Depth of Field</a></li>\n</ul>\n<h3 id=\"利用blur和contrast滤镜实现融合效果\"><a href=\"#利用blur和contrast滤镜实现融合效果\" class=\"headerlink\" title=\"利用blur和contrast滤镜实现融合效果\"></a>利用<code>blur</code>和<code>contrast</code>滤镜实现融合效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/BaBevXm\" target=\"_blank\" rel=\"noopener\">Snow Scratch</a></li>\n</ul>\n<h3 id=\"利用元素叠加blur滤镜实现日光效果\"><a href=\"#利用元素叠加blur滤镜实现日光效果\" class=\"headerlink\" title=\"利用元素叠加blur滤镜实现日光效果\"></a>利用元素叠加<code>blur</code>滤镜实现日光效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/gOOPKJE\" target=\"_blank\" rel=\"noopener\">Eclipse Loader</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/KKKLdaR\" target=\"_blank\" rel=\"noopener\">Glowing List Hover</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/GRRaMOV\" target=\"_blank\" rel=\"noopener\">Glowing Gradient Border</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/xxxNpad\" target=\"_blank\" rel=\"noopener\">Glowing Gradient Button</a></li>\n<li><a href=\"https://codepen.io/alphardex/full/eYmGEGp\" target=\"_blank\" rel=\"noopener\">Crimson Crescent Loading</a></li>\n</ul>\n<h3 id=\"利用mix-blend-mode-screen实现文本遮罩效果\"><a href=\"#利用mix-blend-mode-screen实现文本遮罩效果\" class=\"headerlink\" title=\"利用mix-blend-mode:screen实现文本遮罩效果\"></a>利用<code>mix-blend-mode:screen</code>实现文本遮罩效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/wvvLYpV\" target=\"_blank\" rel=\"noopener\">Video Mask Text</a></li>\n</ul>\n<h3 id=\"利用-webkit-box-reflect实现倒影效果\"><a href=\"#利用-webkit-box-reflect实现倒影效果\" class=\"headerlink\" title=\"利用-webkit-box-reflect实现倒影效果\"></a>利用<code>-webkit-box-reflect</code>实现倒影效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ExaZgxp\" target=\"_blank\" rel=\"noopener\">Card Flip Reflection</a></li>\n</ul>\n<h2 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a>页面</h2><h3 id=\"利用3D变换实现视差效果\"><a href=\"#利用3D变换实现视差效果\" class=\"headerlink\" title=\"利用3D变换实现视差效果\"></a>利用3D变换实现视差效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/qBEZELp\" target=\"_blank\" rel=\"noopener\">Parallax</a></li>\n</ul>\n<h3 id=\"利用position-sticky实现粘性滚动效果\"><a href=\"#利用position-sticky实现粘性滚动效果\" class=\"headerlink\" title=\"利用position:sticky实现粘性滚动效果\"></a>利用<code>position:sticky</code>实现粘性滚动效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/YzPqeMm\" target=\"_blank\" rel=\"noopener\">Sticky Sections</a></li>\n</ul>\n<h3 id=\"利用绝对定位和交错动画实现镜头拉伸背景效果\"><a href=\"#利用绝对定位和交错动画实现镜头拉伸背景效果\" class=\"headerlink\" title=\"利用绝对定位和交错动画实现镜头拉伸背景效果\"></a>利用绝对定位和交错动画实现镜头拉伸背景效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/wvBovww\" target=\"_blank\" rel=\"noopener\">Ken Burns Effect</a></li>\n</ul>\n<h3 id=\"利用伪元素、绝对定位和动画实现滑动幻灯片\"><a href=\"#利用伪元素、绝对定位和动画实现滑动幻灯片\" class=\"headerlink\" title=\"利用伪元素、绝对定位和动画实现滑动幻灯片\"></a>利用伪元素、绝对定位和动画实现滑动幻灯片</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/details/VwYWpJN\" target=\"_blank\" rel=\"noopener\">Animated Image Slider</a></li>\n</ul>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"利用border-radius实现曲边导航栏\"><a href=\"#利用border-radius实现曲边导航栏\" class=\"headerlink\" title=\"利用border-radius实现曲边导航栏\"></a>利用<code>border-radius</code>实现曲边导航栏</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/abbWOPR\" target=\"_blank\" rel=\"noopener\">Nav Tab</a></li>\n</ul>\n<h3 id=\"利用动画和绝对定位实现汉堡菜单\"><a href=\"#利用动画和绝对定位实现汉堡菜单\" class=\"headerlink\" title=\"利用动画和绝对定位实现汉堡菜单\"></a>利用动画和绝对定位实现汉堡菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/BaaKvVZ\" target=\"_blank\" rel=\"noopener\">Burger Menu</a></li>\n</ul>\n<h3 id=\"利用伪元素和动画实现动态划线效果\"><a href=\"#利用伪元素和动画实现动态划线效果\" class=\"headerlink\" title=\"利用伪元素和动画实现动态划线效果\"></a>利用伪元素和动画实现动态划线效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/MWWEmLK\" target=\"_blank\" rel=\"noopener\">Menu Hover Underline</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/ExxPRXN\" target=\"_blank\" rel=\"noopener\">Menu Hover Magnify</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/pooYKVa\" target=\"_blank\" rel=\"noopener\">Button Hover Border Stroke With Float Text</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/jOEOEzZ\" target=\"_blank\" rel=\"noopener\">Header With Slide Bar</a></li>\n<li><a href=\"https://codepen.io/alphardex/full/ZEYXomW\" target=\"_blank\" rel=\"noopener\">Button Hover Multiple Border Stroke</a></li>\n</ul>\n<h3 id=\"利用伪元素和overflow-hidden实现交错分割文本菜单\"><a href=\"#利用伪元素和overflow-hidden实现交错分割文本菜单\" class=\"headerlink\" title=\"利用伪元素和overflow:hidden实现交错分割文本菜单\"></a>利用伪元素和<code>overflow:hidden</code>实现交错分割文本菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/wvvxVPj\" target=\"_blank\" rel=\"noopener\">Split Text Menu</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/wvBeXjd\" target=\"_blank\" rel=\"noopener\">Staggered Float Text Menu</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/ExavZdV\" target=\"_blank\" rel=\"noopener\">Shinchou Menu</a>（慎重勇者风格菜单）</li>\n</ul>\n<h3 id=\"利用伪元素和overflow-hidden实现填充按钮\"><a href=\"#利用伪元素和overflow-hidden实现填充按钮\" class=\"headerlink\" title=\"利用伪元素和overflow:hidden实现填充按钮\"></a>利用伪元素和<code>overflow:hidden</code>实现填充按钮</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/eYYxzBm\" target=\"_blank\" rel=\"noopener\">Confirm Modal</a></li>\n</ul>\n<h3 id=\"利用伪元素、渐变和overflow-hidden实现闪光按钮\"><a href=\"#利用伪元素、渐变和overflow-hidden实现闪光按钮\" class=\"headerlink\" title=\"利用伪元素、渐变和overflow:hidden实现闪光按钮\"></a>利用伪元素、渐变和<code>overflow:hidden</code>实现闪光按钮</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/eYYzXBZ\" target=\"_blank\" rel=\"noopener\">Button Hover Shining</a></li>\n</ul>\n<h3 id=\"利用绝对定位、动画、渐变和overflow-hidden实现蛇形边框按钮\"><a href=\"#利用绝对定位、动画、渐变和overflow-hidden实现蛇形边框按钮\" class=\"headerlink\" title=\"利用绝对定位、动画、渐变和overflow:hidden实现蛇形边框按钮\"></a>利用绝对定位、动画、渐变和<code>overflow:hidden</code>实现蛇形边框按钮</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/qBBGxqY\" target=\"_blank\" rel=\"noopener\">Snake Border Button</a></li>\n</ul>\n<h3 id=\"利用伪元素、渐变、背景运动实现动态渐变边框\"><a href=\"#利用伪元素、渐变、背景运动实现动态渐变边框\" class=\"headerlink\" title=\"利用伪元素、渐变、背景运动实现动态渐变边框\"></a>利用伪元素、渐变、背景运动实现动态渐变边框</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/vYEYGzp\" target=\"_blank\" rel=\"noopener\">Gradient Border</a></li>\n</ul>\n<h3 id=\"利用oveflow-hidden、max-height和-target实现手风琴菜单\"><a href=\"#利用oveflow-hidden、max-height和-target实现手风琴菜单\" class=\"headerlink\" title=\"利用oveflow:hidden、max-height和:target实现手风琴菜单\"></a>利用<code>oveflow:hidden</code>、<code>max-height</code>和<code>:target</code>实现手风琴菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/xxxNbar\" target=\"_blank\" rel=\"noopener\">Accordion Menu</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/LYEYaoJ\" target=\"_blank\" rel=\"noopener\">Accordion Panel</a></li>\n</ul>\n<h3 id=\"利用overflow-hidden和scroll相关属性实现无缝轮播图\"><a href=\"#利用overflow-hidden和scroll相关属性实现无缝轮播图\" class=\"headerlink\" title=\"利用overflow:hidden和scroll相关属性实现无缝轮播图\"></a>利用<code>overflow:hidden</code>和<code>scroll</code>相关属性实现无缝轮播图</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/RwwqqJE\" target=\"_blank\" rel=\"noopener\">Carousel</a></li>\n</ul>\n<h3 id=\"利用兄弟选择器配合伪元素自定义单复选框\"><a href=\"#利用兄弟选择器配合伪元素自定义单复选框\" class=\"headerlink\" title=\"利用兄弟选择器配合伪元素自定义单复选框\"></a>利用兄弟选择器配合伪元素自定义单复选框</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/rNNPQwa\" target=\"_blank\" rel=\"noopener\">Todo List</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/JjjpNWQ\" target=\"_blank\" rel=\"noopener\">Radio Button</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/yLLjoaL\" target=\"_blank\" rel=\"noopener\">Checkbox</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/poopqvE\" target=\"_blank\" rel=\"noopener\">Toggle</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/YzzMMPx\" target=\"_blank\" rel=\"noopener\">Elevator Switch</a></li>\n</ul>\n<h3 id=\"利用各种属性实现各种按钮特效\"><a href=\"#利用各种属性实现各种按钮特效\" class=\"headerlink\" title=\"利用各种属性实现各种按钮特效\"></a>利用各种属性实现各种按钮特效</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/VwwVLdM\" target=\"_blank\" rel=\"noopener\">Button Collection</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/qBBwXZm\" target=\"_blank\" rel=\"noopener\">Share Button</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/VwZNqEK\" target=\"_blank\" rel=\"noopener\">Login Button</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/xxxRPLE\" target=\"_blank\" rel=\"noopener\">One-Field Login Form</a></li>\n</ul>\n<h3 id=\"利用多重box-shadow阴影实现发光按钮菜单\"><a href=\"#利用多重box-shadow阴影实现发光按钮菜单\" class=\"headerlink\" title=\"利用多重box-shadow阴影实现发光按钮菜单\"></a>利用多重<code>box-shadow</code>阴影实现发光按钮菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ExxKjEN\" target=\"_blank\" rel=\"noopener\">Glowing Menu Buttons</a></li>\n</ul>\n<h3 id=\"利用counter在伪元素的content中显示var的值\"><a href=\"#利用counter在伪元素的content中显示var的值\" class=\"headerlink\" title=\"利用counter在伪元素的content中显示var的值\"></a>利用<code>counter</code>在伪元素的<code>content</code>中显示<code>var</code>的值</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/MWWwNeR\" target=\"_blank\" rel=\"noopener\">Progress Bar</a></li>\n</ul>\n<h3 id=\"利用-webkit-slider-thumb定制滑块\"><a href=\"#利用-webkit-slider-thumb定制滑块\" class=\"headerlink\" title=\"利用-webkit-slider-thumb定制滑块\"></a>利用<code>-webkit-slider-thumb</code>定制滑块</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/QWWXyee\" target=\"_blank\" rel=\"noopener\">Gradient Range Slider</a></li>\n</ul>\n<h3 id=\"利用伪类校验表单\"><a href=\"#利用伪类校验表单\" class=\"headerlink\" title=\"利用伪类校验表单\"></a>利用伪类校验表单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/zYYZorR\" target=\"_blank\" rel=\"noopener\">Transparent Material Login Form</a></li>\n</ul>\n<h3 id=\"利用动画实现卡片展开\"><a href=\"#利用动画实现卡片展开\" class=\"headerlink\" title=\"利用动画实现卡片展开\"></a>利用动画实现卡片展开</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/YzzGjLL\" target=\"_blank\" rel=\"noopener\">Card Hover Expand Body</a></li>\n</ul>\n<h3 id=\"利用clip-path实现卡片多方向展开\"><a href=\"#利用clip-path实现卡片多方向展开\" class=\"headerlink\" title=\"利用clip-path实现卡片多方向展开\"></a>利用<code>clip-path</code>实现卡片多方向展开</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/ZEEBRrq\" target=\"_blank\" rel=\"noopener\">Name Card Hover Expand</a></li>\n</ul>\n<h3 id=\"利用没有perspective的transform-style-preserve-3d实现等距3D效果\"><a href=\"#利用没有perspective的transform-style-preserve-3d实现等距3D效果\" class=\"headerlink\" title=\"利用没有perspective的transform-style:preserve-3d实现等距3D效果\"></a>利用没有<code>perspective</code>的<code>transform-style:preserve-3d</code>实现等距3D效果</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/yLLrReg\" target=\"_blank\" rel=\"noopener\">3D Cube</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/oNNRxGQ\" target=\"_blank\" rel=\"noopener\">Isometric Icon Hover</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/QWWRMew\" target=\"_blank\" rel=\"noopener\">Isometric Images Hover</a></li>\n<li><a href=\"https://codepen.io/alphardex/pen/YzPKENd\" target=\"_blank\" rel=\"noopener\">Isometric Icon Nav Bar</a></li>\n</ul>\n<h3 id=\"利用3D变换实现3D下拉菜单\"><a href=\"#利用3D变换实现3D下拉菜单\" class=\"headerlink\" title=\"利用3D变换实现3D下拉菜单\"></a>利用3D变换实现3D下拉菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/rNaNyev\" target=\"_blank\" rel=\"noopener\">3D Dropdown Menu</a></li>\n</ul>\n<h3 id=\"利用动画和JS实现简单的分页栏\"><a href=\"#利用动画和JS实现简单的分页栏\" class=\"headerlink\" title=\"利用动画和JS实现简单的分页栏\"></a>利用动画和JS实现简单的分页栏</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/QWwwwpp\" target=\"_blank\" rel=\"noopener\">Pagination</a></li>\n</ul>\n<h3 id=\"利用伪元素、overflow-hidden、动画、JS实现标签页\"><a href=\"#利用伪元素、overflow-hidden、动画、JS实现标签页\" class=\"headerlink\" title=\"利用伪元素、overflow:hidden、动画、JS实现标签页\"></a>利用伪元素、<code>overflow:hidden</code>、动画、JS实现标签页</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/vYEEdGK\" target=\"_blank\" rel=\"noopener\">Tabs</a></li>\n</ul>\n<h3 id=\"利用伪元素、-checked、-兄弟选择器实现5星评分\"><a href=\"#利用伪元素、-checked、-兄弟选择器实现5星评分\" class=\"headerlink\" title=\"利用伪元素、:checked、~兄弟选择器实现5星评分\"></a>利用伪元素、<code>:checked</code>、<code>~</code>兄弟选择器实现5星评分</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/povvGNZ\" target=\"_blank\" rel=\"noopener\">Star Rating</a></li>\n</ul>\n<h3 id=\"运用伪元素、层叠关系、3D变换、JS实现翻牌时钟\"><a href=\"#运用伪元素、层叠关系、3D变换、JS实现翻牌时钟\" class=\"headerlink\" title=\"运用伪元素、层叠关系、3D变换、JS实现翻牌时钟\"></a>运用伪元素、层叠关系、3D变换、JS实现翻牌时钟</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/vYYoBNR\" target=\"_blank\" rel=\"noopener\">Flip Card Clock</a></li>\n</ul>\n<h3 id=\"利用鼠标事件监听和web-animation实现图片悬浮菜单\"><a href=\"#利用鼠标事件监听和web-animation实现图片悬浮菜单\" class=\"headerlink\" title=\"利用鼠标事件监听和web animation实现图片悬浮菜单\"></a>利用鼠标事件监听和<code>web animation</code>实现图片悬浮菜单</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/OJPmQGz\" target=\"_blank\" rel=\"noopener\">Menu Hover Image</a></li>\n</ul>\n<h3 id=\"利用conic-gradient，伪元素和CSS变量实现圆盘度量计\"><a href=\"#利用conic-gradient，伪元素和CSS变量实现圆盘度量计\" class=\"headerlink\" title=\"利用conic-gradient，伪元素和CSS变量实现圆盘度量计\"></a>利用<code>conic-gradient</code>，伪元素和CSS变量实现圆盘度量计</h3><ul>\n<li><a href=\"https://codepen.io/alphardex/pen/BaydVvQ\" target=\"_blank\" rel=\"noopener\">Gauge (No SVG)</a></li>\n</ul>\n"},{"title":"vue 3.0 响应式系统学习记录","date":"2020-01-07T01:55:48.000Z","cover":"/images/fflog.webp","_content":"#### 一、响应式系统实现过程: \n![](http://106.14.74.107/comm-img/vue3.0-1.jpg)\n#### 二、基本例子\nVue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 `packages/reactivity` 模块下调试。\n1. 在项目根目录运行 `yarn dev reactivity`，然后进入 `packages/reactivity` 目录找到产出的 `dist/reactivity.global.js` 文件。\n2. 新建一个 `index.html`，写入如下代码：\n```\n<script src=\"./dist/reactivity.global.js\"></script>\n<script>\nconst { reactive, effect } = VueObserver\n\nconst origin = {\n  count: 0\n}\nconst state = reactive(origin)\n\nconst fn = () => {\n  const count = state.count\n  console.log(`set count to ${count}`)\n}\neffect(fn)\n</script>\n```\n3. 在浏览器打开该文件，于控制台执行 `state.count++`，便可看到输出 `set count to 1`。\n\n在上述的例子中，我们使用 `reactive()` 函数把 `origin` 对象转化成了 Proxy 对象 `state`；使用 `effect()` 函数把 `fn()` 作为响应式回调。当 `state.count` 发生变化时，便触发了 `fn()`。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。\n\n#### 三、初始化阶段\n![](http://106.14.74.107/comm-img/vue3.0-2.jpg)\n在初始化阶段，主要做了两件事。\n\n1. 把 `origin` 对象转化成响应式的 Proxy 对象 `state`。\n2. 把函数 `fn()` 作为一个响应式的 effect 函数。\n\n首先我们来分析第一件事。\n\n大家都知道，Vue 3.0 使用了 Proxy 来代替之前的 `Object.defineProperty()`，改写了对象的 getter/setter，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 getter/setter 的，这个在后续的”依赖收集阶段“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 `reactive()` 函数：\n\n```\nexport function reactive(target) {\n  const observed = new Proxy(target, handler)\n  return observed\n}\n```\n\n> 完整代码在 [reactive.js](https://github.com/jrainlau/tiny-reactive/blob/master/src/reactive.js)。这里的 `handler` 就是改造 getter/setter 的关键，我们放到后文讲解。\n\n接下来我们分析第二件事。\n\n当一个普通的函数 `fn()` 被 `effect()` 包裹之后，就会变成一个响应式的 effect 函数，而 `fn()` 也会被**立即执行一次**。\n\n**由于在 `fn()` 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集。**\n\n除此之外，这个 effect 函数也会被压入一个名为”activeReactiveEffectStack“（此处为 effectStack）的栈中，供后续依赖收集的时候使用。\n\n来看看代码（完成代码请看 [effect.js](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L47-L65)）：\n\n```\nexport function effect (fn) {\n  // 构造一个 effect\n  const effect = function effect(...args) {\n    return run(effect, fn, args)\n  }\n  // 立即执行一次\n  effect()\n  return effect\n}\n\nexport function run(effect, fn, args) {\n  if (effectStack.indexOf(effect) === -1) {\n    try {\n      // 往池子里放入当前 effect\n      effectStack.push(effect)\n      // 立即执行一遍 fn()\n      // fn() 执行过程会完成依赖收集，会用到 effect\n      return fn(...args)\n    } finally {\n      // 完成依赖收集后从池子中扔掉这个 effect\n      effectStack.pop()\n    }\n  }\n}\n```\n至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。\n\n#### 四、依赖收集阶段\n![](http://106.14.74.107/comm-img/vue3.0-3.jpg)\n这个阶段的触发时机，就是在 effect 被立即执行，其内部的 `fn()` 触发了 Proxy 对象的 getter 的时候。简单来说，只要执行到类似 `state.count` 的语句，就会触发 state 的 getter。\n\n依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”targetMap\"。targetMap 是一个 WeakMap，其 key 值是~~当前的 Proxy 对象 `state`~~代理前的对象`origin`，而 value 则是该对象所对应的 depsMap。\n\ndepsMap 是一个 Map，key 值为触发 getter 时的属性值（此处为 `count`），而 value 则是**触发过该属性值**所对应的各个 effect。\n\n还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：\n\n```\nconst state = reactive({\n  count: 0,\n  age: 18\n})\n\nconst effect1 = effect(() => {\n  console.log('effect1: ' + state.count)\n})\n\nconst effect2 = effect(() => {\n  console.log('effect2: ' + state.age)\n})\n\nconst effect3 = effect(() => {\n  console.log('effect3: ' + state.count, state.age)\n})\n```\n\n那么这里的 targetMap 应该为这个样子：\n\n![](http://106.14.74.107/comm-img/vue3.0-4.jpg)\n\n\n\n这样，`{ target -> key -> dep }` 的对应关系就建立起来了，依赖收集也就完成了。[代码](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L4-L21)如下：\n\n```\nexport function track (target, operationType, key) {\n  const effect = effectStack[effectStack.length - 1]\n  if (effect) {\n    let depsMap = targetMap.get(target)\n    if (depsMap === void 0) {\n      targetMap.set(target, (depsMap = new Map()))\n    }\n\n    let dep = depsMap.get(key)\n    if (dep === void 0) {\n      depsMap.set(key, (dep = new Set()))\n    }\n\n    if (!dep.has(effect)) {\n      dep.add(effect)\n    }\n  }\n}\n```\n\n弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。\n\n#### 五、响应阶段\n\n回顾上一章节的例子，我们得到了一个 `{ count: 0, age: 18 }` 的 Proxy，并构造了三个 effect。在控制台上看看效果：\n\n![](http://106.14.74.107/comm-img/vue3.0-5.jpg)\n\n\n\n效果符合预期，那么它是怎么实现的呢？首先来看看这个阶段的原理图：\n![](http://106.14.74.107/comm-img/vue3.0-6.jpg)\n当修改对象的某个属性值的时候，会触发对应的 setter。\n\nsetter 里面的 trigger() 函数会从依赖收集表里找到当前属性对应的各个 dep，然后把它们推入到 `effects` 和 `computedEffects（计算属性）` 队列中，最后通过 `scheduleRun()` 挨个执行里面的 effect。\n\n由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了，可以看看具体的[代码实现](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L23-L45)：\n\n```\nexport function trigger (target, operationType, key) {\n  // 取得对应的 depsMap\n  const depsMap = targetMap.get(target)\n  if (depsMap === void 0) {\n    return\n  }\n  // 取得对应的各个 dep\n  const effects = new Set()\n  if (key !== void 0) {\n    const dep = depsMap.get(key)\n    dep && dep.forEach(effect => {\n      effects.add(effect)\n    })\n  }\n  // 简化版 scheduleRun，挨个执行 effect\n  effects.forEach(effect => {\n    effect()\n  })\n}\n```\n","source":"_posts/vue-3-study.md","raw":"---\ntitle: vue 3.0 响应式系统学习记录\ndate: 2020-01-07 09:55:48\ntags: \ncover: /images/fflog.webp\n---\n#### 一、响应式系统实现过程: \n![](http://106.14.74.107/comm-img/vue3.0-1.jpg)\n#### 二、基本例子\nVue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 `packages/reactivity` 模块下调试。\n1. 在项目根目录运行 `yarn dev reactivity`，然后进入 `packages/reactivity` 目录找到产出的 `dist/reactivity.global.js` 文件。\n2. 新建一个 `index.html`，写入如下代码：\n```\n<script src=\"./dist/reactivity.global.js\"></script>\n<script>\nconst { reactive, effect } = VueObserver\n\nconst origin = {\n  count: 0\n}\nconst state = reactive(origin)\n\nconst fn = () => {\n  const count = state.count\n  console.log(`set count to ${count}`)\n}\neffect(fn)\n</script>\n```\n3. 在浏览器打开该文件，于控制台执行 `state.count++`，便可看到输出 `set count to 1`。\n\n在上述的例子中，我们使用 `reactive()` 函数把 `origin` 对象转化成了 Proxy 对象 `state`；使用 `effect()` 函数把 `fn()` 作为响应式回调。当 `state.count` 发生变化时，便触发了 `fn()`。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。\n\n#### 三、初始化阶段\n![](http://106.14.74.107/comm-img/vue3.0-2.jpg)\n在初始化阶段，主要做了两件事。\n\n1. 把 `origin` 对象转化成响应式的 Proxy 对象 `state`。\n2. 把函数 `fn()` 作为一个响应式的 effect 函数。\n\n首先我们来分析第一件事。\n\n大家都知道，Vue 3.0 使用了 Proxy 来代替之前的 `Object.defineProperty()`，改写了对象的 getter/setter，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 getter/setter 的，这个在后续的”依赖收集阶段“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 `reactive()` 函数：\n\n```\nexport function reactive(target) {\n  const observed = new Proxy(target, handler)\n  return observed\n}\n```\n\n> 完整代码在 [reactive.js](https://github.com/jrainlau/tiny-reactive/blob/master/src/reactive.js)。这里的 `handler` 就是改造 getter/setter 的关键，我们放到后文讲解。\n\n接下来我们分析第二件事。\n\n当一个普通的函数 `fn()` 被 `effect()` 包裹之后，就会变成一个响应式的 effect 函数，而 `fn()` 也会被**立即执行一次**。\n\n**由于在 `fn()` 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集。**\n\n除此之外，这个 effect 函数也会被压入一个名为”activeReactiveEffectStack“（此处为 effectStack）的栈中，供后续依赖收集的时候使用。\n\n来看看代码（完成代码请看 [effect.js](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L47-L65)）：\n\n```\nexport function effect (fn) {\n  // 构造一个 effect\n  const effect = function effect(...args) {\n    return run(effect, fn, args)\n  }\n  // 立即执行一次\n  effect()\n  return effect\n}\n\nexport function run(effect, fn, args) {\n  if (effectStack.indexOf(effect) === -1) {\n    try {\n      // 往池子里放入当前 effect\n      effectStack.push(effect)\n      // 立即执行一遍 fn()\n      // fn() 执行过程会完成依赖收集，会用到 effect\n      return fn(...args)\n    } finally {\n      // 完成依赖收集后从池子中扔掉这个 effect\n      effectStack.pop()\n    }\n  }\n}\n```\n至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。\n\n#### 四、依赖收集阶段\n![](http://106.14.74.107/comm-img/vue3.0-3.jpg)\n这个阶段的触发时机，就是在 effect 被立即执行，其内部的 `fn()` 触发了 Proxy 对象的 getter 的时候。简单来说，只要执行到类似 `state.count` 的语句，就会触发 state 的 getter。\n\n依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”targetMap\"。targetMap 是一个 WeakMap，其 key 值是~~当前的 Proxy 对象 `state`~~代理前的对象`origin`，而 value 则是该对象所对应的 depsMap。\n\ndepsMap 是一个 Map，key 值为触发 getter 时的属性值（此处为 `count`），而 value 则是**触发过该属性值**所对应的各个 effect。\n\n还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：\n\n```\nconst state = reactive({\n  count: 0,\n  age: 18\n})\n\nconst effect1 = effect(() => {\n  console.log('effect1: ' + state.count)\n})\n\nconst effect2 = effect(() => {\n  console.log('effect2: ' + state.age)\n})\n\nconst effect3 = effect(() => {\n  console.log('effect3: ' + state.count, state.age)\n})\n```\n\n那么这里的 targetMap 应该为这个样子：\n\n![](http://106.14.74.107/comm-img/vue3.0-4.jpg)\n\n\n\n这样，`{ target -> key -> dep }` 的对应关系就建立起来了，依赖收集也就完成了。[代码](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L4-L21)如下：\n\n```\nexport function track (target, operationType, key) {\n  const effect = effectStack[effectStack.length - 1]\n  if (effect) {\n    let depsMap = targetMap.get(target)\n    if (depsMap === void 0) {\n      targetMap.set(target, (depsMap = new Map()))\n    }\n\n    let dep = depsMap.get(key)\n    if (dep === void 0) {\n      depsMap.set(key, (dep = new Set()))\n    }\n\n    if (!dep.has(effect)) {\n      dep.add(effect)\n    }\n  }\n}\n```\n\n弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。\n\n#### 五、响应阶段\n\n回顾上一章节的例子，我们得到了一个 `{ count: 0, age: 18 }` 的 Proxy，并构造了三个 effect。在控制台上看看效果：\n\n![](http://106.14.74.107/comm-img/vue3.0-5.jpg)\n\n\n\n效果符合预期，那么它是怎么实现的呢？首先来看看这个阶段的原理图：\n![](http://106.14.74.107/comm-img/vue3.0-6.jpg)\n当修改对象的某个属性值的时候，会触发对应的 setter。\n\nsetter 里面的 trigger() 函数会从依赖收集表里找到当前属性对应的各个 dep，然后把它们推入到 `effects` 和 `computedEffects（计算属性）` 队列中，最后通过 `scheduleRun()` 挨个执行里面的 effect。\n\n由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了，可以看看具体的[代码实现](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L23-L45)：\n\n```\nexport function trigger (target, operationType, key) {\n  // 取得对应的 depsMap\n  const depsMap = targetMap.get(target)\n  if (depsMap === void 0) {\n    return\n  }\n  // 取得对应的各个 dep\n  const effects = new Set()\n  if (key !== void 0) {\n    const dep = depsMap.get(key)\n    dep && dep.forEach(effect => {\n      effects.add(effect)\n    })\n  }\n  // 简化版 scheduleRun，挨个执行 effect\n  effects.forEach(effect => {\n    effect()\n  })\n}\n```\n","slug":"vue-3-study","published":1,"updated":"2020-01-17T07:54:23.391Z","_id":"ck5eqn2h90002yvc91d1d8hq2","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"一、响应式系统实现过程\"><a href=\"#一、响应式系统实现过程\" class=\"headerlink\" title=\"一、响应式系统实现过程:\"></a>一、响应式系统实现过程:</h4><p><img src=\"http://106.14.74.107/comm-img/vue3.0-1.jpg\" alt=\"\"></p>\n<h4 id=\"二、基本例子\"><a href=\"#二、基本例子\" class=\"headerlink\" title=\"二、基本例子\"></a>二、基本例子</h4><p>Vue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 <code>packages/reactivity</code> 模块下调试。</p>\n<ol>\n<li>在项目根目录运行 <code>yarn dev reactivity</code>，然后进入 <code>packages/reactivity</code> 目录找到产出的 <code>dist/reactivity.global.js</code> 文件。</li>\n<li>新建一个 <code>index.html</code>，写入如下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;.&#x2F;dist&#x2F;reactivity.global.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const &#123; reactive, effect &#125; &#x3D; VueObserver</span><br><span class=\"line\"></span><br><span class=\"line\">const origin &#x3D; &#123;</span><br><span class=\"line\">  count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const state &#x3D; reactive(origin)</span><br><span class=\"line\"></span><br><span class=\"line\">const fn &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const count &#x3D; state.count</span><br><span class=\"line\">  console.log(&#96;set count to $&#123;count&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">effect(fn)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>在浏览器打开该文件，于控制台执行 <code>state.count++</code>，便可看到输出 <code>set count to 1</code>。</li>\n</ol>\n<p>在上述的例子中，我们使用 <code>reactive()</code> 函数把 <code>origin</code> 对象转化成了 Proxy 对象 <code>state</code>；使用 <code>effect()</code> 函数把 <code>fn()</code> 作为响应式回调。当 <code>state.count</code> 发生变化时，便触发了 <code>fn()</code>。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。</p>\n<h4 id=\"三、初始化阶段\"><a href=\"#三、初始化阶段\" class=\"headerlink\" title=\"三、初始化阶段\"></a>三、初始化阶段</h4><p><img src=\"http://106.14.74.107/comm-img/vue3.0-2.jpg\" alt=\"\"><br>在初始化阶段，主要做了两件事。</p>\n<ol>\n<li>把 <code>origin</code> 对象转化成响应式的 Proxy 对象 <code>state</code>。</li>\n<li>把函数 <code>fn()</code> 作为一个响应式的 effect 函数。</li>\n</ol>\n<p>首先我们来分析第一件事。</p>\n<p>大家都知道，Vue 3.0 使用了 Proxy 来代替之前的 <code>Object.defineProperty()</code>，改写了对象的 getter/setter，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 getter/setter 的，这个在后续的”依赖收集阶段“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 <code>reactive()</code> 函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function reactive(target) &#123;</span><br><span class=\"line\">  const observed &#x3D; new Proxy(target, handler)</span><br><span class=\"line\">  return observed</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>完整代码在 <a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/reactive.js\" target=\"_blank\" rel=\"noopener\">reactive.js</a>。这里的 <code>handler</code> 就是改造 getter/setter 的关键，我们放到后文讲解。</p>\n</blockquote>\n<p>接下来我们分析第二件事。</p>\n<p>当一个普通的函数 <code>fn()</code> 被 <code>effect()</code> 包裹之后，就会变成一个响应式的 effect 函数，而 <code>fn()</code> 也会被<strong>立即执行一次</strong>。</p>\n<p><strong>由于在 <code>fn()</code> 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集。</strong></p>\n<p>除此之外，这个 effect 函数也会被压入一个名为”activeReactiveEffectStack“（此处为 effectStack）的栈中，供后续依赖收集的时候使用。</p>\n<p>来看看代码（完成代码请看 <a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L47-L65\" target=\"_blank\" rel=\"noopener\">effect.js</a>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function effect (fn) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 构造一个 effect</span><br><span class=\"line\">  const effect &#x3D; function effect(...args) &#123;</span><br><span class=\"line\">    return run(effect, fn, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 立即执行一次</span><br><span class=\"line\">  effect()</span><br><span class=\"line\">  return effect</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function run(effect, fn, args) &#123;</span><br><span class=\"line\">  if (effectStack.indexOf(effect) &#x3D;&#x3D;&#x3D; -1) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 往池子里放入当前 effect</span><br><span class=\"line\">      effectStack.push(effect)</span><br><span class=\"line\">      &#x2F;&#x2F; 立即执行一遍 fn()</span><br><span class=\"line\">      &#x2F;&#x2F; fn() 执行过程会完成依赖收集，会用到 effect</span><br><span class=\"line\">      return fn(...args)</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 完成依赖收集后从池子中扔掉这个 effect</span><br><span class=\"line\">      effectStack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。</p>\n<h4 id=\"四、依赖收集阶段\"><a href=\"#四、依赖收集阶段\" class=\"headerlink\" title=\"四、依赖收集阶段\"></a>四、依赖收集阶段</h4><p><img src=\"http://106.14.74.107/comm-img/vue3.0-3.jpg\" alt=\"\"><br>这个阶段的触发时机，就是在 effect 被立即执行，其内部的 <code>fn()</code> 触发了 Proxy 对象的 getter 的时候。简单来说，只要执行到类似 <code>state.count</code> 的语句，就会触发 state 的 getter。</p>\n<p>依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”targetMap”。targetMap 是一个 WeakMap，其 key 值是<del>当前的 Proxy 对象 <code>state</code></del>代理前的对象<code>origin</code>，而 value 则是该对象所对应的 depsMap。</p>\n<p>depsMap 是一个 Map，key 值为触发 getter 时的属性值（此处为 <code>count</code>），而 value 则是<strong>触发过该属性值</strong>所对应的各个 effect。</p>\n<p>还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const state &#x3D; reactive(&#123;</span><br><span class=\"line\">  count: 0,</span><br><span class=\"line\">  age: 18</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect1 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect1: &#39; + state.count)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect2 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect2: &#39; + state.age)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect3 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect3: &#39; + state.count, state.age)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>那么这里的 targetMap 应该为这个样子：</p>\n<p><img src=\"http://106.14.74.107/comm-img/vue3.0-4.jpg\" alt=\"\"></p>\n<p>这样，<code>{ target -&gt; key -&gt; dep }</code> 的对应关系就建立起来了，依赖收集也就完成了。<a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L4-L21\" target=\"_blank\" rel=\"noopener\">代码</a>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function track (target, operationType, key) &#123;</span><br><span class=\"line\">  const effect &#x3D; effectStack[effectStack.length - 1]</span><br><span class=\"line\">  if (effect) &#123;</span><br><span class=\"line\">    let depsMap &#x3D; targetMap.get(target)</span><br><span class=\"line\">    if (depsMap &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">      targetMap.set(target, (depsMap &#x3D; new Map()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    let dep &#x3D; depsMap.get(key)</span><br><span class=\"line\">    if (dep &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">      depsMap.set(key, (dep &#x3D; new Set()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!dep.has(effect)) &#123;</span><br><span class=\"line\">      dep.add(effect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。</p>\n<h4 id=\"五、响应阶段\"><a href=\"#五、响应阶段\" class=\"headerlink\" title=\"五、响应阶段\"></a>五、响应阶段</h4><p>回顾上一章节的例子，我们得到了一个 <code>{ count: 0, age: 18 }</code> 的 Proxy，并构造了三个 effect。在控制台上看看效果：</p>\n<p><img src=\"http://106.14.74.107/comm-img/vue3.0-5.jpg\" alt=\"\"></p>\n<p>效果符合预期，那么它是怎么实现的呢？首先来看看这个阶段的原理图：<br><img src=\"http://106.14.74.107/comm-img/vue3.0-6.jpg\" alt=\"\"><br>当修改对象的某个属性值的时候，会触发对应的 setter。</p>\n<p>setter 里面的 trigger() 函数会从依赖收集表里找到当前属性对应的各个 dep，然后把它们推入到 <code>effects</code> 和 <code>computedEffects（计算属性）</code> 队列中，最后通过 <code>scheduleRun()</code> 挨个执行里面的 effect。</p>\n<p>由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了，可以看看具体的<a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L23-L45\" target=\"_blank\" rel=\"noopener\">代码实现</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function trigger (target, operationType, key) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 取得对应的 depsMap</span><br><span class=\"line\">  const depsMap &#x3D; targetMap.get(target)</span><br><span class=\"line\">  if (depsMap &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 取得对应的各个 dep</span><br><span class=\"line\">  const effects &#x3D; new Set()</span><br><span class=\"line\">  if (key !&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">    const dep &#x3D; depsMap.get(key)</span><br><span class=\"line\">    dep &amp;&amp; dep.forEach(effect &#x3D;&gt; &#123;</span><br><span class=\"line\">      effects.add(effect)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 简化版 scheduleRun，挨个执行 effect</span><br><span class=\"line\">  effects.forEach(effect &#x3D;&gt; &#123;</span><br><span class=\"line\">    effect()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、响应式系统实现过程\"><a href=\"#一、响应式系统实现过程\" class=\"headerlink\" title=\"一、响应式系统实现过程:\"></a>一、响应式系统实现过程:</h4><p><img src=\"http://106.14.74.107/comm-img/vue3.0-1.jpg\" alt=\"\"></p>\n<h4 id=\"二、基本例子\"><a href=\"#二、基本例子\" class=\"headerlink\" title=\"二、基本例子\"></a>二、基本例子</h4><p>Vue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 <code>packages/reactivity</code> 模块下调试。</p>\n<ol>\n<li>在项目根目录运行 <code>yarn dev reactivity</code>，然后进入 <code>packages/reactivity</code> 目录找到产出的 <code>dist/reactivity.global.js</code> 文件。</li>\n<li>新建一个 <code>index.html</code>，写入如下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;.&#x2F;dist&#x2F;reactivity.global.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const &#123; reactive, effect &#125; &#x3D; VueObserver</span><br><span class=\"line\"></span><br><span class=\"line\">const origin &#x3D; &#123;</span><br><span class=\"line\">  count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const state &#x3D; reactive(origin)</span><br><span class=\"line\"></span><br><span class=\"line\">const fn &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const count &#x3D; state.count</span><br><span class=\"line\">  console.log(&#96;set count to $&#123;count&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">effect(fn)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>在浏览器打开该文件，于控制台执行 <code>state.count++</code>，便可看到输出 <code>set count to 1</code>。</li>\n</ol>\n<p>在上述的例子中，我们使用 <code>reactive()</code> 函数把 <code>origin</code> 对象转化成了 Proxy 对象 <code>state</code>；使用 <code>effect()</code> 函数把 <code>fn()</code> 作为响应式回调。当 <code>state.count</code> 发生变化时，便触发了 <code>fn()</code>。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。</p>\n<h4 id=\"三、初始化阶段\"><a href=\"#三、初始化阶段\" class=\"headerlink\" title=\"三、初始化阶段\"></a>三、初始化阶段</h4><p><img src=\"http://106.14.74.107/comm-img/vue3.0-2.jpg\" alt=\"\"><br>在初始化阶段，主要做了两件事。</p>\n<ol>\n<li>把 <code>origin</code> 对象转化成响应式的 Proxy 对象 <code>state</code>。</li>\n<li>把函数 <code>fn()</code> 作为一个响应式的 effect 函数。</li>\n</ol>\n<p>首先我们来分析第一件事。</p>\n<p>大家都知道，Vue 3.0 使用了 Proxy 来代替之前的 <code>Object.defineProperty()</code>，改写了对象的 getter/setter，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 getter/setter 的，这个在后续的”依赖收集阶段“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 <code>reactive()</code> 函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function reactive(target) &#123;</span><br><span class=\"line\">  const observed &#x3D; new Proxy(target, handler)</span><br><span class=\"line\">  return observed</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>完整代码在 <a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/reactive.js\" target=\"_blank\" rel=\"noopener\">reactive.js</a>。这里的 <code>handler</code> 就是改造 getter/setter 的关键，我们放到后文讲解。</p>\n</blockquote>\n<p>接下来我们分析第二件事。</p>\n<p>当一个普通的函数 <code>fn()</code> 被 <code>effect()</code> 包裹之后，就会变成一个响应式的 effect 函数，而 <code>fn()</code> 也会被<strong>立即执行一次</strong>。</p>\n<p><strong>由于在 <code>fn()</code> 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集。</strong></p>\n<p>除此之外，这个 effect 函数也会被压入一个名为”activeReactiveEffectStack“（此处为 effectStack）的栈中，供后续依赖收集的时候使用。</p>\n<p>来看看代码（完成代码请看 <a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L47-L65\" target=\"_blank\" rel=\"noopener\">effect.js</a>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function effect (fn) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 构造一个 effect</span><br><span class=\"line\">  const effect &#x3D; function effect(...args) &#123;</span><br><span class=\"line\">    return run(effect, fn, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 立即执行一次</span><br><span class=\"line\">  effect()</span><br><span class=\"line\">  return effect</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function run(effect, fn, args) &#123;</span><br><span class=\"line\">  if (effectStack.indexOf(effect) &#x3D;&#x3D;&#x3D; -1) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 往池子里放入当前 effect</span><br><span class=\"line\">      effectStack.push(effect)</span><br><span class=\"line\">      &#x2F;&#x2F; 立即执行一遍 fn()</span><br><span class=\"line\">      &#x2F;&#x2F; fn() 执行过程会完成依赖收集，会用到 effect</span><br><span class=\"line\">      return fn(...args)</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 完成依赖收集后从池子中扔掉这个 effect</span><br><span class=\"line\">      effectStack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。</p>\n<h4 id=\"四、依赖收集阶段\"><a href=\"#四、依赖收集阶段\" class=\"headerlink\" title=\"四、依赖收集阶段\"></a>四、依赖收集阶段</h4><p><img src=\"http://106.14.74.107/comm-img/vue3.0-3.jpg\" alt=\"\"><br>这个阶段的触发时机，就是在 effect 被立即执行，其内部的 <code>fn()</code> 触发了 Proxy 对象的 getter 的时候。简单来说，只要执行到类似 <code>state.count</code> 的语句，就会触发 state 的 getter。</p>\n<p>依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”targetMap”。targetMap 是一个 WeakMap，其 key 值是<del>当前的 Proxy 对象 <code>state</code></del>代理前的对象<code>origin</code>，而 value 则是该对象所对应的 depsMap。</p>\n<p>depsMap 是一个 Map，key 值为触发 getter 时的属性值（此处为 <code>count</code>），而 value 则是<strong>触发过该属性值</strong>所对应的各个 effect。</p>\n<p>还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const state &#x3D; reactive(&#123;</span><br><span class=\"line\">  count: 0,</span><br><span class=\"line\">  age: 18</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect1 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect1: &#39; + state.count)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect2 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect2: &#39; + state.age)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect3 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect3: &#39; + state.count, state.age)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>那么这里的 targetMap 应该为这个样子：</p>\n<p><img src=\"http://106.14.74.107/comm-img/vue3.0-4.jpg\" alt=\"\"></p>\n<p>这样，<code>{ target -&gt; key -&gt; dep }</code> 的对应关系就建立起来了，依赖收集也就完成了。<a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L4-L21\" target=\"_blank\" rel=\"noopener\">代码</a>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function track (target, operationType, key) &#123;</span><br><span class=\"line\">  const effect &#x3D; effectStack[effectStack.length - 1]</span><br><span class=\"line\">  if (effect) &#123;</span><br><span class=\"line\">    let depsMap &#x3D; targetMap.get(target)</span><br><span class=\"line\">    if (depsMap &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">      targetMap.set(target, (depsMap &#x3D; new Map()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    let dep &#x3D; depsMap.get(key)</span><br><span class=\"line\">    if (dep &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">      depsMap.set(key, (dep &#x3D; new Set()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!dep.has(effect)) &#123;</span><br><span class=\"line\">      dep.add(effect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。</p>\n<h4 id=\"五、响应阶段\"><a href=\"#五、响应阶段\" class=\"headerlink\" title=\"五、响应阶段\"></a>五、响应阶段</h4><p>回顾上一章节的例子，我们得到了一个 <code>{ count: 0, age: 18 }</code> 的 Proxy，并构造了三个 effect。在控制台上看看效果：</p>\n<p><img src=\"http://106.14.74.107/comm-img/vue3.0-5.jpg\" alt=\"\"></p>\n<p>效果符合预期，那么它是怎么实现的呢？首先来看看这个阶段的原理图：<br><img src=\"http://106.14.74.107/comm-img/vue3.0-6.jpg\" alt=\"\"><br>当修改对象的某个属性值的时候，会触发对应的 setter。</p>\n<p>setter 里面的 trigger() 函数会从依赖收集表里找到当前属性对应的各个 dep，然后把它们推入到 <code>effects</code> 和 <code>computedEffects（计算属性）</code> 队列中，最后通过 <code>scheduleRun()</code> 挨个执行里面的 effect。</p>\n<p>由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了，可以看看具体的<a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L23-L45\" target=\"_blank\" rel=\"noopener\">代码实现</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function trigger (target, operationType, key) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 取得对应的 depsMap</span><br><span class=\"line\">  const depsMap &#x3D; targetMap.get(target)</span><br><span class=\"line\">  if (depsMap &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 取得对应的各个 dep</span><br><span class=\"line\">  const effects &#x3D; new Set()</span><br><span class=\"line\">  if (key !&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">    const dep &#x3D; depsMap.get(key)</span><br><span class=\"line\">    dep &amp;&amp; dep.forEach(effect &#x3D;&gt; &#123;</span><br><span class=\"line\">      effects.add(effect)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 简化版 scheduleRun，挨个执行 effect</span><br><span class=\"line\">  effects.forEach(effect &#x3D;&gt; &#123;</span><br><span class=\"line\">    effect()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"常用rules校验规则","date":"2020-01-09T06:23:41.000Z","cover":"/images/article_bg_03.webp","_content":"### 1、是否合法IP地址\n\n```\nexport function validateIP(rule, value,callback) {\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else {\n    const reg = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\\n![](https://user-gold-cdn.xitu.io/2019/11/22/16e9182103044230?w=900&h=500&f=gif&s=662884).(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/;\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的IP地址'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 2、是否手机号码或者固话\n\n```\nexport function validatePhoneTwo(rule, value, callback) {\n  const reg = /^((0\\d{2,3}-\\d{7,8})|(1[34578]\\d{9}))$/;;\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的电话号码或者固话号码'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 3、是否固话\n\n```\nexport function validateTelphone(rule, value,callback) {\n  const reg =/0\\d{2,3}-\\d{7,8}/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else {\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的固定电话）'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 4、是否手机号码\n\n```\nexport function validatePhone(rule, value,callback) {\n  const reg =/^[1][3-9][0-9]{9}$/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else {\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的电话号码'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 5、是否身份证号码\n\n```\nexport function validateIdNo(rule, value,callback) {\n  const reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else {\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的身份证号码'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 6、是否邮箱\n\n```\nexport function validateEMail(rule, value,callback) {\n  const reg =/^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else{\n    if (!reg.test(value)){\n      callback(new Error('请输入正确的邮箱'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 7、合法url\n\n```\nexport function validateURL(url) {\n  const urlregex = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/;\n  return urlregex.test(url);\n}\n```\n\n### 8、验证内容是否包含英文数字以及下划线\n\n```\nexport function isPassword(rule, value, callback) {\n  const reg =/^[_a-zA-Z0-9]+$/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  } else {\n    if (!reg.test(value)){\n      callback(new Error('仅由英文字母，数字以及下划线组成'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 9、自动检验数值的范围\n\n```\nexport function checkMax20000(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else if (!Number(value)) {\n    callback(new Error('请输入[1,20000]之间的数字'));\n  } else if (value < 1 || value > 20000) {\n    callback(new Error('请输入[1,20000]之间的数字'));\n  } else {\n    callback();\n  }\n}\n```\n\n### 10、验证数字输入框最大数值\n\n```\nexport function checkMaxVal(rule, value,callback) {\n  if (value < 0 || value > 最大值) {\n    callback(new Error('请输入[0,最大值]之间的数字'));\n  } else {\n    callback();\n  }\n}\n```\n\n### 11、验证是否1-99之间\n\n```\nexport function isOneToNinetyNine(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      const re = /^[1-9][0-9]{0,1}$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入正整数，值为【1,99】'));\n      } else {\n        callback();\n      }\n    }\n  }, 0);\n}\n```\n\n### 12、验证是否整数\n\n```\nexport function isInteger(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      const re = /^[0-9]*[1-9][0-9]*$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入正整数'));\n      } else {\n        callback();\n      }\n    }\n  }, 0);\n}\n```\n\n### 13、验证是否整数,非必填\n\n```\nexport function isIntegerNotMust(rule, value, callback) {\n  if (!value) {\n    callback();\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      const re = /^[0-9]*[1-9][0-9]*$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入正整数'));\n      } else {\n        callback();\n      }\n    }\n  }, 1000);\n}\n```\n\n### 14、 验证是否是[0-1]的小数\n\n```\nexport function isDecimal(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入[0,1]之间的数字'));\n    } else {\n      if (value < 0 || value > 1) {\n        callback(new Error('请输入[0,1]之间的数字'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 15、 验证是否是[1-10]的小数,即不可以等于0\n\n```\nexport function isBtnOneToTen(rule, value, callback) {\n  if (typeof value == 'undefined') {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数，值为[1,10]'));\n    } else {\n      if (!(value == '1' || value == '2' || value == '3' || value == '4' || value == '5' || value == '6' || value == '7' || value == '8' || value == '9' || value == '10')) {\n        callback(new Error('请输入正整数，值为[1,10]'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 16、验证是否是[1-100]的小数,即不可以等于0\n\n```\nexport function isBtnOneToHundred(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入整数，值为[1,100]'));\n    } else {\n      if (value < 1 || value > 100) {\n        callback(new Error('请输入整数，值为[1,100]'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 17、验证是否是[0-100]的小数\n\n```\nexport function isBtnZeroToHundred(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入[1,100]之间的数字'));\n    } else {\n      if (value < 0 || value > 100) {\n        callback(new Error('请输入[1,100]之间的数字'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 18、验证端口是否在[0,65535]之间\n\n```\nexport function isPort(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (value == '' || typeof(value) == undefined) {\n      callback(new Error('请输入端口值'));\n    } else {\n      const re = /^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入在[0-65535]之间的端口值'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填\n\n```\nexport function isCheckPort(rule, value, callback) {\n  if (!value) {\n    callback();\n  }\n  setTimeout(() => {\n    if (value == '' || typeof(value) == undefined) {\n      //callback(new Error('请输入端口值'));\n    } else {\n      const re = /^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入在[0-65535]之间的端口值'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 20、小写字母\n\n```\nexport function validateLowerCase(val) {\n  const reg = /^[a-z]+$/;\n  return reg.test(val);\n}\n```\n\n### 22、两位小数验证\n\n```\nconst validateValidity = (rule, value, callback) => {\n  if (!/(^[1-9]([0-9]+)?(\\.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9]\\.[0-9]([0-9])?$)/.test(value)) {\n    callback(new Error('最多两位小数！！！'));\n  } else {\n    callback();\n  }\n};\n```\n\n### 23、是否大写字母\n\n```\nexport function validateUpperCase(val) {\n  const reg = /^[A-Z]+$/;\n  return reg.test(val);\n}\n```\n\n### 24、是否大小写字母\n\n```\nexport function validatAlphabets(val) {\n  const reg = /^[A-Za-z]+$/;\n  return reg.test(val);\n}\n```\n\n### 25、密码校验\n\n```\nexport const validatePsdReg = (rule, value, callback) => {\n  if (!value) {\n    return callback(new Error('请输入密码'))\n  }\n  if (!/^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$)([^\\u4e00-\\u9fa5\\s]){6,20}$/.test(value)) {\n    callback(new Error('请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种'))\n  } else {\n    callback()\n  }\n}\n```\n\n### 26、中文校验\n\n```\nexport const validateContacts = (rule, value, callback) => {\n  if (!value) {\n    return callback(new Error('请输入中文'))\n  }\n  if (!/^[\\u0391-\\uFFE5A-Za-z]+$/.test(value)) {\n    callback(new Error('不可输入特殊字符'))\n  } else {\n    callback()\n  }\n}\n```\n\n### 27、 账号校验\n\n```\nexport const validateCode = (rule, value, callback) => {\n  if (!value) {\n    return callback(new Error('请输入账号'))\n  }\n  if (!/^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]{6,20}$/.test(value)) {\n    callback(new Error('账号必须为6-20位字母和数字组合'))\n  } else {\n    callback()\n  }\n}\n```\n\n### 28 、纯数字校验\n\n```\nexport const validateNumber = (rule, value, callback) => {\n    let numberReg = /^\\d+$|^\\d+[.]?\\d+$/\n    if (value !== '') {\n        if (!numberReg.test(value)) {\n            callback(new Error('请输入数字'))\n        } else {\n            callback()\n        }\n    } else {\n        callback(new Error('请输入值'))\n    }\n}\n```\n\n### 29、最多一位小数\n\n```\nconst onePoint = (rule, value, callback) => {\n  if (!/^[0-9]+([.]{1}[0-9]{1})?$/.test(value)) {\n    callback(new Error('最多一位小数！！！'));\n  } else {\n    callback();\n  }\n};\n```\n\n\n","source":"_posts/check-rule.md","raw":"---\ntitle: 常用rules校验规则\ndate: 2020-01-09 14:23:41\ncover: /images/article_bg_03.webp\n---\n### 1、是否合法IP地址\n\n```\nexport function validateIP(rule, value,callback) {\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else {\n    const reg = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\\n![](https://user-gold-cdn.xitu.io/2019/11/22/16e9182103044230?w=900&h=500&f=gif&s=662884).(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/;\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的IP地址'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 2、是否手机号码或者固话\n\n```\nexport function validatePhoneTwo(rule, value, callback) {\n  const reg = /^((0\\d{2,3}-\\d{7,8})|(1[34578]\\d{9}))$/;;\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else {\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的电话号码或者固话号码'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 3、是否固话\n\n```\nexport function validateTelphone(rule, value,callback) {\n  const reg =/0\\d{2,3}-\\d{7,8}/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else {\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的固定电话）'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 4、是否手机号码\n\n```\nexport function validatePhone(rule, value,callback) {\n  const reg =/^[1][3-9][0-9]{9}$/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else {\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的电话号码'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 5、是否身份证号码\n\n```\nexport function validateIdNo(rule, value,callback) {\n  const reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else {\n    if ((!reg.test(value)) && value != '') {\n      callback(new Error('请输入正确的身份证号码'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 6、是否邮箱\n\n```\nexport function validateEMail(rule, value,callback) {\n  const reg =/^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  }else{\n    if (!reg.test(value)){\n      callback(new Error('请输入正确的邮箱'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 7、合法url\n\n```\nexport function validateURL(url) {\n  const urlregex = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/;\n  return urlregex.test(url);\n}\n```\n\n### 8、验证内容是否包含英文数字以及下划线\n\n```\nexport function isPassword(rule, value, callback) {\n  const reg =/^[_a-zA-Z0-9]+$/;\n  if(value==''||value==undefined||value==null){\n    callback();\n  } else {\n    if (!reg.test(value)){\n      callback(new Error('仅由英文字母，数字以及下划线组成'));\n    } else {\n      callback();\n    }\n  }\n}\n```\n\n### 9、自动检验数值的范围\n\n```\nexport function checkMax20000(rule, value, callback) {\n  if (value == '' || value == undefined || value == null) {\n    callback();\n  } else if (!Number(value)) {\n    callback(new Error('请输入[1,20000]之间的数字'));\n  } else if (value < 1 || value > 20000) {\n    callback(new Error('请输入[1,20000]之间的数字'));\n  } else {\n    callback();\n  }\n}\n```\n\n### 10、验证数字输入框最大数值\n\n```\nexport function checkMaxVal(rule, value,callback) {\n  if (value < 0 || value > 最大值) {\n    callback(new Error('请输入[0,最大值]之间的数字'));\n  } else {\n    callback();\n  }\n}\n```\n\n### 11、验证是否1-99之间\n\n```\nexport function isOneToNinetyNine(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      const re = /^[1-9][0-9]{0,1}$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入正整数，值为【1,99】'));\n      } else {\n        callback();\n      }\n    }\n  }, 0);\n}\n```\n\n### 12、验证是否整数\n\n```\nexport function isInteger(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      const re = /^[0-9]*[1-9][0-9]*$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入正整数'));\n      } else {\n        callback();\n      }\n    }\n  }, 0);\n}\n```\n\n### 13、验证是否整数,非必填\n\n```\nexport function isIntegerNotMust(rule, value, callback) {\n  if (!value) {\n    callback();\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数'));\n    } else {\n      const re = /^[0-9]*[1-9][0-9]*$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入正整数'));\n      } else {\n        callback();\n      }\n    }\n  }, 1000);\n}\n```\n\n### 14、 验证是否是[0-1]的小数\n\n```\nexport function isDecimal(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入[0,1]之间的数字'));\n    } else {\n      if (value < 0 || value > 1) {\n        callback(new Error('请输入[0,1]之间的数字'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 15、 验证是否是[1-10]的小数,即不可以等于0\n\n```\nexport function isBtnOneToTen(rule, value, callback) {\n  if (typeof value == 'undefined') {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入正整数，值为[1,10]'));\n    } else {\n      if (!(value == '1' || value == '2' || value == '3' || value == '4' || value == '5' || value == '6' || value == '7' || value == '8' || value == '9' || value == '10')) {\n        callback(new Error('请输入正整数，值为[1,10]'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 16、验证是否是[1-100]的小数,即不可以等于0\n\n```\nexport function isBtnOneToHundred(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入整数，值为[1,100]'));\n    } else {\n      if (value < 1 || value > 100) {\n        callback(new Error('请输入整数，值为[1,100]'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 17、验证是否是[0-100]的小数\n\n```\nexport function isBtnZeroToHundred(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (!Number(value)) {\n      callback(new Error('请输入[1,100]之间的数字'));\n    } else {\n      if (value < 0 || value > 100) {\n        callback(new Error('请输入[1,100]之间的数字'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 18、验证端口是否在[0,65535]之间\n\n```\nexport function isPort(rule, value, callback) {\n  if (!value) {\n    return callback(new Error('输入不可以为空'));\n  }\n  setTimeout(() => {\n    if (value == '' || typeof(value) == undefined) {\n      callback(new Error('请输入端口值'));\n    } else {\n      const re = /^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入在[0-65535]之间的端口值'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填\n\n```\nexport function isCheckPort(rule, value, callback) {\n  if (!value) {\n    callback();\n  }\n  setTimeout(() => {\n    if (value == '' || typeof(value) == undefined) {\n      //callback(new Error('请输入端口值'));\n    } else {\n      const re = /^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/;\n      const rsCheck = re.test(value);\n      if (!rsCheck) {\n        callback(new Error('请输入在[0-65535]之间的端口值'));\n      } else {\n        callback();\n      }\n    }\n  }, 100);\n}\n```\n\n### 20、小写字母\n\n```\nexport function validateLowerCase(val) {\n  const reg = /^[a-z]+$/;\n  return reg.test(val);\n}\n```\n\n### 22、两位小数验证\n\n```\nconst validateValidity = (rule, value, callback) => {\n  if (!/(^[1-9]([0-9]+)?(\\.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9]\\.[0-9]([0-9])?$)/.test(value)) {\n    callback(new Error('最多两位小数！！！'));\n  } else {\n    callback();\n  }\n};\n```\n\n### 23、是否大写字母\n\n```\nexport function validateUpperCase(val) {\n  const reg = /^[A-Z]+$/;\n  return reg.test(val);\n}\n```\n\n### 24、是否大小写字母\n\n```\nexport function validatAlphabets(val) {\n  const reg = /^[A-Za-z]+$/;\n  return reg.test(val);\n}\n```\n\n### 25、密码校验\n\n```\nexport const validatePsdReg = (rule, value, callback) => {\n  if (!value) {\n    return callback(new Error('请输入密码'))\n  }\n  if (!/^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$)([^\\u4e00-\\u9fa5\\s]){6,20}$/.test(value)) {\n    callback(new Error('请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种'))\n  } else {\n    callback()\n  }\n}\n```\n\n### 26、中文校验\n\n```\nexport const validateContacts = (rule, value, callback) => {\n  if (!value) {\n    return callback(new Error('请输入中文'))\n  }\n  if (!/^[\\u0391-\\uFFE5A-Za-z]+$/.test(value)) {\n    callback(new Error('不可输入特殊字符'))\n  } else {\n    callback()\n  }\n}\n```\n\n### 27、 账号校验\n\n```\nexport const validateCode = (rule, value, callback) => {\n  if (!value) {\n    return callback(new Error('请输入账号'))\n  }\n  if (!/^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]{6,20}$/.test(value)) {\n    callback(new Error('账号必须为6-20位字母和数字组合'))\n  } else {\n    callback()\n  }\n}\n```\n\n### 28 、纯数字校验\n\n```\nexport const validateNumber = (rule, value, callback) => {\n    let numberReg = /^\\d+$|^\\d+[.]?\\d+$/\n    if (value !== '') {\n        if (!numberReg.test(value)) {\n            callback(new Error('请输入数字'))\n        } else {\n            callback()\n        }\n    } else {\n        callback(new Error('请输入值'))\n    }\n}\n```\n\n### 29、最多一位小数\n\n```\nconst onePoint = (rule, value, callback) => {\n  if (!/^[0-9]+([.]{1}[0-9]{1})?$/.test(value)) {\n    callback(new Error('最多一位小数！！！'));\n  } else {\n    callback();\n  }\n};\n```\n\n\n","slug":"check-rule","published":1,"updated":"2020-01-15T08:40:54.075Z","_id":"ck5eqn2hf0003yvc96sgqeslv","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、是否合法IP地址\"><a href=\"#1、是否合法IP地址\" class=\"headerlink\" title=\"1、是否合法IP地址\"></a>1、是否合法IP地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateIP(rule, value,callback) &#123;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">    const reg &#x3D; &#x2F;^(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\</span><br><span class=\"line\">![](https:&#x2F;&#x2F;user-gold-cdn.xitu.io&#x2F;2019&#x2F;11&#x2F;22&#x2F;16e9182103044230?w&#x3D;900&amp;h&#x3D;500&amp;f&#x3D;gif&amp;s&#x3D;662884).(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])$&#x2F;;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的IP地址&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、是否手机号码或者固话\"><a href=\"#2、是否手机号码或者固话\" class=\"headerlink\" title=\"2、是否手机号码或者固话\"></a>2、是否手机号码或者固话</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validatePhoneTwo(rule, value, callback) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;^((0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;)|(1[34578]\\d&#123;9&#125;))$&#x2F;;;</span><br><span class=\"line\">  if (value &#x3D;&#x3D; &#39;&#39; || value &#x3D;&#x3D; undefined || value &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的电话号码或者固话号码&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、是否固话\"><a href=\"#3、是否固话\" class=\"headerlink\" title=\"3、是否固话\"></a>3、是否固话</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateTelphone(rule, value,callback) &#123;</span><br><span class=\"line\">  const reg &#x3D;&#x2F;0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的固定电话）&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、是否手机号码\"><a href=\"#4、是否手机号码\" class=\"headerlink\" title=\"4、是否手机号码\"></a>4、是否手机号码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validatePhone(rule, value,callback) &#123;</span><br><span class=\"line\">  const reg &#x3D;&#x2F;^[1][3-9][0-9]&#123;9&#125;$&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的电话号码&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、是否身份证号码\"><a href=\"#5、是否身份证号码\" class=\"headerlink\" title=\"5、是否身份证号码\"></a>5、是否身份证号码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateIdNo(rule, value,callback) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的身份证号码&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、是否邮箱\"><a href=\"#6、是否邮箱\" class=\"headerlink\" title=\"6、是否邮箱\"></a>6、是否邮箱</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateEMail(rule, value,callback) &#123;</span><br><span class=\"line\">  const reg &#x3D;&#x2F;^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    if (!reg.test(value))&#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的邮箱&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、合法url\"><a href=\"#7、合法url\" class=\"headerlink\" title=\"7、合法url\"></a>7、合法url</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateURL(url) &#123;</span><br><span class=\"line\">  const urlregex &#x3D; &#x2F;^(https?|ftp):\\&#x2F;\\&#x2F;([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\\&#x2F;($|[a-zA-Z0-9.,?&#39;\\\\+&amp;%$#&#x3D;~_-]+))*$&#x2F;;</span><br><span class=\"line\">  return urlregex.test(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、验证内容是否包含英文数字以及下划线\"><a href=\"#8、验证内容是否包含英文数字以及下划线\" class=\"headerlink\" title=\"8、验证内容是否包含英文数字以及下划线\"></a>8、验证内容是否包含英文数字以及下划线</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isPassword(rule, value, callback) &#123;</span><br><span class=\"line\">  const reg &#x3D;&#x2F;^[_a-zA-Z0-9]+$&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if (!reg.test(value))&#123;</span><br><span class=\"line\">      callback(new Error(&#39;仅由英文字母，数字以及下划线组成&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、自动检验数值的范围\"><a href=\"#9、自动检验数值的范围\" class=\"headerlink\" title=\"9、自动检验数值的范围\"></a>9、自动检验数值的范围</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function checkMax20000(rule, value, callback) &#123;</span><br><span class=\"line\">  if (value &#x3D;&#x3D; &#39;&#39; || value &#x3D;&#x3D; undefined || value &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125; else if (!Number(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;请输入[1,20000]之间的数字&#39;));</span><br><span class=\"line\">  &#125; else if (value &lt; 1 || value &gt; 20000) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;请输入[1,20000]之间的数字&#39;));</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、验证数字输入框最大数值\"><a href=\"#10、验证数字输入框最大数值\" class=\"headerlink\" title=\"10、验证数字输入框最大数值\"></a>10、验证数字输入框最大数值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function checkMaxVal(rule, value,callback) &#123;</span><br><span class=\"line\">  if (value &lt; 0 || value &gt; 最大值) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;请输入[0,最大值]之间的数字&#39;));</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、验证是否1-99之间\"><a href=\"#11、验证是否1-99之间\" class=\"headerlink\" title=\"11、验证是否1-99之间\"></a>11、验证是否1-99之间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isOneToNinetyNine(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^[1-9][0-9]&#123;0,1&#125;$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入正整数，值为【1,99】&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、验证是否整数\"><a href=\"#12、验证是否整数\" class=\"headerlink\" title=\"12、验证是否整数\"></a>12、验证是否整数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isInteger(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^[0-9]*[1-9][0-9]*$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、验证是否整数-非必填\"><a href=\"#13、验证是否整数-非必填\" class=\"headerlink\" title=\"13、验证是否整数,非必填\"></a>13、验证是否整数,非必填</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isIntegerNotMust(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^[0-9]*[1-9][0-9]*$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 1000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、-验证是否是-0-1-的小数\"><a href=\"#14、-验证是否是-0-1-的小数\" class=\"headerlink\" title=\"14、 验证是否是[0-1]的小数\"></a>14、 验证是否是[0-1]的小数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isDecimal(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入[0,1]之间的数字&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (value &lt; 0 || value &gt; 1) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入[0,1]之间的数字&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、-验证是否是-1-10-的小数-即不可以等于0\"><a href=\"#15、-验证是否是-1-10-的小数-即不可以等于0\" class=\"headerlink\" title=\"15、 验证是否是[1-10]的小数,即不可以等于0\"></a>15、 验证是否是[1-10]的小数,即不可以等于0</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isBtnOneToTen(rule, value, callback) &#123;</span><br><span class=\"line\">  if (typeof value &#x3D;&#x3D; &#39;undefined&#39;) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正整数，值为[1,10]&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (!(value &#x3D;&#x3D; &#39;1&#39; || value &#x3D;&#x3D; &#39;2&#39; || value &#x3D;&#x3D; &#39;3&#39; || value &#x3D;&#x3D; &#39;4&#39; || value &#x3D;&#x3D; &#39;5&#39; || value &#x3D;&#x3D; &#39;6&#39; || value &#x3D;&#x3D; &#39;7&#39; || value &#x3D;&#x3D; &#39;8&#39; || value &#x3D;&#x3D; &#39;9&#39; || value &#x3D;&#x3D; &#39;10&#39;)) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入正整数，值为[1,10]&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、验证是否是-1-100-的小数-即不可以等于0\"><a href=\"#16、验证是否是-1-100-的小数-即不可以等于0\" class=\"headerlink\" title=\"16、验证是否是[1-100]的小数,即不可以等于0\"></a>16、验证是否是[1-100]的小数,即不可以等于0</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isBtnOneToHundred(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入整数，值为[1,100]&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (value &lt; 1 || value &gt; 100) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入整数，值为[1,100]&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、验证是否是-0-100-的小数\"><a href=\"#17、验证是否是-0-100-的小数\" class=\"headerlink\" title=\"17、验证是否是[0-100]的小数\"></a>17、验证是否是[0-100]的小数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isBtnZeroToHundred(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入[1,100]之间的数字&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (value &lt; 0 || value &gt; 100) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入[1,100]之间的数字&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、验证端口是否在-0-65535-之间\"><a href=\"#18、验证端口是否在-0-65535-之间\" class=\"headerlink\" title=\"18、验证端口是否在[0,65535]之间\"></a>18、验证端口是否在[0,65535]之间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isPort(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (value &#x3D;&#x3D; &#39;&#39; || typeof(value) &#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入端口值&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^([0-9]|[1-9]\\d|[1-9]\\d&#123;2&#125;|[1-9]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|6[0-4]\\d&#123;3&#125;|65[0-4]\\d&#123;2&#125;|655[0-2]\\d|6553[0-5])$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入在[0-65535]之间的端口值&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、验证端口是否在-0-65535-之间，非必填-isMust表示是否必填\"><a href=\"#19、验证端口是否在-0-65535-之间，非必填-isMust表示是否必填\" class=\"headerlink\" title=\"19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填\"></a>19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isCheckPort(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (value &#x3D;&#x3D; &#39;&#39; || typeof(value) &#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F;callback(new Error(&#39;请输入端口值&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^([0-9]|[1-9]\\d|[1-9]\\d&#123;2&#125;|[1-9]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|6[0-4]\\d&#123;3&#125;|65[0-4]\\d&#123;2&#125;|655[0-2]\\d|6553[0-5])$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入在[0-65535]之间的端口值&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、小写字母\"><a href=\"#20、小写字母\" class=\"headerlink\" title=\"20、小写字母\"></a>20、小写字母</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateLowerCase(val) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;^[a-z]+$&#x2F;;</span><br><span class=\"line\">  return reg.test(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、两位小数验证\"><a href=\"#22、两位小数验证\" class=\"headerlink\" title=\"22、两位小数验证\"></a>22、两位小数验证</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const validateValidity &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!&#x2F;(^[1-9]([0-9]+)?(\\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\\.[0-9]([0-9])?$)&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;最多两位小数！！！&#39;));</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、是否大写字母\"><a href=\"#23、是否大写字母\" class=\"headerlink\" title=\"23、是否大写字母\"></a>23、是否大写字母</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateUpperCase(val) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;^[A-Z]+$&#x2F;;</span><br><span class=\"line\">  return reg.test(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、是否大小写字母\"><a href=\"#24、是否大小写字母\" class=\"headerlink\" title=\"24、是否大小写字母\"></a>24、是否大小写字母</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validatAlphabets(val) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;^[A-Za-z]+$&#x2F;;</span><br><span class=\"line\">  return reg.test(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25、密码校验\"><a href=\"#25、密码校验\" class=\"headerlink\" title=\"25、密码校验\"></a>25、密码校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const validatePsdReg &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;请输入密码&#39;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!&#x2F;^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$)([^\\u4e00-\\u9fa5\\s])&#123;6,20&#125;$&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种&#39;))</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26、中文校验\"><a href=\"#26、中文校验\" class=\"headerlink\" title=\"26、中文校验\"></a>26、中文校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const validateContacts &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;请输入中文&#39;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!&#x2F;^[\\u0391-\\uFFE5A-Za-z]+$&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;不可输入特殊字符&#39;))</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27、-账号校验\"><a href=\"#27、-账号校验\" class=\"headerlink\" title=\"27、 账号校验\"></a>27、 账号校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const validateCode &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;请输入账号&#39;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!&#x2F;^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]&#123;6,20&#125;$&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;账号必须为6-20位字母和数字组合&#39;))</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28-、纯数字校验\"><a href=\"#28-、纯数字校验\" class=\"headerlink\" title=\"28 、纯数字校验\"></a>28 、纯数字校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const validateNumber &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let numberReg &#x3D; &#x2F;^\\d+$|^\\d+[.]?\\d+$&#x2F;</span><br><span class=\"line\">    if (value !&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">        if (!numberReg.test(value)) &#123;</span><br><span class=\"line\">            callback(new Error(&#39;请输入数字&#39;))</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            callback()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入值&#39;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29、最多一位小数\"><a href=\"#29、最多一位小数\" class=\"headerlink\" title=\"29、最多一位小数\"></a>29、最多一位小数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const onePoint &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!&#x2F;^[0-9]+([.]&#123;1&#125;[0-9]&#123;1&#125;)?$&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;最多一位小数！！！&#39;));</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、是否合法IP地址\"><a href=\"#1、是否合法IP地址\" class=\"headerlink\" title=\"1、是否合法IP地址\"></a>1、是否合法IP地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateIP(rule, value,callback) &#123;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">    const reg &#x3D; &#x2F;^(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\</span><br><span class=\"line\">![](https:&#x2F;&#x2F;user-gold-cdn.xitu.io&#x2F;2019&#x2F;11&#x2F;22&#x2F;16e9182103044230?w&#x3D;900&amp;h&#x3D;500&amp;f&#x3D;gif&amp;s&#x3D;662884).(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d&#123;1,2&#125;|1\\d\\d|2[0-4]\\d|25[0-5])$&#x2F;;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的IP地址&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、是否手机号码或者固话\"><a href=\"#2、是否手机号码或者固话\" class=\"headerlink\" title=\"2、是否手机号码或者固话\"></a>2、是否手机号码或者固话</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validatePhoneTwo(rule, value, callback) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;^((0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;)|(1[34578]\\d&#123;9&#125;))$&#x2F;;;</span><br><span class=\"line\">  if (value &#x3D;&#x3D; &#39;&#39; || value &#x3D;&#x3D; undefined || value &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的电话号码或者固话号码&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、是否固话\"><a href=\"#3、是否固话\" class=\"headerlink\" title=\"3、是否固话\"></a>3、是否固话</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateTelphone(rule, value,callback) &#123;</span><br><span class=\"line\">  const reg &#x3D;&#x2F;0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的固定电话）&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、是否手机号码\"><a href=\"#4、是否手机号码\" class=\"headerlink\" title=\"4、是否手机号码\"></a>4、是否手机号码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validatePhone(rule, value,callback) &#123;</span><br><span class=\"line\">  const reg &#x3D;&#x2F;^[1][3-9][0-9]&#123;9&#125;$&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的电话号码&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、是否身份证号码\"><a href=\"#5、是否身份证号码\" class=\"headerlink\" title=\"5、是否身份证号码\"></a>5、是否身份证号码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateIdNo(rule, value,callback) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">    if ((!reg.test(value)) &amp;&amp; value !&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的身份证号码&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、是否邮箱\"><a href=\"#6、是否邮箱\" class=\"headerlink\" title=\"6、是否邮箱\"></a>6、是否邮箱</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateEMail(rule, value,callback) &#123;</span><br><span class=\"line\">  const reg &#x3D;&#x2F;^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    if (!reg.test(value))&#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正确的邮箱&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、合法url\"><a href=\"#7、合法url\" class=\"headerlink\" title=\"7、合法url\"></a>7、合法url</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateURL(url) &#123;</span><br><span class=\"line\">  const urlregex &#x3D; &#x2F;^(https?|ftp):\\&#x2F;\\&#x2F;([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\\&#x2F;($|[a-zA-Z0-9.,?&#39;\\\\+&amp;%$#&#x3D;~_-]+))*$&#x2F;;</span><br><span class=\"line\">  return urlregex.test(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、验证内容是否包含英文数字以及下划线\"><a href=\"#8、验证内容是否包含英文数字以及下划线\" class=\"headerlink\" title=\"8、验证内容是否包含英文数字以及下划线\"></a>8、验证内容是否包含英文数字以及下划线</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isPassword(rule, value, callback) &#123;</span><br><span class=\"line\">  const reg &#x3D;&#x2F;^[_a-zA-Z0-9]+$&#x2F;;</span><br><span class=\"line\">  if(value&#x3D;&#x3D;&#39;&#39;||value&#x3D;&#x3D;undefined||value&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if (!reg.test(value))&#123;</span><br><span class=\"line\">      callback(new Error(&#39;仅由英文字母，数字以及下划线组成&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、自动检验数值的范围\"><a href=\"#9、自动检验数值的范围\" class=\"headerlink\" title=\"9、自动检验数值的范围\"></a>9、自动检验数值的范围</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function checkMax20000(rule, value, callback) &#123;</span><br><span class=\"line\">  if (value &#x3D;&#x3D; &#39;&#39; || value &#x3D;&#x3D; undefined || value &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125; else if (!Number(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;请输入[1,20000]之间的数字&#39;));</span><br><span class=\"line\">  &#125; else if (value &lt; 1 || value &gt; 20000) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;请输入[1,20000]之间的数字&#39;));</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、验证数字输入框最大数值\"><a href=\"#10、验证数字输入框最大数值\" class=\"headerlink\" title=\"10、验证数字输入框最大数值\"></a>10、验证数字输入框最大数值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function checkMaxVal(rule, value,callback) &#123;</span><br><span class=\"line\">  if (value &lt; 0 || value &gt; 最大值) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;请输入[0,最大值]之间的数字&#39;));</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、验证是否1-99之间\"><a href=\"#11、验证是否1-99之间\" class=\"headerlink\" title=\"11、验证是否1-99之间\"></a>11、验证是否1-99之间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isOneToNinetyNine(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^[1-9][0-9]&#123;0,1&#125;$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入正整数，值为【1,99】&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、验证是否整数\"><a href=\"#12、验证是否整数\" class=\"headerlink\" title=\"12、验证是否整数\"></a>12、验证是否整数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isInteger(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^[0-9]*[1-9][0-9]*$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、验证是否整数-非必填\"><a href=\"#13、验证是否整数-非必填\" class=\"headerlink\" title=\"13、验证是否整数,非必填\"></a>13、验证是否整数,非必填</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isIntegerNotMust(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^[0-9]*[1-9][0-9]*$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入正整数&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 1000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、-验证是否是-0-1-的小数\"><a href=\"#14、-验证是否是-0-1-的小数\" class=\"headerlink\" title=\"14、 验证是否是[0-1]的小数\"></a>14、 验证是否是[0-1]的小数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isDecimal(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入[0,1]之间的数字&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (value &lt; 0 || value &gt; 1) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入[0,1]之间的数字&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、-验证是否是-1-10-的小数-即不可以等于0\"><a href=\"#15、-验证是否是-1-10-的小数-即不可以等于0\" class=\"headerlink\" title=\"15、 验证是否是[1-10]的小数,即不可以等于0\"></a>15、 验证是否是[1-10]的小数,即不可以等于0</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isBtnOneToTen(rule, value, callback) &#123;</span><br><span class=\"line\">  if (typeof value &#x3D;&#x3D; &#39;undefined&#39;) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入正整数，值为[1,10]&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (!(value &#x3D;&#x3D; &#39;1&#39; || value &#x3D;&#x3D; &#39;2&#39; || value &#x3D;&#x3D; &#39;3&#39; || value &#x3D;&#x3D; &#39;4&#39; || value &#x3D;&#x3D; &#39;5&#39; || value &#x3D;&#x3D; &#39;6&#39; || value &#x3D;&#x3D; &#39;7&#39; || value &#x3D;&#x3D; &#39;8&#39; || value &#x3D;&#x3D; &#39;9&#39; || value &#x3D;&#x3D; &#39;10&#39;)) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入正整数，值为[1,10]&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、验证是否是-1-100-的小数-即不可以等于0\"><a href=\"#16、验证是否是-1-100-的小数-即不可以等于0\" class=\"headerlink\" title=\"16、验证是否是[1-100]的小数,即不可以等于0\"></a>16、验证是否是[1-100]的小数,即不可以等于0</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isBtnOneToHundred(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入整数，值为[1,100]&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (value &lt; 1 || value &gt; 100) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入整数，值为[1,100]&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、验证是否是-0-100-的小数\"><a href=\"#17、验证是否是-0-100-的小数\" class=\"headerlink\" title=\"17、验证是否是[0-100]的小数\"></a>17、验证是否是[0-100]的小数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isBtnZeroToHundred(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (!Number(value)) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入[1,100]之间的数字&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (value &lt; 0 || value &gt; 100) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入[1,100]之间的数字&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、验证端口是否在-0-65535-之间\"><a href=\"#18、验证端口是否在-0-65535-之间\" class=\"headerlink\" title=\"18、验证端口是否在[0,65535]之间\"></a>18、验证端口是否在[0,65535]之间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isPort(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;输入不可以为空&#39;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (value &#x3D;&#x3D; &#39;&#39; || typeof(value) &#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">      callback(new Error(&#39;请输入端口值&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^([0-9]|[1-9]\\d|[1-9]\\d&#123;2&#125;|[1-9]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|6[0-4]\\d&#123;3&#125;|65[0-4]\\d&#123;2&#125;|655[0-2]\\d|6553[0-5])$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入在[0-65535]之间的端口值&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、验证端口是否在-0-65535-之间，非必填-isMust表示是否必填\"><a href=\"#19、验证端口是否在-0-65535-之间，非必填-isMust表示是否必填\" class=\"headerlink\" title=\"19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填\"></a>19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isCheckPort(rule, value, callback) &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (value &#x3D;&#x3D; &#39;&#39; || typeof(value) &#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F;callback(new Error(&#39;请输入端口值&#39;));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const re &#x3D; &#x2F;^([0-9]|[1-9]\\d|[1-9]\\d&#123;2&#125;|[1-9]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|6[0-4]\\d&#123;3&#125;|65[0-4]\\d&#123;2&#125;|655[0-2]\\d|6553[0-5])$&#x2F;;</span><br><span class=\"line\">      const rsCheck &#x3D; re.test(value);</span><br><span class=\"line\">      if (!rsCheck) &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入在[0-65535]之间的端口值&#39;));</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、小写字母\"><a href=\"#20、小写字母\" class=\"headerlink\" title=\"20、小写字母\"></a>20、小写字母</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateLowerCase(val) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;^[a-z]+$&#x2F;;</span><br><span class=\"line\">  return reg.test(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、两位小数验证\"><a href=\"#22、两位小数验证\" class=\"headerlink\" title=\"22、两位小数验证\"></a>22、两位小数验证</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const validateValidity &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!&#x2F;(^[1-9]([0-9]+)?(\\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\\.[0-9]([0-9])?$)&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;最多两位小数！！！&#39;));</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、是否大写字母\"><a href=\"#23、是否大写字母\" class=\"headerlink\" title=\"23、是否大写字母\"></a>23、是否大写字母</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validateUpperCase(val) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;^[A-Z]+$&#x2F;;</span><br><span class=\"line\">  return reg.test(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、是否大小写字母\"><a href=\"#24、是否大小写字母\" class=\"headerlink\" title=\"24、是否大小写字母\"></a>24、是否大小写字母</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validatAlphabets(val) &#123;</span><br><span class=\"line\">  const reg &#x3D; &#x2F;^[A-Za-z]+$&#x2F;;</span><br><span class=\"line\">  return reg.test(val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25、密码校验\"><a href=\"#25、密码校验\" class=\"headerlink\" title=\"25、密码校验\"></a>25、密码校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const validatePsdReg &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;请输入密码&#39;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!&#x2F;^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$)([^\\u4e00-\\u9fa5\\s])&#123;6,20&#125;$&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种&#39;))</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26、中文校验\"><a href=\"#26、中文校验\" class=\"headerlink\" title=\"26、中文校验\"></a>26、中文校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const validateContacts &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;请输入中文&#39;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!&#x2F;^[\\u0391-\\uFFE5A-Za-z]+$&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;不可输入特殊字符&#39;))</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27、-账号校验\"><a href=\"#27、-账号校验\" class=\"headerlink\" title=\"27、 账号校验\"></a>27、 账号校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const validateCode &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!value) &#123;</span><br><span class=\"line\">    return callback(new Error(&#39;请输入账号&#39;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!&#x2F;^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]&#123;6,20&#125;$&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;账号必须为6-20位字母和数字组合&#39;))</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28-、纯数字校验\"><a href=\"#28-、纯数字校验\" class=\"headerlink\" title=\"28 、纯数字校验\"></a>28 、纯数字校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const validateNumber &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let numberReg &#x3D; &#x2F;^\\d+$|^\\d+[.]?\\d+$&#x2F;</span><br><span class=\"line\">    if (value !&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">        if (!numberReg.test(value)) &#123;</span><br><span class=\"line\">            callback(new Error(&#39;请输入数字&#39;))</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            callback()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        callback(new Error(&#39;请输入值&#39;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29、最多一位小数\"><a href=\"#29、最多一位小数\" class=\"headerlink\" title=\"29、最多一位小数\"></a>29、最多一位小数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const onePoint &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">  if (!&#x2F;^[0-9]+([.]&#123;1&#125;[0-9]&#123;1&#125;)?$&#x2F;.test(value)) &#123;</span><br><span class=\"line\">    callback(new Error(&#39;最多一位小数！！！&#39;));</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"css布局方式汇总","date":"2020-01-08T01:33:39.000Z","cover":"/images/ffbackground.webp","_content":"### 一、水平居中 \n\n#####  (1)文本/行内元素/行内块级元素▲ \n\n原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐\n\n```\n#parent{\n    text-align: center;\n}\n```\n\n优缺点\n\n- 优点：简单快捷，容易理解，兼容性非常好\n- 缺点：只对行内内容有效；属性会继承影响到后代行内内容；如果子元素宽度大于父元素宽度则无效，只有后代行内内容中宽度小于设置text-align属性的元素宽度的时候，才会水平居中\n\n#####  (2)单个块级元素▲ \n\n原理：根据[规范](https://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins)介绍得很清楚了，有这么一种情况：在margin有节余的同时如果左右margin设置了auto，将会均分剩余空间。另外，如果上下的margin设置了auto，其计算值为0\n\n```\n#son{\n    width: 100px; /*必须定宽*/\n    margin: 0 auto;\n}\n```\n\n优缺点\n\n- 优点：简单；兼容性好\n- 缺点：必须定宽，并且值不能为auto；宽度要小于父元素，否则无效\n\n#####  (3)多个块级元素 \n\n原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐\n\n```\n#parent{\n    text-align: center;\n}\n.son{\n    display: inline-block; /*改为行内或者行内块级形式，以达到text-align对其生效*/\n}\n```\n\n优缺点\n\n- 优点：简单，容易理解，兼容性非常好\n- 缺点：只对行内内容有效；属性会继承影响到后代行内内容；块级改为inline-block换行、空格会产生元素间隔\n\n#####  (4)使用绝对定位实现▲ \n\n原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的\n\n```\n#parent{\n    height: 200px;\n    width: 200px;  /*定宽*/\n    position: relative;  /*父相*/\n    background-color: #f00;\n}\n#son{\n    position: absolute;  /*子绝*/\n    left: 50%;  /*父元素宽度一半,这里等同于left:100px*/\n    transform: translateX(-50%);  /*自身宽度一半,等同于margin-left: -50px;*/\n    width: 100px;  /*定宽*/\n    height: 100px;\n    background-color: #00ff00;\n}\n```\n\n优缺点\n\n- 优点：使用margin-left兼容性好；不管是块级还是行内元素都可以实现\n- 缺点：代码较多；脱离文档流；使用margin-left需要知道宽度值；使用transform兼容性不好（ie9+）\n\n#####  (5)任意个元素(flex) \n\n原理：就是设置当前主轴对齐方式为居中。说不上为什么，flex无非就是主轴侧轴是重点，然后就是排列方式的设置，可以去看看文末的flex阅读推荐\n\n```\n#parent{\n    display: flex;\n    justify-content: center;\n}\n```\n\n优缺点\n\n- 优点：功能强大；简单方便；容易理解\n- 缺点：PC端[兼容性不好](https://caniuse.com/#search=flex)，移动端（Android4.0+）\n\n#####  本章小结：\n\n- 对于水平居中，我们应该先考虑，哪些元素有自带的居中效果，最先想到的应该就是 `text-align:center` 了，但是这个只对行内内容有效，所以我们要使用 `text-align:center` 就必须将子元素设置为 `display: inline;` 或者 `display: inline-block;` ；\n- 其次就是考虑能不能用`margin: 0 auto;` ，因为这都是一两句代码能搞定的事，实在不行就是用绝对定位去实现了。\n- 移动端能用flex就用flex，简单方便，灵活并且功能强大，无愧为网页布局的一大利器！\n\n###  二、垂直居中 \n\n*一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有*\n\n#####  (1)单行文本/行内元素/行内块级元素▲ \n\n原理：line-height的最终表现是通过inline box实现的，而无论inline box所占据的高度是多少（无论比文字大还是比文字小），其占据的空间都是与文字内容公用水平中垂线的。\n\n```\n#parent{\n    height: 150px;\n    line-height: 150px;  /*与height等值*/\n}\n```\n\n优缺点\n\n- 优点：简单；兼容性好\n- 缺点：只能用于单行行内内容；要知道高度的值\n\n#####  (2)多行文本/行内元素/行内块级元素 \n\n原理同上\n\n```\n#parent{  /*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*/\n    height: 150px;\n    line-height: 30px;  /*元素在页面呈现为5行,则line-height的值为height/5*/\n}\n```\n\n优缺点\n\n- 优点：简单；兼容性好\n- 缺点：只能用于行内内容；需要知道高度和最终呈现多少行来计算出line-height的值，建议用span包裹多行文本\n\n#####  (3)图片▲ \n\n原理：[vertical-align和line-height的基友关系](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)\n\n```\n#parent{\n    height: 150px;\n    line-height: 150px;\n    font-size: 0;\n}\nimg#son{vertical-align: middle;} /*默认是基线对齐，改为middle*/\n```\n\n优缺点\n\n- 优点：简单；兼容性好\n- 缺点：需要添加font-size: 0; 才可以完全的垂直居中；不过需要主要，html#parent包裹img之间需要有换行或空格\n\n#####  (4)单个块级元素 \n\nhtml代码:\n\n```\n<div id=\"parent\">\n    <div id=\"son\"></div>\n</div>\n```\n\n######  (4-1) 使用tabel-cell实现: \n\n原理：CSS Table，使表格内容对齐方式为middle\n\n```\n#parent{\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n\n优缺点\n\n- 优点：简单；宽高不定；兼容性好（ie8+）\n- 缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置display: table; 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素\n\n######  (4-2) 使用绝对定位实现:▲ \n\n```\n/*原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的*/\n#parent{\n    height: 150px;\n    position: relative;  /*父相*/\n}\n#son{\n    position: absolute;  /*子绝*/\n    top: 50%;  /*父元素高度一半,这里等同于top:75px;*/\n    transform: translateY(-50%);  /*自身高度一半,这里等同于margin-top:-25px;*/\n    height: 50px;\n}\n\n/*优缺点\n- 优点：使用margin-top兼容性好；不管是块级还是行内元素都可以实现\n- 缺点：代码较多；脱离文档流；使用margin-top需要知道高度值；使用transform兼容性不好（ie9+）*/\n\n或\n\n/*原理：当top、bottom为0时,margin-top&bottom会无限延伸占满空间并且平分*/\n#parent{position: relative;}\n#son{\n    position: absolute;\n    margin: auto 0;\n    top: 0;\n    bottom: 0;\n    height: 50px;\n}\n\n/*优缺点\n- 优点：简单;兼容性较好(ie8+)\n- 缺点：脱离文档流*/\n```\n\n######  (4-3) 使用flex实现: \n\n原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐\n\n```\n#parent{\n    display: flex;\n    align-items: center;\n}\n\n或\n\n#parent{display: flex;}\n#son{align-self: center;}\n\n或\n/*原理：这个尚未搞清楚，应该是flex使margin上下边界无限延伸至剩余空间并平分了*/\n#parent{display: flex;}\n#son{margin: auto 0;}\n```\n\n优缺点\n\n- 优点：简单灵活；功能强大\n- 缺点：PC端[兼容性不好](https://caniuse.com/#search=flex)，移动端（Android4.0+）\n\n#####  (5)任意个元素(flex) \n\n原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐\n\n```\n#parent{\n    display: flex;\n    align-items: center;\n}\n\n或\n\n#parent{\n    display: flex;\n}\n.son{\n    align-self: center;\n}\n\n或 \n\n#parent{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n```\n\n优缺点\n\n- 优点：简单灵活；功能强大\n- 缺点：PC端[兼容性不好](https://caniuse.com/#search=flex)，移动端（Android4.0+）\n\n#####  ★本章小结：\n\n- 对于垂直居中，最先想到的应该就是 `line-height` 了，但是这个只能用于行内内容；\n- 其次就是考虑能不能用`vertical-align: middle;` ，不过这个一定要熟知原理才能用得顺手，建议看下[vertical-align和line-height的基友关系](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/) ；\n- 然后便是绝对定位，虽然代码多了点，但是胜在适用于不同情况；\n- 移动端兼容性允许的情况下能用flex就用flex\n\n###  三、水平垂直居中 \n\n#####  (1)行内/行内块级/图片▲ \n\n原理：`text-align: center;` 控制行内内容相对于块父元素水平居中,然后就是`line-height`和`vertical-align`的基友关系使其垂直居中，`font-size: 0;` 是为了消除近似居中的bug\n\n```\n#parent{\n    height: 150px;\n    line-height: 150px;  /*行高的值与height相等*/\n    text-align: center;\n    font-size: 0;   /*消除幽灵空白节点的bug*/\n}\n#son{\n    /*display: inline-block;*/  /*如果是块级元素需改为行内或行内块级才生效*/\n    vertical-align: middle;\n}\n```\n\n优缺点\n\n- 优点：代码简单；兼容性好（ie8+）\n- 缺点：只对行内内容有效；需要添加`font-size: 0;` 才可以完全的垂直居中；不过需要注意html中#parent包裹#son之间需要有换行或空格；熟悉`line-height`和`vertical-align`的基友关系较难\n\n#####  (2)table-cell \n\n原理：CSS Table，使表格内容垂直对齐方式为middle,然后根据是行内内容还是块级内容采取不同的方式达到水平居中\n\n```\n#parent{\n    height: 150px;\n    width: 200px;\n    display: table-cell;\n    vertical-align: middle;\n    /*text-align: center;*/   /*如果是行内元素就添加这个*/\n}\n#son{\n    /*margin: 0 auto;*/    /*如果是块级元素就添加这个*/\n    width: 100px;\n    height: 50px;\n}\n```\n\n优缺点\n\n- 优点：简单；适用于宽度高度未知情况；兼容性好（ie8+）\n- 缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置`display: table;` 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素\n\n#####  (3)button作为父元素 \n\n原理：button的默认样式，再把需要居中的元素表现形式改为行内或行内块级就好\n\n```\nbutton#parent{  /*改掉button默认样式就好了,不需要居中处理*/\n    height: 150px;\n    width: 200px;\n    outline: none;  \n    border: none;\n}\n#son{\n    display: inline-block; /*button自带text-align: center,改为行内水平居中生效*/\n}\n```\n\n优缺点\n\n- 优点：简单方便，充分利用默认样式\n- 缺点：只适用于行内内容；需要清除部分默认样式；水平垂直居中兼容性很好，但是ie下点击会有凹陷效果！\n\n#####  (4)绝对定位 \n\n原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到几何上的水平垂直居中\n\n```\n#parent{\n    position: relative;\n}\n#son{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    /*定宽高时等同于margin-left:负自身宽度一半;margin-top:负自身高度一半;*/\n    transform: translate(-50%,-50%); \n}\n```\n\n优缺点\n\n- 优点：使用margin兼容性好；不管是块级还是行内元素都可以实现\n- 缺点：代码较多；脱离文档流；使用margin需要知道宽高；使用transform兼容性不好（ie9+）\n\n#####  (5)绝对居中 \n\n原理：当top、bottom为0时,margin-top&bottom设置auto的话会无限延伸占满空间并且平分；当left、right为0时,margin-left&right设置auto的话会无限延伸占满空间并且平分\n\n```\n#parent{\n    position: relative;\n}\n#son{\n    position: absolute;\n    margin: auto;\n    width: 100px;\n    height: 50px;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n```\n\n优缺点\n\n- 优点：无需关注宽高；兼容性较好(ie8+)\n- 缺点：代码较多；脱离文档流\n\n#####  (6)flex \n\n原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐\n\n```\n#parent{\n    display: flex;\n}\n#son{\n    margin: auto;\n}\n\n或\n\n#parent{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n或\n\n#parent{\n    display: flex;\n    justify-content: center;\n}\n#son{\n    align-self: center;\n}\n复制代码\n```\n\n优缺点\n\n- 优点：简单灵活；功能强大\n- 缺点：PC端[兼容性不好](https://caniuse.com/#search=flex)，移动端（Android4.0+）\n\n#####  (7)视窗居中 \n\n原理：vh为视口单位，视口即文档可视的部分，50vh就是视口高度的50/100，设置50vh上边距再\n\n```\n#son{\n\t/*0如果去掉，则会多出滚动条并且上下都是50vh的margin。如果去掉就给body加上overflow:hidden;*/\n    margin: 50vh auto 0;  \n    transform: translateY(-50%);\n}\n```\n\n优缺点\n\n- 优点：简单；容易理解；两句代码达到屏幕水平垂直居中\n- 缺点：兼容性不好（ie9+，Android4.4+）\n\n#####  ★本章小结：\n\n- 一般情况下，水平垂直居中，我们最常用的就是绝对定位加负边距了，缺点就是需要知道宽高，使用transform倒是可以不需要，但是兼容性不好（ie9+）；\n- 其次就是绝对居中，绝对定位设置top、left、right、bottom为0，然后`margin:auto;` 让浏览器自动平分边距以达到水平垂直居中的目的；\n- 如果是行内/行内块级/图片这些内容，可以优先考虑`line-height`和`vertical-align` 结合使用，不要忘了还有`text-align` ，这个方法代码其实不多，就是理解原理有点困难，想要熟练应对各种情况还需好好研究；\n- 移动端兼容性允许的情况下能用flex就用flex。\n\n###  四、两列布局 \n\n####  4.1 左列定宽,右列自适应 \n\n#####  (1)利用float+margin实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"left\">左列定宽</div>\n<div id=\"right\">右列自适应</div>\n</body>\n复制代码\n```\n\ncss代码:\n\n```\n#left {\n    background-color: #f00;\n    float: left;\n    width: 100px;\n    height: 500px;\n}\n#right {\n    background-color: #0f0;\n    height: 500px;\n    margin-left: 100px; /*大于等于#left的宽度*/\n}\n复制代码\n```\n\n#####  (2)利用float+margin(fix)实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"left\">左列定宽</div>\n<div id=\"right-fix\">\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n复制代码\n```\n\ncss代码:\n\n```\n#left {\n    background-color: #f00;\n    float: left;\n    width: 100px;\n    height: 500px;\n}\n#right-fix {\n    float: right;\n    width: 100%;\n    margin-left: -100px; /*正值大于或等于#left的宽度,才能显示在同一行*/\n}\n#right{\n    margin-left: 100px; /*大于或等于#left的宽度*/\n    background-color: #0f0;\n    height: 500px;\n}\n复制代码\n```\n\n#####  (3)使用float+overflow实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"left\">左列定宽</div>\n<div id=\"right\">右列自适应</div>\n</body>\n复制代码\n```\n\ncss代码:\n\n```\n#left {\n    background-color: #f00;\n    float: left;\n    width: 100px;\n    height: 500px;\n}\n#right {\n    background-color: #0f0;\n    height: 500px;\n    overflow: hidden; /*触发bfc达到自适应*/\n}\n复制代码\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果\n- 缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6\n\n#####  (4)使用table实现 \n\nhtml代码:\n\n```\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n复制代码\n```\n\ncss代码:\n\n```\n#parent{\n    width: 100%;\n    display: table;\n    height: 500px;\n}\n#left {\n    width: 100px;\n    background-color: #f00;\n}\n#right {\n    background-color: #0f0;\n}\n#left,#right{\n    display: table-cell;  /*利用单元格自动分配宽度*/\n}\n复制代码\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果\n- 缺点：margin失效；设置间隔比较麻烦；不支持ie8-\n\n#####  (5)使用绝对定位实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n复制代码\n```\n\ncss代码:\n\n```\n#parent{\n    position: relative;  /*子绝父相*/\n}\n#left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: #f00;\n    width: 100px;\n    height: 500px;\n}\n#right {\n    position: absolute;\n    top: 0;\n    left: 100px;  /*值大于等于#left的宽度*/\n    right: 0;\n    background-color: #0f0;\n    height: 500px;\n}\n```\n\n#####  (6)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n\n```\n\ncss代码:\n\n```\n#parent{\n    width: 100%;\n    height: 500px;\n    display: flex;\n}\n#left {\n    width: 100px;\n    background-color: #f00;\n}\n#right {\n    flex: 1; /*均分了父元素剩余空间*/\n    background-color: #0f0;\n}\n```\n\n#####  (7)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 100%;\n    height: 500px;\n    display: grid;\n    grid-template-columns: 100px auto;  /*设定2列就ok了,auto换成1fr也行*/\n}\n#left {\n    background-color: #f00;\n}\n#right {\n    background-color: #0f0;\n}\n\n```\n\n####  4.2 左列自适应,右列定宽 \n\n效果:\n\n\n#####  (1)使用float+margin实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    height: 500px;\n    padding-left: 100px;  /*抵消#left的margin-left以达到#parent水平居中*/\n}\n#left {\n    width: 100%;\n    height: 500px;\n    float: left;\n    margin-left: -100px; /*正值等于#right的宽度*/\n    background-color: #f00;\n}\n#right {\n    height: 500px;\n    width: 100px;\n    float: right;\n    background-color: #0f0;\n}\n\n```\n\n#####  (2)使用float+overflow实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"right\">右列定宽</div>\n    <div id=\"left\">左列自适应</div>   <!--顺序要换一下-->\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#left {\n    overflow: hidden;  /*触发bfc*/\n    height: 500px;\n    background-color: #f00;\n}\n#right {\n    margin-left: 10px;  /*margin需要定义在#right中*/\n    float: right;\n    width: 100px;\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果\n- 缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6\n\n#####  (3)使用table实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    width: 100%;\n    height: 500px;\n    display: table;\n}\n#left {\n    background-color: #f00;\n    display: table-cell;\n}\n#right {\n    width: 100px;\n    background-color: #0f0;\n    display: table-cell;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果\n- 缺点：margin失效；设置间隔比较麻烦；不支持ie8-\n\n#####  (4)使用绝对定位实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    position: relative;  /*子绝父相*/\n}\n#left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 100px;  /*大于等于#rigth的宽度*/\n    background-color: #f00;\n    height: 500px;\n}\n#right {\n    position: absolute;\n    top: 0;\n    right: 0;\n    background-color: #0f0;\n    width: 100px;\n    height: 500px;\n}\n\n```\n\n#####  (5)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    height: 500px;\n    display: flex;\n}\n#left {\n    flex: 1;\n    background-color: #f00;\n}\n#right {\n    width: 100px;\n    background-color: #0f0;\n}\n\n```\n\n#####  (6)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: grid;\n    grid-template-columns: auto 100px;  /*设定2列,auto换成1fr也行*/\n}\n#left {\n    background-color: #f00;\n}\n#right {\n    background-color: #0f0;\n}\n\n```\n\n####  4.3 一列不定,一列自适应 \n\n(盒子宽度随着内容增加或减少发生变化,另一个盒子自适应)\n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-1.jpg)\n\n\n\n变化后:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-2.jpg)\n\n\n\n#####  (1)使用float+overflow实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列不定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#left {\n    margin-right: 10px;\n    float: left;  /*只设置浮动,不设宽度*/\n    height: 500px;\n    background-color: #f00;\n}\n#right {\n    overflow: hidden;  /*触发bfc*/\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注宽度，利用bfc达到自适应效果\n- 缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6\n\n#####  (2)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列不定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    display: flex;\n}\n#left { /*不设宽度*/\n    margin-right: 10px;\n    height: 500px;\n    background-color: #f00;\n}\n#right {\n    height: 500px;\n    background-color: #0f0;\n    flex: 1;  /*均分#parent剩余的部分*/\n}\n\n```\n\n#####  (3)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列不定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n复制代码\n```\n\ncss代码:\n\n```\n#parent{\n    display: grid;\n    grid-template-columns: auto 1fr;  /*auto和1fr换一下顺序就是左列自适应,右列不定宽了*/\n}\n#left {\n    margin-right: 10px;\n    height: 500px;\n    background-color: #f00;\n}\n#right {\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n*左列自适应,右列不定宽同理(参考4.1和4.3对应代码示例)*\n\n###  五、三列布局 \n\n####  5.1 两列定宽,一列自适应 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-3.jpg)\n\n\n\n#####  (1)使用float+margin实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    min-width: 310px; /*100+10+200,防止宽度不够,子元素换行*/\n}\n#left {\n    margin-right: 10px;  /*#left和#center间隔*/\n    float: left;\n    width: 100px;\n    height: 500px;\n    background-color: #f00;\n}\n#center{\n    float: left;\n    width: 200px;\n    height: 500px;\n    background-color: #eeff2b;\n}\n#right {\n    margin-left: 320px;  /*等于#left和#center的宽度之和加上间隔,多出来的就是#right和#center的间隔*/\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n#####  (2)使用float+overflow实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    min-width: 320px; /*100+10+200+20,防止宽度不够,子元素换行*/\n}\n#left {\n    margin-right: 10px; /*间隔*/\n    float: left;\n    width: 100px;\n    height: 500px;\n    background-color: #f00;\n}\n#center{\n    margin-right: 10px; /*在此定义和#right的间隔*/\n    float: left;\n    width: 200px;\n    height: 500px;\n    background-color: #eeff2b;\n}\n#right {\n    overflow: hidden;  /*触发bfc*/\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果\n- 缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6\n\n#####  (3)使用table实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 100%; \n    height: 520px; /*抵消上下间距10*2的高度影响*/\n    margin: -10px 0;  /*抵消上下边间距10的位置影响*/\n    display: table;\n    /*左右两边间距大了一点,子元素改用padding设置盒子间距就没有这个问题*/\n    border-spacing: 10px;  /*关键!!!设置间距*/\n}\n#left {\n    display: table-cell;\n    width: 100px;\n    background-color: #f00;\n}\n#center {\n    display: table-cell;\n    width: 200px;\n    background-color: #eeff2b;\n}\n#right {\n    display: table-cell;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果\n- 缺点：margin失效；设置间隔比较麻烦；不支持ie8-\n\n#####  (4)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: flex;\n}\n#left {\n    margin-right: 10px;  /*间距*/\n    width: 100px;\n    background-color: #f00;\n}\n#center {\n    margin-right: 10px;  /*间距*/\n    width: 200px;\n    background-color: #eeff2b;\n}\n#right {\n    flex: 1;  /*均分#parent剩余的部分达到自适应*/\n    background-color: #0f0;\n}\n\n```\n\n#####  (5)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: grid;\n    grid-template-columns: 100px 200px auto; /*设置3列,固定第一第二列的宽度,第三列auto或者1fr*/\n}\n#left {\n    margin-right: 10px;  /*间距*/\n    background-color: #f00;\n}\n#center {\n    margin-right: 10px;  /*间距*/\n    background-color: #eeff2b;\n}\n#right {\n    background-color: #0f0;\n}\n\n```\n\n####  5.2 两侧定宽,中间自适应 \n\n#####  5.2.1 双飞翼布局方法 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-4.jpg)\n\n\n\nhtml代码:\n\n```\n<body>\n<div id=\"header\"></div>\n<!--中间栏需要放在前面-->\n<div id=\"parent\">\n    <div id=\"center\">\n        <div id=\"center_inbox\">中间自适应</div>\n        <hr>  <!--方便观察原理-->\n    </div>\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n<div id=\"footer\"></div>\n</body>\n\n```\n\ncss代码:\n\n```\n#header {\n    height: 60px;\n    background-color: #ccc;\n}\n#left {\n    float: left;\n    width: 100px;\n    height: 500px;\n    margin-left: -100%; /*调整#left的位置,值等于自身宽度*/\n    background-color: #f00;\n    opacity: 0.5;\n}\n#center {\n    height: 500px;\n    float: left;\n    width: 100%;\n    background-color: #eeff2b;\n}\n#center_inbox{\n    height: 480px;\n    border: 1px solid #000;\n    margin: 0 220px 0 120px;  /*关键!!!左右边界等于左右盒子的宽度,多出来的为盒子间隔*/\n}\n#right {\n    float: left;\n    width: 200px;\n    height: 500px;\n    margin-left: -200px;  /*使right到指定的位置,值等于自身宽度*/\n    background-color: #0f0;\n    opacity: 0.5;\n}\n#footer {\n    clear: both;  /*注意清除浮动!!*/\n    height: 60px;\n    background-color: #ccc;\n}\n\n```\n\n#####  5.2.2 圣杯布局方法 \n\n\nhtml代码:\n\n```\n<body>\n<div id=\"header\"></div>\n<div id=\"parent\">\n    <!--#center需要放在前面-->\n    <div id=\"center\">中间自适应\n        <hr>\n    </div>\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n<div id=\"footer\"></div>\n</body>\n\n```\n\ncss代码:\n\n```\n#header{\n    height: 60px;\n    background-color: #ccc;\n}\n#parent {\n    box-sizing: border-box;\n    height: 500px;\n    padding: 0 215px 0 115px;  /*为了使#center摆正,左右padding分别等于左右盒子的宽,可以结合左右盒子相对定位的left调整间距*/\n}\n#left {\n    margin-left: -100%;  /*使#left上去一行*/\n    position: relative;\n    left: -115px;  /*相对定位调整#left的位置,正值大于或等于自身宽度*/\n    float: left;\n    width: 100px;\n    height: 500px;\n    background-color: #f00;\n    opacity: 0.5;\n}\n#center {\n    float: left;\n    width: 100%;  /*由于#parent的padding,达到自适应的目的*/\n    height: 500px;\n    box-sizing: border-box;\n    border: 1px solid #000;\n    background-color: #eeff2b;\n}\n#right {\n    position: relative;\n    left: 215px; /*相对定位调整#right的位置,大于或等于自身宽度*/\n    width: 200px;\n    height: 500px;\n    margin-left: -200px;  /*使#right上去一行*/\n    float: left;\n    background-color: #0f0;\n    opacity: 0.5;\n}\n#footer{\n    height: 60px;\n    background-color: #ccc;\n}\n\n```\n\n#####  5.2.3 使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"header\"></div>\n    <!--#center需要放在前面-->\n    <div id=\"center\">中间自适应\n        <hr>\n    </div>\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列定宽</div>\n    <div id=\"footer\"></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: grid;\n    grid-template-columns: 100px auto 200px; /*设定3列*/\n    grid-template-rows: 60px auto 60px; /*设定3行*/\n    /*设置网格区域分布*/\n    grid-template-areas: \n        \"header header header\" \n        \"leftside main rightside\" \n        \"footer footer footer\";\n}\n#header {\n    grid-area: header; /*指定在哪个网格区域*/\n    background-color: #ccc;\n}\n#left {\n    grid-area: leftside;\n    background-color: #f00;\n    opacity: 0.5;\n}\n#center {\n    grid-area: main; /*指定在哪个网格区域*/\n    margin: 0 15px; /*设置间隔*/\n    border: 1px solid #000;\n    background-color: #eeff2b;\n}\n#right {\n    grid-area: rightside; /*指定在哪个网格区域*/\n    background-color: #0f0;\n    opacity: 0.5;\n}\n#footer {\n    grid-area: footer; /*指定在哪个网格区域*/\n    background-color: #ccc;\n}\n\n```\n\n#####  5.2.4 其他方法 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-5.jpg)\n\n\n\n#####  (1)使用table实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 100%;\n    height: 500px;\n    display: table;\n}\n#left {\n    display: table-cell;\n    width: 100px;\n    background-color: #f00;\n}\n#center {\n    display: table-cell;\n    background-color: #eeff2b;\n}\n#right {\n    display: table-cell;\n    width: 200px;\n    background-color: #0f0;\n}\n\n复制代码\n```\n\n优缺点：\n\n- 优点：代码简洁，容易理解；\n- 缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-\n\n#####  (2)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: flex;\n}\n#left {\n    width: 100px;\n    background-color: #f00;\n}\n#center {\n    flex: 1;  /*均分#parent剩余的部分*/\n    background-color: #eeff2b;\n}\n#right {\n    width: 200px;\n    background-color: #0f0;\n}\n\n```\n\n#####  (3)使用position实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    position: relative; /*子绝父相*/\n}\n#left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100px;\n    height: 500px;\n    background-color: #f00;\n}\n#center {\n    height: 500px;\n    margin-left: 100px; /*大于等于#left的宽度,或者给#parent添加同样大小的padding-left*/\n    margin-right: 200px;  /*大于等于#right的宽度,或者给#parent添加同样大小的padding-right*/\n    background-color: #eeff2b;\n}\n#right {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 200px;\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：容易理解，兼容性比较好\n- 缺点：需手动计算宽度确定边距；脱离文档流；代码繁多\n\n###  六、多列布局 \n\n####  6.1 等宽布局 \n\n#####  6.1.1 四列等宽 \n\n#####  (1)使用float实现 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-6.jpg)\n\n\n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    margin-left: -20px; /*使整体内容看起来居中,抵消padding-left的影响*/\n}\n.column{\n    padding-left: 20px;  /*盒子的边距*/\n    width: 25%;\n    float: left;\n    box-sizing: border-box;\n    border: 1px solid #000;\n    background-clip: content-box; /*背景色从内容开始绘制,方便观察*/\n    height: 500px;\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解；兼容性较好\n- 缺点：需要手动清除浮动，否则会产生高度塌陷\n\n#####  (2)使用table实现 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-7.jpg)\n\n\n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 540px;  /*抵消上下边20*2间距的高度影响*/\n    display: table;\n    margin: -20px 0;  /*抵消上下边20*2间距的位置影响*/\n    /*两边离页面间距较大,改用子元素设置padding来当成间隔就不会有这样的问题*/\n    border-spacing: 20px;  /*设置间距*/\n}\n.column{\n    display: table-cell;\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解；无需关注宽度，单元格自动等分\n- 缺点：margin失效；设置间隔比较麻烦；不支持ie8-\n\n#####  (3)使用flex实现 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-8.jpg)\n\n\n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    margin-left: -15px;  /*使内容看起来居中*/\n    height: 500px;\n    display: flex;\n}\n.column{\n    flex: 1; /*一起平分#parent*/\n    margin-left: 15px; /*设置间距*/\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n#####  多列等宽 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-9.jpg)\n\n\n\n#####  (1)使用float实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">5 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">6 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n}\n.column{\n    float: left;  /*添加浮动*/\n    width: 16.66666666666667%;  /*100÷列数,得出百分比*/\n    height: 500px;\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解；兼容性较好\n- 缺点：需要手动清除浮动，否则会产生高度塌陷\n\n#####  (2)使用table实现 \n\nhtml代码\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">5 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">6 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n```\n\ncss代码:\n\n```\n#parent {\n    width: 100%;\n    height: 500px;\n    display: table;\n}\n.column{\n    display: table-cell; /*无需关注列数,单元格自动平分*/\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解；无需关注宽度。单元格自动等分\n- 缺点：margin失效；设置间隔比较麻烦；不兼容ie8-\n\n#####  (3)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">5 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">6 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: flex;\n}\n.column{\n    flex: 1;  /*无需关注列数,一起平分#parent*/\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n#####  (4)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">5 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">6 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: grid;\n    grid-template-columns: repeat(6,1fr);  /*6就是列数*/\n}\n.column{}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n####  6.2 九宫格布局 \n\n#####  (1)使用table实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"row\">\n        <div class=\"item\">1</div>\n        <div class=\"item\">2</div>\n        <div class=\"item\">3</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">4</div>\n        <div class=\"item\">5</div>\n        <div class=\"item\">6</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">7</div>\n        <div class=\"item\">8</div>\n        <div class=\"item\">9</div>\n    </div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 1200px;\n    height: 500px;\n    margin: 0 auto;\n    display: table;\n}\n.row {\n    display: table-row;\n}\n.item {\n    border: 1px solid #000;\n    display: table-cell;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简洁，容易理解；\n- 缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-\n\n#####  (2)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"row\">\n        <div class=\"item\">1</div>\n        <div class=\"item\">2</div>\n        <div class=\"item\">3</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">4</div>\n        <div class=\"item\">5</div>\n        <div class=\"item\">6</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">7</div>\n        <div class=\"item\">8</div>\n        <div class=\"item\">9</div>\n    </div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 1200px;\n    height: 500px;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n}\n.row {\n    display: flex;\n    flex: 1;\n}\n.item {\n    flex: 1;\n    border: 1px solid #000;\n}\n\n```\n\n#####  (3)使用Grid实现 \n\n*CSS Grid非常强大,可以实现各种各样的三维布局,可查阅本文结尾的阅读推荐*\n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"item\">1</div>\n    <div class=\"item\">2</div>\n    <div class=\"item\">3</div>\n    <div class=\"item\">4</div>\n    <div class=\"item\">5</div>\n    <div class=\"item\">6</div>\n    <div class=\"item\">7</div>\n    <div class=\"item\">8</div>\n    <div class=\"item\">9</div>\n</div>\n</body>\n\n复制代码\n```\n\ncss代码:\n\n```\n#parent {\n    width: 1200px;\n    height: 500px;\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr); /*等同于1fr 1fr 1fr,此为重复的合并写法*/\n    grid-template-rows: repeat(3, 1fr);  /*等同于1fr 1fr 1fr,此为重复的合并写法*/\n}\n.item {\n    border: 1px solid #000;\n}\n\n```\n\n####  6.3 栅格系统 \n\n优缺点：\n\n- 优点：代码简洁，容易理解；提高页面内容的流动性，能适应多种设备；\n\n#####  (1)用Less生成 \n\n```\n/*生成栅格系统*/\n@media screen and (max-width: 768px){\n  .generate-columns(12);     /*此处设置生成列数*/\n  .generate-columns(@n, @i: 1) when (@i <= @n) {\n    .column-xs-@{i} {\n      width: (@i * 100% / @n);\n    }\n    .generate-columns(@n, (@i+1));\n  }\n}\n@media screen and (min-width: 768px){\n  .generate-columns(12);    /*此处设置生成列数*/\n  .generate-columns(@n, @i: 1) when (@i <= @n) {\n    .column-sm-@{i} {\n      width: (@i * 100% / @n);\n    }\n    .generate-columns(@n, (@i+1));\n  }\n}\ndiv[class^=\"column-xs-\"]{\n\tfloat: left;\n}\ndiv[class^=\"column-sm-\"]{\n\tfloat: left;\n}\n```\n\n编译后的CSS代码:\n\n```\n@media screen and (max-width: 768px) {\n  .column-xs-1 {  width: 8.33333333%;  }\n  .column-xs-2 {  width: 16.66666667%;  }\n  .column-xs-3 {  width: 25%;  }\n  .column-xs-4 {  width: 33.33333333%;  }\n  .column-xs-5 {  width: 41.66666667%;  }\n  .column-xs-6 {  width: 50%;  }\n  .column-xs-7 {  width: 58.33333333%;  }\n  .column-xs-8 {  width: 66.66666667%;  }\n  .column-xs-9 {  width: 75%;  }\n  .column-xs-10 {  width: 83.33333333%;  }\n  .column-xs-11 {  width: 91.66666667%;  }\n  .column-xs-12 {  width: 100%;  }\n}\n@media screen and (min-width: 768px) {\n  .column-sm-1 {  width: 8.33333333%;  }\n  .column-sm-2 {  width: 16.66666667%;  }\n  .column-sm-3 {  width: 25%;  }\n  .column-sm-4 {  width: 33.33333333%;  }\n  .column-sm-5 {  width: 41.66666667%;  }\n  .column-sm-6 {  width: 50%;  }\n  .column-sm-7 {  width: 58.33333333%;  }\n  .column-sm-8 {  width: 66.66666667%;  }\n  .column-sm-9 {  width: 75%;  }\n  .column-sm-10 {  width: 83.33333333%;  }\n  .column-sm-11 {  width: 91.66666667%;  }  \n  .column-sm-12 {  width: 100%;  }\n}\ndiv[class^=\"column-xs-\"]{\n\tfloat: left;\n}\ndiv[class^=\"column-sm-\"]{\n\tfloat: left;\n}\n\n```\n\n###  七、全屏布局 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-10.jpg)\n\n\n\n#####  (1)使用绝对定位实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"top\">top</div>\n    <div id=\"left\">left</div>\n    <div id=\"right\">right</div>\n    <div id=\"bottom\">bottom</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\nhtml, body, #parent {height: 100%;overflow: hidden;}\n#parent > div {\n    border: 1px solid #000;\n}\n#top {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 100px;\n}\n#left {\n    position: absolute;\n    top: 100px;  /*值大于等于#top的高度*/\n    left: 0;\n    bottom: 50px;  /*值大于等于#bottom的高度*/\n    width: 200px;\n}\n#right {\n    position: absolute;\n    overflow: auto;\n    left: 200px;  /*值大于等于#left的宽度*/\n    right: 0;\n    top: 100px;  /*值大于等于#top的高度*/\n    bottom: 50px;  /*值大于等于#bottom的高度*/\n}\n#bottom {\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 50px;\n}\n\n```\n\n优缺点：\n\n- 优点：容易理解\n- 缺点：代码繁多；需要计算好各个盒子的宽高；\n\n#####  (2)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"top\">top</div>\n    <div id=\"middle\">\n        <div id=\"left\">left</div>\n        <div id=\"right\">right</div>\n    </div>\n    <div id=\"bottom\">bottom</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n*{\n    margin: 0;\n    padding: 0;\n}\nhtml,body,#parent{\n    height:100%;\n}\n#parent {\n    display: flex;\n    flex-direction: column;\n}\n#top {\n    height: 100px;\n}\n#bottom {\n    height: 50px;\n}\n#middle {\n    flex: 1;\n    display: flex;\n}\n#left {\n    width: 200px;\n}\n#right {\n    flex: 1;\n    overflow: auto;\n}\n\n```\n\n#####  (3)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"top\">top</div>\n    <div id=\"left\">left</div>\n    <div id=\"right\">right</div>\n    <div id=\"bottom\">bottom</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n*{\n    margin: 0;\n    padding: 0;\n}\nhtml, body, #parent {\n    height: 100%;\n}\n#parent {\n    width: 100%;\n    height: 100%;\n    display: grid;\n    /*分成2列,第一列宽度200px,第二列1fr平分剩余的部分,此处换成auto也行*/\n    grid-template-columns: 200px 1fr;  \n    /*分成3行,第一行高度100px,第二行auto为自适应,此处换成1fr也行,第3行高度为50px*/\n    grid-template-rows: 100px auto 50px; \n    /*定义网格区域分布*/\n    grid-template-areas:\n        \"header header\"\n        \"aside main\"\n        \"footer footer\";\n}\n#parent>div{\n    border: 1px solid #000;\n}\n#top{\n    grid-area: header;  /*指定在哪个网格区域*/\n}\n#left{\n    grid-area: aside;  /*指定在哪个网格区域*/\n}\n#right{\n    grid-area: main;  /*指定在哪个网格区域*/\n}\n#bottom{\n    grid-area: footer;  /*指定在哪个网格区域*/\n}\n\n```\n\n### ","source":"_posts/css-drygoods.md","raw":"---\ntitle: css布局方式汇总\ndate: 2020-01-08 09:33:39\ntags:\ncover: /images/ffbackground.webp\n---\n### 一、水平居中 \n\n#####  (1)文本/行内元素/行内块级元素▲ \n\n原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐\n\n```\n#parent{\n    text-align: center;\n}\n```\n\n优缺点\n\n- 优点：简单快捷，容易理解，兼容性非常好\n- 缺点：只对行内内容有效；属性会继承影响到后代行内内容；如果子元素宽度大于父元素宽度则无效，只有后代行内内容中宽度小于设置text-align属性的元素宽度的时候，才会水平居中\n\n#####  (2)单个块级元素▲ \n\n原理：根据[规范](https://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins)介绍得很清楚了，有这么一种情况：在margin有节余的同时如果左右margin设置了auto，将会均分剩余空间。另外，如果上下的margin设置了auto，其计算值为0\n\n```\n#son{\n    width: 100px; /*必须定宽*/\n    margin: 0 auto;\n}\n```\n\n优缺点\n\n- 优点：简单；兼容性好\n- 缺点：必须定宽，并且值不能为auto；宽度要小于父元素，否则无效\n\n#####  (3)多个块级元素 \n\n原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐\n\n```\n#parent{\n    text-align: center;\n}\n.son{\n    display: inline-block; /*改为行内或者行内块级形式，以达到text-align对其生效*/\n}\n```\n\n优缺点\n\n- 优点：简单，容易理解，兼容性非常好\n- 缺点：只对行内内容有效；属性会继承影响到后代行内内容；块级改为inline-block换行、空格会产生元素间隔\n\n#####  (4)使用绝对定位实现▲ \n\n原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的\n\n```\n#parent{\n    height: 200px;\n    width: 200px;  /*定宽*/\n    position: relative;  /*父相*/\n    background-color: #f00;\n}\n#son{\n    position: absolute;  /*子绝*/\n    left: 50%;  /*父元素宽度一半,这里等同于left:100px*/\n    transform: translateX(-50%);  /*自身宽度一半,等同于margin-left: -50px;*/\n    width: 100px;  /*定宽*/\n    height: 100px;\n    background-color: #00ff00;\n}\n```\n\n优缺点\n\n- 优点：使用margin-left兼容性好；不管是块级还是行内元素都可以实现\n- 缺点：代码较多；脱离文档流；使用margin-left需要知道宽度值；使用transform兼容性不好（ie9+）\n\n#####  (5)任意个元素(flex) \n\n原理：就是设置当前主轴对齐方式为居中。说不上为什么，flex无非就是主轴侧轴是重点，然后就是排列方式的设置，可以去看看文末的flex阅读推荐\n\n```\n#parent{\n    display: flex;\n    justify-content: center;\n}\n```\n\n优缺点\n\n- 优点：功能强大；简单方便；容易理解\n- 缺点：PC端[兼容性不好](https://caniuse.com/#search=flex)，移动端（Android4.0+）\n\n#####  本章小结：\n\n- 对于水平居中，我们应该先考虑，哪些元素有自带的居中效果，最先想到的应该就是 `text-align:center` 了，但是这个只对行内内容有效，所以我们要使用 `text-align:center` 就必须将子元素设置为 `display: inline;` 或者 `display: inline-block;` ；\n- 其次就是考虑能不能用`margin: 0 auto;` ，因为这都是一两句代码能搞定的事，实在不行就是用绝对定位去实现了。\n- 移动端能用flex就用flex，简单方便，灵活并且功能强大，无愧为网页布局的一大利器！\n\n###  二、垂直居中 \n\n*一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有*\n\n#####  (1)单行文本/行内元素/行内块级元素▲ \n\n原理：line-height的最终表现是通过inline box实现的，而无论inline box所占据的高度是多少（无论比文字大还是比文字小），其占据的空间都是与文字内容公用水平中垂线的。\n\n```\n#parent{\n    height: 150px;\n    line-height: 150px;  /*与height等值*/\n}\n```\n\n优缺点\n\n- 优点：简单；兼容性好\n- 缺点：只能用于单行行内内容；要知道高度的值\n\n#####  (2)多行文本/行内元素/行内块级元素 \n\n原理同上\n\n```\n#parent{  /*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*/\n    height: 150px;\n    line-height: 30px;  /*元素在页面呈现为5行,则line-height的值为height/5*/\n}\n```\n\n优缺点\n\n- 优点：简单；兼容性好\n- 缺点：只能用于行内内容；需要知道高度和最终呈现多少行来计算出line-height的值，建议用span包裹多行文本\n\n#####  (3)图片▲ \n\n原理：[vertical-align和line-height的基友关系](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)\n\n```\n#parent{\n    height: 150px;\n    line-height: 150px;\n    font-size: 0;\n}\nimg#son{vertical-align: middle;} /*默认是基线对齐，改为middle*/\n```\n\n优缺点\n\n- 优点：简单；兼容性好\n- 缺点：需要添加font-size: 0; 才可以完全的垂直居中；不过需要主要，html#parent包裹img之间需要有换行或空格\n\n#####  (4)单个块级元素 \n\nhtml代码:\n\n```\n<div id=\"parent\">\n    <div id=\"son\"></div>\n</div>\n```\n\n######  (4-1) 使用tabel-cell实现: \n\n原理：CSS Table，使表格内容对齐方式为middle\n\n```\n#parent{\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n\n优缺点\n\n- 优点：简单；宽高不定；兼容性好（ie8+）\n- 缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置display: table; 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素\n\n######  (4-2) 使用绝对定位实现:▲ \n\n```\n/*原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的*/\n#parent{\n    height: 150px;\n    position: relative;  /*父相*/\n}\n#son{\n    position: absolute;  /*子绝*/\n    top: 50%;  /*父元素高度一半,这里等同于top:75px;*/\n    transform: translateY(-50%);  /*自身高度一半,这里等同于margin-top:-25px;*/\n    height: 50px;\n}\n\n/*优缺点\n- 优点：使用margin-top兼容性好；不管是块级还是行内元素都可以实现\n- 缺点：代码较多；脱离文档流；使用margin-top需要知道高度值；使用transform兼容性不好（ie9+）*/\n\n或\n\n/*原理：当top、bottom为0时,margin-top&bottom会无限延伸占满空间并且平分*/\n#parent{position: relative;}\n#son{\n    position: absolute;\n    margin: auto 0;\n    top: 0;\n    bottom: 0;\n    height: 50px;\n}\n\n/*优缺点\n- 优点：简单;兼容性较好(ie8+)\n- 缺点：脱离文档流*/\n```\n\n######  (4-3) 使用flex实现: \n\n原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐\n\n```\n#parent{\n    display: flex;\n    align-items: center;\n}\n\n或\n\n#parent{display: flex;}\n#son{align-self: center;}\n\n或\n/*原理：这个尚未搞清楚，应该是flex使margin上下边界无限延伸至剩余空间并平分了*/\n#parent{display: flex;}\n#son{margin: auto 0;}\n```\n\n优缺点\n\n- 优点：简单灵活；功能强大\n- 缺点：PC端[兼容性不好](https://caniuse.com/#search=flex)，移动端（Android4.0+）\n\n#####  (5)任意个元素(flex) \n\n原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐\n\n```\n#parent{\n    display: flex;\n    align-items: center;\n}\n\n或\n\n#parent{\n    display: flex;\n}\n.son{\n    align-self: center;\n}\n\n或 \n\n#parent{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n```\n\n优缺点\n\n- 优点：简单灵活；功能强大\n- 缺点：PC端[兼容性不好](https://caniuse.com/#search=flex)，移动端（Android4.0+）\n\n#####  ★本章小结：\n\n- 对于垂直居中，最先想到的应该就是 `line-height` 了，但是这个只能用于行内内容；\n- 其次就是考虑能不能用`vertical-align: middle;` ，不过这个一定要熟知原理才能用得顺手，建议看下[vertical-align和line-height的基友关系](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/) ；\n- 然后便是绝对定位，虽然代码多了点，但是胜在适用于不同情况；\n- 移动端兼容性允许的情况下能用flex就用flex\n\n###  三、水平垂直居中 \n\n#####  (1)行内/行内块级/图片▲ \n\n原理：`text-align: center;` 控制行内内容相对于块父元素水平居中,然后就是`line-height`和`vertical-align`的基友关系使其垂直居中，`font-size: 0;` 是为了消除近似居中的bug\n\n```\n#parent{\n    height: 150px;\n    line-height: 150px;  /*行高的值与height相等*/\n    text-align: center;\n    font-size: 0;   /*消除幽灵空白节点的bug*/\n}\n#son{\n    /*display: inline-block;*/  /*如果是块级元素需改为行内或行内块级才生效*/\n    vertical-align: middle;\n}\n```\n\n优缺点\n\n- 优点：代码简单；兼容性好（ie8+）\n- 缺点：只对行内内容有效；需要添加`font-size: 0;` 才可以完全的垂直居中；不过需要注意html中#parent包裹#son之间需要有换行或空格；熟悉`line-height`和`vertical-align`的基友关系较难\n\n#####  (2)table-cell \n\n原理：CSS Table，使表格内容垂直对齐方式为middle,然后根据是行内内容还是块级内容采取不同的方式达到水平居中\n\n```\n#parent{\n    height: 150px;\n    width: 200px;\n    display: table-cell;\n    vertical-align: middle;\n    /*text-align: center;*/   /*如果是行内元素就添加这个*/\n}\n#son{\n    /*margin: 0 auto;*/    /*如果是块级元素就添加这个*/\n    width: 100px;\n    height: 50px;\n}\n```\n\n优缺点\n\n- 优点：简单；适用于宽度高度未知情况；兼容性好（ie8+）\n- 缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置`display: table;` 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素\n\n#####  (3)button作为父元素 \n\n原理：button的默认样式，再把需要居中的元素表现形式改为行内或行内块级就好\n\n```\nbutton#parent{  /*改掉button默认样式就好了,不需要居中处理*/\n    height: 150px;\n    width: 200px;\n    outline: none;  \n    border: none;\n}\n#son{\n    display: inline-block; /*button自带text-align: center,改为行内水平居中生效*/\n}\n```\n\n优缺点\n\n- 优点：简单方便，充分利用默认样式\n- 缺点：只适用于行内内容；需要清除部分默认样式；水平垂直居中兼容性很好，但是ie下点击会有凹陷效果！\n\n#####  (4)绝对定位 \n\n原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到几何上的水平垂直居中\n\n```\n#parent{\n    position: relative;\n}\n#son{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    /*定宽高时等同于margin-left:负自身宽度一半;margin-top:负自身高度一半;*/\n    transform: translate(-50%,-50%); \n}\n```\n\n优缺点\n\n- 优点：使用margin兼容性好；不管是块级还是行内元素都可以实现\n- 缺点：代码较多；脱离文档流；使用margin需要知道宽高；使用transform兼容性不好（ie9+）\n\n#####  (5)绝对居中 \n\n原理：当top、bottom为0时,margin-top&bottom设置auto的话会无限延伸占满空间并且平分；当left、right为0时,margin-left&right设置auto的话会无限延伸占满空间并且平分\n\n```\n#parent{\n    position: relative;\n}\n#son{\n    position: absolute;\n    margin: auto;\n    width: 100px;\n    height: 50px;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n```\n\n优缺点\n\n- 优点：无需关注宽高；兼容性较好(ie8+)\n- 缺点：代码较多；脱离文档流\n\n#####  (6)flex \n\n原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐\n\n```\n#parent{\n    display: flex;\n}\n#son{\n    margin: auto;\n}\n\n或\n\n#parent{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n或\n\n#parent{\n    display: flex;\n    justify-content: center;\n}\n#son{\n    align-self: center;\n}\n复制代码\n```\n\n优缺点\n\n- 优点：简单灵活；功能强大\n- 缺点：PC端[兼容性不好](https://caniuse.com/#search=flex)，移动端（Android4.0+）\n\n#####  (7)视窗居中 \n\n原理：vh为视口单位，视口即文档可视的部分，50vh就是视口高度的50/100，设置50vh上边距再\n\n```\n#son{\n\t/*0如果去掉，则会多出滚动条并且上下都是50vh的margin。如果去掉就给body加上overflow:hidden;*/\n    margin: 50vh auto 0;  \n    transform: translateY(-50%);\n}\n```\n\n优缺点\n\n- 优点：简单；容易理解；两句代码达到屏幕水平垂直居中\n- 缺点：兼容性不好（ie9+，Android4.4+）\n\n#####  ★本章小结：\n\n- 一般情况下，水平垂直居中，我们最常用的就是绝对定位加负边距了，缺点就是需要知道宽高，使用transform倒是可以不需要，但是兼容性不好（ie9+）；\n- 其次就是绝对居中，绝对定位设置top、left、right、bottom为0，然后`margin:auto;` 让浏览器自动平分边距以达到水平垂直居中的目的；\n- 如果是行内/行内块级/图片这些内容，可以优先考虑`line-height`和`vertical-align` 结合使用，不要忘了还有`text-align` ，这个方法代码其实不多，就是理解原理有点困难，想要熟练应对各种情况还需好好研究；\n- 移动端兼容性允许的情况下能用flex就用flex。\n\n###  四、两列布局 \n\n####  4.1 左列定宽,右列自适应 \n\n#####  (1)利用float+margin实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"left\">左列定宽</div>\n<div id=\"right\">右列自适应</div>\n</body>\n复制代码\n```\n\ncss代码:\n\n```\n#left {\n    background-color: #f00;\n    float: left;\n    width: 100px;\n    height: 500px;\n}\n#right {\n    background-color: #0f0;\n    height: 500px;\n    margin-left: 100px; /*大于等于#left的宽度*/\n}\n复制代码\n```\n\n#####  (2)利用float+margin(fix)实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"left\">左列定宽</div>\n<div id=\"right-fix\">\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n复制代码\n```\n\ncss代码:\n\n```\n#left {\n    background-color: #f00;\n    float: left;\n    width: 100px;\n    height: 500px;\n}\n#right-fix {\n    float: right;\n    width: 100%;\n    margin-left: -100px; /*正值大于或等于#left的宽度,才能显示在同一行*/\n}\n#right{\n    margin-left: 100px; /*大于或等于#left的宽度*/\n    background-color: #0f0;\n    height: 500px;\n}\n复制代码\n```\n\n#####  (3)使用float+overflow实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"left\">左列定宽</div>\n<div id=\"right\">右列自适应</div>\n</body>\n复制代码\n```\n\ncss代码:\n\n```\n#left {\n    background-color: #f00;\n    float: left;\n    width: 100px;\n    height: 500px;\n}\n#right {\n    background-color: #0f0;\n    height: 500px;\n    overflow: hidden; /*触发bfc达到自适应*/\n}\n复制代码\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果\n- 缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6\n\n#####  (4)使用table实现 \n\nhtml代码:\n\n```\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n复制代码\n```\n\ncss代码:\n\n```\n#parent{\n    width: 100%;\n    display: table;\n    height: 500px;\n}\n#left {\n    width: 100px;\n    background-color: #f00;\n}\n#right {\n    background-color: #0f0;\n}\n#left,#right{\n    display: table-cell;  /*利用单元格自动分配宽度*/\n}\n复制代码\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果\n- 缺点：margin失效；设置间隔比较麻烦；不支持ie8-\n\n#####  (5)使用绝对定位实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n复制代码\n```\n\ncss代码:\n\n```\n#parent{\n    position: relative;  /*子绝父相*/\n}\n#left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: #f00;\n    width: 100px;\n    height: 500px;\n}\n#right {\n    position: absolute;\n    top: 0;\n    left: 100px;  /*值大于等于#left的宽度*/\n    right: 0;\n    background-color: #0f0;\n    height: 500px;\n}\n```\n\n#####  (6)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n\n```\n\ncss代码:\n\n```\n#parent{\n    width: 100%;\n    height: 500px;\n    display: flex;\n}\n#left {\n    width: 100px;\n    background-color: #f00;\n}\n#right {\n    flex: 1; /*均分了父元素剩余空间*/\n    background-color: #0f0;\n}\n```\n\n#####  (7)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 100%;\n    height: 500px;\n    display: grid;\n    grid-template-columns: 100px auto;  /*设定2列就ok了,auto换成1fr也行*/\n}\n#left {\n    background-color: #f00;\n}\n#right {\n    background-color: #0f0;\n}\n\n```\n\n####  4.2 左列自适应,右列定宽 \n\n效果:\n\n\n#####  (1)使用float+margin实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    height: 500px;\n    padding-left: 100px;  /*抵消#left的margin-left以达到#parent水平居中*/\n}\n#left {\n    width: 100%;\n    height: 500px;\n    float: left;\n    margin-left: -100px; /*正值等于#right的宽度*/\n    background-color: #f00;\n}\n#right {\n    height: 500px;\n    width: 100px;\n    float: right;\n    background-color: #0f0;\n}\n\n```\n\n#####  (2)使用float+overflow实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"right\">右列定宽</div>\n    <div id=\"left\">左列自适应</div>   <!--顺序要换一下-->\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#left {\n    overflow: hidden;  /*触发bfc*/\n    height: 500px;\n    background-color: #f00;\n}\n#right {\n    margin-left: 10px;  /*margin需要定义在#right中*/\n    float: right;\n    width: 100px;\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果\n- 缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6\n\n#####  (3)使用table实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    width: 100%;\n    height: 500px;\n    display: table;\n}\n#left {\n    background-color: #f00;\n    display: table-cell;\n}\n#right {\n    width: 100px;\n    background-color: #0f0;\n    display: table-cell;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果\n- 缺点：margin失效；设置间隔比较麻烦；不支持ie8-\n\n#####  (4)使用绝对定位实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    position: relative;  /*子绝父相*/\n}\n#left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 100px;  /*大于等于#rigth的宽度*/\n    background-color: #f00;\n    height: 500px;\n}\n#right {\n    position: absolute;\n    top: 0;\n    right: 0;\n    background-color: #0f0;\n    width: 100px;\n    height: 500px;\n}\n\n```\n\n#####  (5)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    height: 500px;\n    display: flex;\n}\n#left {\n    flex: 1;\n    background-color: #f00;\n}\n#right {\n    width: 100px;\n    background-color: #0f0;\n}\n\n```\n\n#####  (6)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: grid;\n    grid-template-columns: auto 100px;  /*设定2列,auto换成1fr也行*/\n}\n#left {\n    background-color: #f00;\n}\n#right {\n    background-color: #0f0;\n}\n\n```\n\n####  4.3 一列不定,一列自适应 \n\n(盒子宽度随着内容增加或减少发生变化,另一个盒子自适应)\n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-1.jpg)\n\n\n\n变化后:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-2.jpg)\n\n\n\n#####  (1)使用float+overflow实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列不定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#left {\n    margin-right: 10px;\n    float: left;  /*只设置浮动,不设宽度*/\n    height: 500px;\n    background-color: #f00;\n}\n#right {\n    overflow: hidden;  /*触发bfc*/\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注宽度，利用bfc达到自适应效果\n- 缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6\n\n#####  (2)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列不定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    display: flex;\n}\n#left { /*不设宽度*/\n    margin-right: 10px;\n    height: 500px;\n    background-color: #f00;\n}\n#right {\n    height: 500px;\n    background-color: #0f0;\n    flex: 1;  /*均分#parent剩余的部分*/\n}\n\n```\n\n#####  (3)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列不定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n复制代码\n```\n\ncss代码:\n\n```\n#parent{\n    display: grid;\n    grid-template-columns: auto 1fr;  /*auto和1fr换一下顺序就是左列自适应,右列不定宽了*/\n}\n#left {\n    margin-right: 10px;\n    height: 500px;\n    background-color: #f00;\n}\n#right {\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n*左列自适应,右列不定宽同理(参考4.1和4.3对应代码示例)*\n\n###  五、三列布局 \n\n####  5.1 两列定宽,一列自适应 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-3.jpg)\n\n\n\n#####  (1)使用float+margin实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    min-width: 310px; /*100+10+200,防止宽度不够,子元素换行*/\n}\n#left {\n    margin-right: 10px;  /*#left和#center间隔*/\n    float: left;\n    width: 100px;\n    height: 500px;\n    background-color: #f00;\n}\n#center{\n    float: left;\n    width: 200px;\n    height: 500px;\n    background-color: #eeff2b;\n}\n#right {\n    margin-left: 320px;  /*等于#left和#center的宽度之和加上间隔,多出来的就是#right和#center的间隔*/\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n#####  (2)使用float+overflow实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent{\n    min-width: 320px; /*100+10+200+20,防止宽度不够,子元素换行*/\n}\n#left {\n    margin-right: 10px; /*间隔*/\n    float: left;\n    width: 100px;\n    height: 500px;\n    background-color: #f00;\n}\n#center{\n    margin-right: 10px; /*在此定义和#right的间隔*/\n    float: left;\n    width: 200px;\n    height: 500px;\n    background-color: #eeff2b;\n}\n#right {\n    overflow: hidden;  /*触发bfc*/\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果\n- 缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6\n\n#####  (3)使用table实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 100%; \n    height: 520px; /*抵消上下间距10*2的高度影响*/\n    margin: -10px 0;  /*抵消上下边间距10的位置影响*/\n    display: table;\n    /*左右两边间距大了一点,子元素改用padding设置盒子间距就没有这个问题*/\n    border-spacing: 10px;  /*关键!!!设置间距*/\n}\n#left {\n    display: table-cell;\n    width: 100px;\n    background-color: #f00;\n}\n#center {\n    display: table-cell;\n    width: 200px;\n    background-color: #eeff2b;\n}\n#right {\n    display: table-cell;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果\n- 缺点：margin失效；设置间隔比较麻烦；不支持ie8-\n\n#####  (4)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: flex;\n}\n#left {\n    margin-right: 10px;  /*间距*/\n    width: 100px;\n    background-color: #f00;\n}\n#center {\n    margin-right: 10px;  /*间距*/\n    width: 200px;\n    background-color: #eeff2b;\n}\n#right {\n    flex: 1;  /*均分#parent剩余的部分达到自适应*/\n    background-color: #0f0;\n}\n\n```\n\n#####  (5)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间定宽</div>\n    <div id=\"right\">右列自适应</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: grid;\n    grid-template-columns: 100px 200px auto; /*设置3列,固定第一第二列的宽度,第三列auto或者1fr*/\n}\n#left {\n    margin-right: 10px;  /*间距*/\n    background-color: #f00;\n}\n#center {\n    margin-right: 10px;  /*间距*/\n    background-color: #eeff2b;\n}\n#right {\n    background-color: #0f0;\n}\n\n```\n\n####  5.2 两侧定宽,中间自适应 \n\n#####  5.2.1 双飞翼布局方法 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-4.jpg)\n\n\n\nhtml代码:\n\n```\n<body>\n<div id=\"header\"></div>\n<!--中间栏需要放在前面-->\n<div id=\"parent\">\n    <div id=\"center\">\n        <div id=\"center_inbox\">中间自适应</div>\n        <hr>  <!--方便观察原理-->\n    </div>\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n<div id=\"footer\"></div>\n</body>\n\n```\n\ncss代码:\n\n```\n#header {\n    height: 60px;\n    background-color: #ccc;\n}\n#left {\n    float: left;\n    width: 100px;\n    height: 500px;\n    margin-left: -100%; /*调整#left的位置,值等于自身宽度*/\n    background-color: #f00;\n    opacity: 0.5;\n}\n#center {\n    height: 500px;\n    float: left;\n    width: 100%;\n    background-color: #eeff2b;\n}\n#center_inbox{\n    height: 480px;\n    border: 1px solid #000;\n    margin: 0 220px 0 120px;  /*关键!!!左右边界等于左右盒子的宽度,多出来的为盒子间隔*/\n}\n#right {\n    float: left;\n    width: 200px;\n    height: 500px;\n    margin-left: -200px;  /*使right到指定的位置,值等于自身宽度*/\n    background-color: #0f0;\n    opacity: 0.5;\n}\n#footer {\n    clear: both;  /*注意清除浮动!!*/\n    height: 60px;\n    background-color: #ccc;\n}\n\n```\n\n#####  5.2.2 圣杯布局方法 \n\n\nhtml代码:\n\n```\n<body>\n<div id=\"header\"></div>\n<div id=\"parent\">\n    <!--#center需要放在前面-->\n    <div id=\"center\">中间自适应\n        <hr>\n    </div>\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n<div id=\"footer\"></div>\n</body>\n\n```\n\ncss代码:\n\n```\n#header{\n    height: 60px;\n    background-color: #ccc;\n}\n#parent {\n    box-sizing: border-box;\n    height: 500px;\n    padding: 0 215px 0 115px;  /*为了使#center摆正,左右padding分别等于左右盒子的宽,可以结合左右盒子相对定位的left调整间距*/\n}\n#left {\n    margin-left: -100%;  /*使#left上去一行*/\n    position: relative;\n    left: -115px;  /*相对定位调整#left的位置,正值大于或等于自身宽度*/\n    float: left;\n    width: 100px;\n    height: 500px;\n    background-color: #f00;\n    opacity: 0.5;\n}\n#center {\n    float: left;\n    width: 100%;  /*由于#parent的padding,达到自适应的目的*/\n    height: 500px;\n    box-sizing: border-box;\n    border: 1px solid #000;\n    background-color: #eeff2b;\n}\n#right {\n    position: relative;\n    left: 215px; /*相对定位调整#right的位置,大于或等于自身宽度*/\n    width: 200px;\n    height: 500px;\n    margin-left: -200px;  /*使#right上去一行*/\n    float: left;\n    background-color: #0f0;\n    opacity: 0.5;\n}\n#footer{\n    height: 60px;\n    background-color: #ccc;\n}\n\n```\n\n#####  5.2.3 使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"header\"></div>\n    <!--#center需要放在前面-->\n    <div id=\"center\">中间自适应\n        <hr>\n    </div>\n    <div id=\"left\">左列定宽</div>\n    <div id=\"right\">右列定宽</div>\n    <div id=\"footer\"></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: grid;\n    grid-template-columns: 100px auto 200px; /*设定3列*/\n    grid-template-rows: 60px auto 60px; /*设定3行*/\n    /*设置网格区域分布*/\n    grid-template-areas: \n        \"header header header\" \n        \"leftside main rightside\" \n        \"footer footer footer\";\n}\n#header {\n    grid-area: header; /*指定在哪个网格区域*/\n    background-color: #ccc;\n}\n#left {\n    grid-area: leftside;\n    background-color: #f00;\n    opacity: 0.5;\n}\n#center {\n    grid-area: main; /*指定在哪个网格区域*/\n    margin: 0 15px; /*设置间隔*/\n    border: 1px solid #000;\n    background-color: #eeff2b;\n}\n#right {\n    grid-area: rightside; /*指定在哪个网格区域*/\n    background-color: #0f0;\n    opacity: 0.5;\n}\n#footer {\n    grid-area: footer; /*指定在哪个网格区域*/\n    background-color: #ccc;\n}\n\n```\n\n#####  5.2.4 其他方法 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-5.jpg)\n\n\n\n#####  (1)使用table实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 100%;\n    height: 500px;\n    display: table;\n}\n#left {\n    display: table-cell;\n    width: 100px;\n    background-color: #f00;\n}\n#center {\n    display: table-cell;\n    background-color: #eeff2b;\n}\n#right {\n    display: table-cell;\n    width: 200px;\n    background-color: #0f0;\n}\n\n复制代码\n```\n\n优缺点：\n\n- 优点：代码简洁，容易理解；\n- 缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-\n\n#####  (2)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: flex;\n}\n#left {\n    width: 100px;\n    background-color: #f00;\n}\n#center {\n    flex: 1;  /*均分#parent剩余的部分*/\n    background-color: #eeff2b;\n}\n#right {\n    width: 200px;\n    background-color: #0f0;\n}\n\n```\n\n#####  (3)使用position实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"left\">左列定宽</div>\n    <div id=\"center\">中间自适应</div>\n    <div id=\"right\">右列定宽</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    position: relative; /*子绝父相*/\n}\n#left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100px;\n    height: 500px;\n    background-color: #f00;\n}\n#center {\n    height: 500px;\n    margin-left: 100px; /*大于等于#left的宽度,或者给#parent添加同样大小的padding-left*/\n    margin-right: 200px;  /*大于等于#right的宽度,或者给#parent添加同样大小的padding-right*/\n    background-color: #eeff2b;\n}\n#right {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 200px;\n    height: 500px;\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：容易理解，兼容性比较好\n- 缺点：需手动计算宽度确定边距；脱离文档流；代码繁多\n\n###  六、多列布局 \n\n####  6.1 等宽布局 \n\n#####  6.1.1 四列等宽 \n\n#####  (1)使用float实现 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-6.jpg)\n\n\n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    margin-left: -20px; /*使整体内容看起来居中,抵消padding-left的影响*/\n}\n.column{\n    padding-left: 20px;  /*盒子的边距*/\n    width: 25%;\n    float: left;\n    box-sizing: border-box;\n    border: 1px solid #000;\n    background-clip: content-box; /*背景色从内容开始绘制,方便观察*/\n    height: 500px;\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解；兼容性较好\n- 缺点：需要手动清除浮动，否则会产生高度塌陷\n\n#####  (2)使用table实现 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-7.jpg)\n\n\n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 540px;  /*抵消上下边20*2间距的高度影响*/\n    display: table;\n    margin: -20px 0;  /*抵消上下边20*2间距的位置影响*/\n    /*两边离页面间距较大,改用子元素设置padding来当成间隔就不会有这样的问题*/\n    border-spacing: 20px;  /*设置间距*/\n}\n.column{\n    display: table-cell;\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解；无需关注宽度，单元格自动等分\n- 缺点：margin失效；设置间隔比较麻烦；不支持ie8-\n\n#####  (3)使用flex实现 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-8.jpg)\n\n\n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    margin-left: -15px;  /*使内容看起来居中*/\n    height: 500px;\n    display: flex;\n}\n.column{\n    flex: 1; /*一起平分#parent*/\n    margin-left: 15px; /*设置间距*/\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n#####  多列等宽 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-9.jpg)\n\n\n\n#####  (1)使用float实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">5 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">6 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n}\n.column{\n    float: left;  /*添加浮动*/\n    width: 16.66666666666667%;  /*100÷列数,得出百分比*/\n    height: 500px;\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解；兼容性较好\n- 缺点：需要手动清除浮动，否则会产生高度塌陷\n\n#####  (2)使用table实现 \n\nhtml代码\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">5 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">6 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n```\n\ncss代码:\n\n```\n#parent {\n    width: 100%;\n    height: 500px;\n    display: table;\n}\n.column{\n    display: table-cell; /*无需关注列数,单元格自动平分*/\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简单，容易理解；无需关注宽度。单元格自动等分\n- 缺点：margin失效；设置间隔比较麻烦；不兼容ie8-\n\n#####  (3)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">5 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">6 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: flex;\n}\n.column{\n    flex: 1;  /*无需关注列数,一起平分#parent*/\n}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n#####  (4)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"column\">1 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">2 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">3 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">4 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">5 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n    <div class=\"column\">6 <p>我是文字我是文字我输文字我是文字我是文字</p></div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    height: 500px;\n    display: grid;\n    grid-template-columns: repeat(6,1fr);  /*6就是列数*/\n}\n.column{}\n.column:nth-child(odd){\n    background-color: #f00;\n}\n.column:nth-child(even){\n    background-color: #0f0;\n}\n\n```\n\n####  6.2 九宫格布局 \n\n#####  (1)使用table实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"row\">\n        <div class=\"item\">1</div>\n        <div class=\"item\">2</div>\n        <div class=\"item\">3</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">4</div>\n        <div class=\"item\">5</div>\n        <div class=\"item\">6</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">7</div>\n        <div class=\"item\">8</div>\n        <div class=\"item\">9</div>\n    </div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 1200px;\n    height: 500px;\n    margin: 0 auto;\n    display: table;\n}\n.row {\n    display: table-row;\n}\n.item {\n    border: 1px solid #000;\n    display: table-cell;\n}\n\n```\n\n优缺点：\n\n- 优点：代码简洁，容易理解；\n- 缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-\n\n#####  (2)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"row\">\n        <div class=\"item\">1</div>\n        <div class=\"item\">2</div>\n        <div class=\"item\">3</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">4</div>\n        <div class=\"item\">5</div>\n        <div class=\"item\">6</div>\n    </div>\n    <div class=\"row\">\n        <div class=\"item\">7</div>\n        <div class=\"item\">8</div>\n        <div class=\"item\">9</div>\n    </div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n#parent {\n    width: 1200px;\n    height: 500px;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n}\n.row {\n    display: flex;\n    flex: 1;\n}\n.item {\n    flex: 1;\n    border: 1px solid #000;\n}\n\n```\n\n#####  (3)使用Grid实现 \n\n*CSS Grid非常强大,可以实现各种各样的三维布局,可查阅本文结尾的阅读推荐*\n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div class=\"item\">1</div>\n    <div class=\"item\">2</div>\n    <div class=\"item\">3</div>\n    <div class=\"item\">4</div>\n    <div class=\"item\">5</div>\n    <div class=\"item\">6</div>\n    <div class=\"item\">7</div>\n    <div class=\"item\">8</div>\n    <div class=\"item\">9</div>\n</div>\n</body>\n\n复制代码\n```\n\ncss代码:\n\n```\n#parent {\n    width: 1200px;\n    height: 500px;\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr); /*等同于1fr 1fr 1fr,此为重复的合并写法*/\n    grid-template-rows: repeat(3, 1fr);  /*等同于1fr 1fr 1fr,此为重复的合并写法*/\n}\n.item {\n    border: 1px solid #000;\n}\n\n```\n\n####  6.3 栅格系统 \n\n优缺点：\n\n- 优点：代码简洁，容易理解；提高页面内容的流动性，能适应多种设备；\n\n#####  (1)用Less生成 \n\n```\n/*生成栅格系统*/\n@media screen and (max-width: 768px){\n  .generate-columns(12);     /*此处设置生成列数*/\n  .generate-columns(@n, @i: 1) when (@i <= @n) {\n    .column-xs-@{i} {\n      width: (@i * 100% / @n);\n    }\n    .generate-columns(@n, (@i+1));\n  }\n}\n@media screen and (min-width: 768px){\n  .generate-columns(12);    /*此处设置生成列数*/\n  .generate-columns(@n, @i: 1) when (@i <= @n) {\n    .column-sm-@{i} {\n      width: (@i * 100% / @n);\n    }\n    .generate-columns(@n, (@i+1));\n  }\n}\ndiv[class^=\"column-xs-\"]{\n\tfloat: left;\n}\ndiv[class^=\"column-sm-\"]{\n\tfloat: left;\n}\n```\n\n编译后的CSS代码:\n\n```\n@media screen and (max-width: 768px) {\n  .column-xs-1 {  width: 8.33333333%;  }\n  .column-xs-2 {  width: 16.66666667%;  }\n  .column-xs-3 {  width: 25%;  }\n  .column-xs-4 {  width: 33.33333333%;  }\n  .column-xs-5 {  width: 41.66666667%;  }\n  .column-xs-6 {  width: 50%;  }\n  .column-xs-7 {  width: 58.33333333%;  }\n  .column-xs-8 {  width: 66.66666667%;  }\n  .column-xs-9 {  width: 75%;  }\n  .column-xs-10 {  width: 83.33333333%;  }\n  .column-xs-11 {  width: 91.66666667%;  }\n  .column-xs-12 {  width: 100%;  }\n}\n@media screen and (min-width: 768px) {\n  .column-sm-1 {  width: 8.33333333%;  }\n  .column-sm-2 {  width: 16.66666667%;  }\n  .column-sm-3 {  width: 25%;  }\n  .column-sm-4 {  width: 33.33333333%;  }\n  .column-sm-5 {  width: 41.66666667%;  }\n  .column-sm-6 {  width: 50%;  }\n  .column-sm-7 {  width: 58.33333333%;  }\n  .column-sm-8 {  width: 66.66666667%;  }\n  .column-sm-9 {  width: 75%;  }\n  .column-sm-10 {  width: 83.33333333%;  }\n  .column-sm-11 {  width: 91.66666667%;  }  \n  .column-sm-12 {  width: 100%;  }\n}\ndiv[class^=\"column-xs-\"]{\n\tfloat: left;\n}\ndiv[class^=\"column-sm-\"]{\n\tfloat: left;\n}\n\n```\n\n###  七、全屏布局 \n\n效果图:\n\n\n\n![image.png](http://106.14.74.107/comm-img/css-10.jpg)\n\n\n\n#####  (1)使用绝对定位实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"top\">top</div>\n    <div id=\"left\">left</div>\n    <div id=\"right\">right</div>\n    <div id=\"bottom\">bottom</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\nhtml, body, #parent {height: 100%;overflow: hidden;}\n#parent > div {\n    border: 1px solid #000;\n}\n#top {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 100px;\n}\n#left {\n    position: absolute;\n    top: 100px;  /*值大于等于#top的高度*/\n    left: 0;\n    bottom: 50px;  /*值大于等于#bottom的高度*/\n    width: 200px;\n}\n#right {\n    position: absolute;\n    overflow: auto;\n    left: 200px;  /*值大于等于#left的宽度*/\n    right: 0;\n    top: 100px;  /*值大于等于#top的高度*/\n    bottom: 50px;  /*值大于等于#bottom的高度*/\n}\n#bottom {\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 50px;\n}\n\n```\n\n优缺点：\n\n- 优点：容易理解\n- 缺点：代码繁多；需要计算好各个盒子的宽高；\n\n#####  (2)使用flex实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"top\">top</div>\n    <div id=\"middle\">\n        <div id=\"left\">left</div>\n        <div id=\"right\">right</div>\n    </div>\n    <div id=\"bottom\">bottom</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n*{\n    margin: 0;\n    padding: 0;\n}\nhtml,body,#parent{\n    height:100%;\n}\n#parent {\n    display: flex;\n    flex-direction: column;\n}\n#top {\n    height: 100px;\n}\n#bottom {\n    height: 50px;\n}\n#middle {\n    flex: 1;\n    display: flex;\n}\n#left {\n    width: 200px;\n}\n#right {\n    flex: 1;\n    overflow: auto;\n}\n\n```\n\n#####  (3)使用Grid实现 \n\nhtml代码:\n\n```\n<body>\n<div id=\"parent\">\n    <div id=\"top\">top</div>\n    <div id=\"left\">left</div>\n    <div id=\"right\">right</div>\n    <div id=\"bottom\">bottom</div>\n</div>\n</body>\n\n```\n\ncss代码:\n\n```\n*{\n    margin: 0;\n    padding: 0;\n}\nhtml, body, #parent {\n    height: 100%;\n}\n#parent {\n    width: 100%;\n    height: 100%;\n    display: grid;\n    /*分成2列,第一列宽度200px,第二列1fr平分剩余的部分,此处换成auto也行*/\n    grid-template-columns: 200px 1fr;  \n    /*分成3行,第一行高度100px,第二行auto为自适应,此处换成1fr也行,第3行高度为50px*/\n    grid-template-rows: 100px auto 50px; \n    /*定义网格区域分布*/\n    grid-template-areas:\n        \"header header\"\n        \"aside main\"\n        \"footer footer\";\n}\n#parent>div{\n    border: 1px solid #000;\n}\n#top{\n    grid-area: header;  /*指定在哪个网格区域*/\n}\n#left{\n    grid-area: aside;  /*指定在哪个网格区域*/\n}\n#right{\n    grid-area: main;  /*指定在哪个网格区域*/\n}\n#bottom{\n    grid-area: footer;  /*指定在哪个网格区域*/\n}\n\n```\n\n### ","slug":"css-drygoods","published":1,"updated":"2020-01-15T08:40:54.067Z","_id":"ck5eqn2hy0004yvc97xy62z74","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、水平居中\"><a href=\"#一、水平居中\" class=\"headerlink\" title=\"一、水平居中\"></a>一、水平居中</h3><h5 id=\"1-文本-行内元素-行内块级元素▲\"><a href=\"#1-文本-行内元素-行内块级元素▲\" class=\"headerlink\" title=\"(1)文本/行内元素/行内块级元素▲\"></a>(1)文本/行内元素/行内块级元素▲</h5><p>原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单快捷，容易理解，兼容性非常好</li>\n<li>缺点：只对行内内容有效；属性会继承影响到后代行内内容；如果子元素宽度大于父元素宽度则无效，只有后代行内内容中宽度小于设置text-align属性的元素宽度的时候，才会水平居中</li>\n</ul>\n<h5 id=\"2-单个块级元素▲\"><a href=\"#2-单个块级元素▲\" class=\"headerlink\" title=\"(2)单个块级元素▲\"></a>(2)单个块级元素▲</h5><p>原理：根据<a href=\"https://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins\" target=\"_blank\" rel=\"noopener\">规范</a>介绍得很清楚了，有这么一种情况：在margin有节余的同时如果左右margin设置了auto，将会均分剩余空间。另外，如果上下的margin设置了auto，其计算值为0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#son&#123;</span><br><span class=\"line\">    width: 100px; &#x2F;*必须定宽*&#x2F;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；兼容性好</li>\n<li>缺点：必须定宽，并且值不能为auto；宽度要小于父元素，否则无效</li>\n</ul>\n<h5 id=\"3-多个块级元素\"><a href=\"#3-多个块级元素\" class=\"headerlink\" title=\"(3)多个块级元素\"></a>(3)多个块级元素</h5><p>原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son&#123;</span><br><span class=\"line\">    display: inline-block; &#x2F;*改为行内或者行内块级形式，以达到text-align对其生效*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单，容易理解，兼容性非常好</li>\n<li>缺点：只对行内内容有效；属性会继承影响到后代行内内容；块级改为inline-block换行、空格会产生元素间隔</li>\n</ul>\n<h5 id=\"4-使用绝对定位实现▲\"><a href=\"#4-使用绝对定位实现▲\" class=\"headerlink\" title=\"(4)使用绝对定位实现▲\"></a>(4)使用绝对定位实现▲</h5><p>原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    width: 200px;  &#x2F;*定宽*&#x2F;</span><br><span class=\"line\">    position: relative;  &#x2F;*父相*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;  &#x2F;*子绝*&#x2F;</span><br><span class=\"line\">    left: 50%;  &#x2F;*父元素宽度一半,这里等同于left:100px*&#x2F;</span><br><span class=\"line\">    transform: translateX(-50%);  &#x2F;*自身宽度一半,等同于margin-left: -50px;*&#x2F;</span><br><span class=\"line\">    width: 100px;  &#x2F;*定宽*&#x2F;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background-color: #00ff00;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：使用margin-left兼容性好；不管是块级还是行内元素都可以实现</li>\n<li>缺点：代码较多；脱离文档流；使用margin-left需要知道宽度值；使用transform兼容性不好（ie9+）</li>\n</ul>\n<h5 id=\"5-任意个元素-flex\"><a href=\"#5-任意个元素-flex\" class=\"headerlink\" title=\"(5)任意个元素(flex)\"></a>(5)任意个元素(flex)</h5><p>原理：就是设置当前主轴对齐方式为居中。说不上为什么，flex无非就是主轴侧轴是重点，然后就是排列方式的设置，可以去看看文末的flex阅读推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：功能强大；简单方便；容易理解</li>\n<li>缺点：PC端<a href=\"https://caniuse.com/#search=flex\" target=\"_blank\" rel=\"noopener\">兼容性不好</a>，移动端（Android4.0+）</li>\n</ul>\n<h5 id=\"本章小结：\"><a href=\"#本章小结：\" class=\"headerlink\" title=\"本章小结：\"></a>本章小结：</h5><ul>\n<li>对于水平居中，我们应该先考虑，哪些元素有自带的居中效果，最先想到的应该就是 <code>text-align:center</code> 了，但是这个只对行内内容有效，所以我们要使用 <code>text-align:center</code> 就必须将子元素设置为 <code>display: inline;</code> 或者 <code>display: inline-block;</code> ；</li>\n<li>其次就是考虑能不能用<code>margin: 0 auto;</code> ，因为这都是一两句代码能搞定的事，实在不行就是用绝对定位去实现了。</li>\n<li>移动端能用flex就用flex，简单方便，灵活并且功能强大，无愧为网页布局的一大利器！</li>\n</ul>\n<h3 id=\"二、垂直居中\"><a href=\"#二、垂直居中\" class=\"headerlink\" title=\"二、垂直居中\"></a>二、垂直居中</h3><p><em>一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有</em></p>\n<h5 id=\"1-单行文本-行内元素-行内块级元素▲\"><a href=\"#1-单行文本-行内元素-行内块级元素▲\" class=\"headerlink\" title=\"(1)单行文本/行内元素/行内块级元素▲\"></a>(1)单行文本/行内元素/行内块级元素▲</h5><p>原理：line-height的最终表现是通过inline box实现的，而无论inline box所占据的高度是多少（无论比文字大还是比文字小），其占据的空间都是与文字内容公用水平中垂线的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    line-height: 150px;  &#x2F;*与height等值*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；兼容性好</li>\n<li>缺点：只能用于单行行内内容；要知道高度的值</li>\n</ul>\n<h5 id=\"2-多行文本-行内元素-行内块级元素\"><a href=\"#2-多行文本-行内元素-行内块级元素\" class=\"headerlink\" title=\"(2)多行文本/行内元素/行内块级元素\"></a>(2)多行文本/行内元素/行内块级元素</h5><p>原理同上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;  &#x2F;*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*&#x2F;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    line-height: 30px;  &#x2F;*元素在页面呈现为5行,则line-height的值为height&#x2F;5*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；兼容性好</li>\n<li>缺点：只能用于行内内容；需要知道高度和最终呈现多少行来计算出line-height的值，建议用span包裹多行文本</li>\n</ul>\n<h5 id=\"3-图片▲\"><a href=\"#3-图片▲\" class=\"headerlink\" title=\"(3)图片▲\"></a>(3)图片▲</h5><p>原理：<a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">vertical-align和line-height的基友关系</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    line-height: 150px;</span><br><span class=\"line\">    font-size: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img#son&#123;vertical-align: middle;&#125; &#x2F;*默认是基线对齐，改为middle*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；兼容性好</li>\n<li>缺点：需要添加font-size: 0; 才可以完全的垂直居中；不过需要主要，html#parent包裹img之间需要有换行或空格</li>\n</ul>\n<h5 id=\"4-单个块级元素\"><a href=\"#4-单个块级元素\" class=\"headerlink\" title=\"(4)单个块级元素\"></a>(4)单个块级元素</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4-1-使用tabel-cell实现\"><a href=\"#4-1-使用tabel-cell实现\" class=\"headerlink\" title=\"(4-1) 使用tabel-cell实现:\"></a>(4-1) 使用tabel-cell实现:</h6><p>原理：CSS Table，使表格内容对齐方式为middle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；宽高不定；兼容性好（ie8+）</li>\n<li>缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置display: table; 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素</li>\n</ul>\n<h6 id=\"4-2-使用绝对定位实现-▲\"><a href=\"#4-2-使用绝对定位实现-▲\" class=\"headerlink\" title=\"(4-2) 使用绝对定位实现:▲\"></a>(4-2) 使用绝对定位实现:▲</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的*&#x2F;</span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    position: relative;  &#x2F;*父相*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;  &#x2F;*子绝*&#x2F;</span><br><span class=\"line\">    top: 50%;  &#x2F;*父元素高度一半,这里等同于top:75px;*&#x2F;</span><br><span class=\"line\">    transform: translateY(-50%);  &#x2F;*自身高度一半,这里等同于margin-top:-25px;*&#x2F;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*优缺点</span><br><span class=\"line\">- 优点：使用margin-top兼容性好；不管是块级还是行内元素都可以实现</span><br><span class=\"line\">- 缺点：代码较多；脱离文档流；使用margin-top需要知道高度值；使用transform兼容性不好（ie9+）*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*原理：当top、bottom为0时,margin-top&amp;bottom会无限延伸占满空间并且平分*&#x2F;</span><br><span class=\"line\">#parent&#123;position: relative;&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    margin: auto 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*优缺点</span><br><span class=\"line\">- 优点：简单;兼容性较好(ie8+)</span><br><span class=\"line\">- 缺点：脱离文档流*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4-3-使用flex实现\"><a href=\"#4-3-使用flex实现\" class=\"headerlink\" title=\"(4-3) 使用flex实现:\"></a>(4-3) 使用flex实现:</h6><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;display: flex;&#125;</span><br><span class=\"line\">#son&#123;align-self: center;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\">&#x2F;*原理：这个尚未搞清楚，应该是flex使margin上下边界无限延伸至剩余空间并平分了*&#x2F;</span><br><span class=\"line\">#parent&#123;display: flex;&#125;</span><br><span class=\"line\">#son&#123;margin: auto 0;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单灵活；功能强大</li>\n<li>缺点：PC端<a href=\"https://caniuse.com/#search=flex\" target=\"_blank\" rel=\"noopener\">兼容性不好</a>，移动端（Android4.0+）</li>\n</ul>\n<h5 id=\"5-任意个元素-flex-1\"><a href=\"#5-任意个元素-flex-1\" class=\"headerlink\" title=\"(5)任意个元素(flex)\"></a>(5)任意个元素(flex)</h5><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son&#123;</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或 </span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单灵活；功能强大</li>\n<li>缺点：PC端<a href=\"https://caniuse.com/#search=flex\" target=\"_blank\" rel=\"noopener\">兼容性不好</a>，移动端（Android4.0+）</li>\n</ul>\n<h5 id=\"★本章小结：\"><a href=\"#★本章小结：\" class=\"headerlink\" title=\"★本章小结：\"></a>★本章小结：</h5><ul>\n<li>对于垂直居中，最先想到的应该就是 <code>line-height</code> 了，但是这个只能用于行内内容；</li>\n<li>其次就是考虑能不能用<code>vertical-align: middle;</code> ，不过这个一定要熟知原理才能用得顺手，建议看下<a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">vertical-align和line-height的基友关系</a> ；</li>\n<li>然后便是绝对定位，虽然代码多了点，但是胜在适用于不同情况；</li>\n<li>移动端兼容性允许的情况下能用flex就用flex</li>\n</ul>\n<h3 id=\"三、水平垂直居中\"><a href=\"#三、水平垂直居中\" class=\"headerlink\" title=\"三、水平垂直居中\"></a>三、水平垂直居中</h3><h5 id=\"1-行内-行内块级-图片▲\"><a href=\"#1-行内-行内块级-图片▲\" class=\"headerlink\" title=\"(1)行内/行内块级/图片▲\"></a>(1)行内/行内块级/图片▲</h5><p>原理：<code>text-align: center;</code> 控制行内内容相对于块父元素水平居中,然后就是<code>line-height</code>和<code>vertical-align</code>的基友关系使其垂直居中，<code>font-size: 0;</code> 是为了消除近似居中的bug</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    line-height: 150px;  &#x2F;*行高的值与height相等*&#x2F;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-size: 0;   &#x2F;*消除幽灵空白节点的bug*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    &#x2F;*display: inline-block;*&#x2F;  &#x2F;*如果是块级元素需改为行内或行内块级才生效*&#x2F;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：代码简单；兼容性好（ie8+）</li>\n<li>缺点：只对行内内容有效；需要添加<code>font-size: 0;</code> 才可以完全的垂直居中；不过需要注意html中#parent包裹#son之间需要有换行或空格；熟悉<code>line-height</code>和<code>vertical-align</code>的基友关系较难</li>\n</ul>\n<h5 id=\"2-table-cell\"><a href=\"#2-table-cell\" class=\"headerlink\" title=\"(2)table-cell\"></a>(2)table-cell</h5><p>原理：CSS Table，使表格内容垂直对齐方式为middle,然后根据是行内内容还是块级内容采取不同的方式达到水平居中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    &#x2F;*text-align: center;*&#x2F;   &#x2F;*如果是行内元素就添加这个*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    &#x2F;*margin: 0 auto;*&#x2F;    &#x2F;*如果是块级元素就添加这个*&#x2F;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；适用于宽度高度未知情况；兼容性好（ie8+）</li>\n<li>缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置<code>display: table;</code> 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素</li>\n</ul>\n<h5 id=\"3-button作为父元素\"><a href=\"#3-button作为父元素\" class=\"headerlink\" title=\"(3)button作为父元素\"></a>(3)button作为父元素</h5><p>原理：button的默认样式，再把需要居中的元素表现形式改为行内或行内块级就好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button#parent&#123;  &#x2F;*改掉button默认样式就好了,不需要居中处理*&#x2F;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    outline: none;  </span><br><span class=\"line\">    border: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    display: inline-block; &#x2F;*button自带text-align: center,改为行内水平居中生效*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单方便，充分利用默认样式</li>\n<li>缺点：只适用于行内内容；需要清除部分默认样式；水平垂直居中兼容性很好，但是ie下点击会有凹陷效果！</li>\n</ul>\n<h5 id=\"4-绝对定位\"><a href=\"#4-绝对定位\" class=\"headerlink\" title=\"(4)绝对定位\"></a>(4)绝对定位</h5><p>原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到几何上的水平垂直居中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    &#x2F;*定宽高时等同于margin-left:负自身宽度一半;margin-top:负自身高度一半;*&#x2F;</span><br><span class=\"line\">    transform: translate(-50%,-50%); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：使用margin兼容性好；不管是块级还是行内元素都可以实现</li>\n<li>缺点：代码较多；脱离文档流；使用margin需要知道宽高；使用transform兼容性不好（ie9+）</li>\n</ul>\n<h5 id=\"5-绝对居中\"><a href=\"#5-绝对居中\" class=\"headerlink\" title=\"(5)绝对居中\"></a>(5)绝对居中</h5><p>原理：当top、bottom为0时,margin-top&amp;bottom设置auto的话会无限延伸占满空间并且平分；当left、right为0时,margin-left&amp;right设置auto的话会无限延伸占满空间并且平分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：无需关注宽高；兼容性较好(ie8+)</li>\n<li>缺点：代码较多；脱离文档流</li>\n</ul>\n<h5 id=\"6-flex\"><a href=\"#6-flex\" class=\"headerlink\" title=\"(6)flex\"></a>(6)flex</h5><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单灵活；功能强大</li>\n<li>缺点：PC端<a href=\"https://caniuse.com/#search=flex\" target=\"_blank\" rel=\"noopener\">兼容性不好</a>，移动端（Android4.0+）</li>\n</ul>\n<h5 id=\"7-视窗居中\"><a href=\"#7-视窗居中\" class=\"headerlink\" title=\"(7)视窗居中\"></a>(7)视窗居中</h5><p>原理：vh为视口单位，视口即文档可视的部分，50vh就是视口高度的50/100，设置50vh上边距再</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#son&#123;</span><br><span class=\"line\">\t&#x2F;*0如果去掉，则会多出滚动条并且上下都是50vh的margin。如果去掉就给body加上overflow:hidden;*&#x2F;</span><br><span class=\"line\">    margin: 50vh auto 0;  </span><br><span class=\"line\">    transform: translateY(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；容易理解；两句代码达到屏幕水平垂直居中</li>\n<li>缺点：兼容性不好（ie9+，Android4.4+）</li>\n</ul>\n<h5 id=\"★本章小结：-1\"><a href=\"#★本章小结：-1\" class=\"headerlink\" title=\"★本章小结：\"></a>★本章小结：</h5><ul>\n<li>一般情况下，水平垂直居中，我们最常用的就是绝对定位加负边距了，缺点就是需要知道宽高，使用transform倒是可以不需要，但是兼容性不好（ie9+）；</li>\n<li>其次就是绝对居中，绝对定位设置top、left、right、bottom为0，然后<code>margin:auto;</code> 让浏览器自动平分边距以达到水平垂直居中的目的；</li>\n<li>如果是行内/行内块级/图片这些内容，可以优先考虑<code>line-height</code>和<code>vertical-align</code> 结合使用，不要忘了还有<code>text-align</code> ，这个方法代码其实不多，就是理解原理有点困难，想要熟练应对各种情况还需好好研究；</li>\n<li>移动端兼容性允许的情况下能用flex就用flex。</li>\n</ul>\n<h3 id=\"四、两列布局\"><a href=\"#四、两列布局\" class=\"headerlink\" title=\"四、两列布局\"></a>四、两列布局</h3><h4 id=\"4-1-左列定宽-右列自适应\"><a href=\"#4-1-左列定宽-右列自适应\" class=\"headerlink\" title=\"4.1 左列定宽,右列自适应\"></a>4.1 左列定宽,右列自适应</h4><h5 id=\"1-利用float-margin实现\"><a href=\"#1-利用float-margin实现\" class=\"headerlink\" title=\"(1)利用float+margin实现\"></a>(1)利用float+margin实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: 100px; &#x2F;*大于等于#left的宽度*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-利用float-margin-fix-实现\"><a href=\"#2-利用float-margin-fix-实现\" class=\"headerlink\" title=\"(2)利用float+margin(fix)实现\"></a>(2)利用float+margin(fix)实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;right-fix&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right-fix &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    margin-left: -100px; &#x2F;*正值大于或等于#left的宽度,才能显示在同一行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right&#123;</span><br><span class=\"line\">    margin-left: 100px; &#x2F;*大于或等于#left的宽度*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用float-overflow实现\"><a href=\"#3-使用float-overflow实现\" class=\"headerlink\" title=\"(3)使用float+overflow实现\"></a>(3)使用float+overflow实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    overflow: hidden; &#x2F;*触发bfc达到自适应*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li>\n<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li>\n</ul>\n<h5 id=\"4-使用table实现\"><a href=\"#4-使用table实现\" class=\"headerlink\" title=\"(4)使用table实现\"></a>(4)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left,#right&#123;</span><br><span class=\"line\">    display: table-cell;  &#x2F;*利用单元格自动分配宽度*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li>\n</ul>\n<h5 id=\"5-使用绝对定位实现\"><a href=\"#5-使用绝对定位实现\" class=\"headerlink\" title=\"(5)使用绝对定位实现\"></a>(5)使用绝对定位实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    position: relative;  &#x2F;*子绝父相*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 100px;  &#x2F;*值大于等于#left的宽度*&#x2F;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-使用flex实现\"><a href=\"#6-使用flex实现\" class=\"headerlink\" title=\"(6)使用flex实现\"></a>(6)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    flex: 1; &#x2F;*均分了父元素剩余空间*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-使用Grid实现\"><a href=\"#7-使用Grid实现\" class=\"headerlink\" title=\"(7)使用Grid实现\"></a>(7)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: 100px auto;  &#x2F;*设定2列就ok了,auto换成1fr也行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-左列自适应-右列定宽\"><a href=\"#4-2-左列自适应-右列定宽\" class=\"headerlink\" title=\"4.2 左列自适应,右列定宽\"></a>4.2 左列自适应,右列定宽</h4><p>效果:</p>\n<h5 id=\"1-使用float-margin实现\"><a href=\"#1-使用float-margin实现\" class=\"headerlink\" title=\"(1)使用float+margin实现\"></a>(1)使用float+margin实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    padding-left: 100px;  &#x2F;*抵消#left的margin-left以达到#parent水平居中*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    margin-left: -100px; &#x2F;*正值等于#right的宽度*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-使用float-overflow实现\"><a href=\"#2-使用float-overflow实现\" class=\"headerlink\" title=\"(2)使用float+overflow实现\"></a>(2)使用float+overflow实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;   &lt;!--顺序要换一下--&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    overflow: hidden;  &#x2F;*触发bfc*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    margin-left: 10px;  &#x2F;*margin需要定义在#right中*&#x2F;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li>\n<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li>\n</ul>\n<h5 id=\"3-使用table实现\"><a href=\"#3-使用table实现\" class=\"headerlink\" title=\"(3)使用table实现\"></a>(3)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li>\n</ul>\n<h5 id=\"4-使用绝对定位实现\"><a href=\"#4-使用绝对定位实现\" class=\"headerlink\" title=\"(4)使用绝对定位实现\"></a>(4)使用绝对定位实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    position: relative;  &#x2F;*子绝父相*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 100px;  &#x2F;*大于等于#rigth的宽度*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-使用flex实现\"><a href=\"#5-使用flex实现\" class=\"headerlink\" title=\"(5)使用flex实现\"></a>(5)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-使用Grid实现\"><a href=\"#6-使用Grid实现\" class=\"headerlink\" title=\"(6)使用Grid实现\"></a>(6)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: auto 100px;  &#x2F;*设定2列,auto换成1fr也行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-一列不定-一列自适应\"><a href=\"#4-3-一列不定-一列自适应\" class=\"headerlink\" title=\"4.3 一列不定,一列自适应\"></a>4.3 一列不定,一列自适应</h4><p>(盒子宽度随着内容增加或减少发生变化,另一个盒子自适应)</p>\n<p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-1.jpg\" alt=\"image.png\"></p>\n<p>变化后:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-2.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用float-overflow实现\"><a href=\"#1-使用float-overflow实现\" class=\"headerlink\" title=\"(1)使用float+overflow实现\"></a>(1)使用float+overflow实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">    float: left;  &#x2F;*只设置浮动,不设宽度*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    overflow: hidden;  &#x2F;*触发bfc*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注宽度，利用bfc达到自适应效果</li>\n<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li>\n</ul>\n<h5 id=\"2-使用flex实现\"><a href=\"#2-使用flex实现\" class=\"headerlink\" title=\"(2)使用flex实现\"></a>(2)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123; &#x2F;*不设宽度*&#x2F;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    flex: 1;  &#x2F;*均分#parent剩余的部分*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用Grid实现\"><a href=\"#3-使用Grid实现\" class=\"headerlink\" title=\"(3)使用Grid实现\"></a>(3)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: auto 1fr;  &#x2F;*auto和1fr换一下顺序就是左列自适应,右列不定宽了*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>左列自适应,右列不定宽同理(参考4.1和4.3对应代码示例)</em></p>\n<h3 id=\"五、三列布局\"><a href=\"#五、三列布局\" class=\"headerlink\" title=\"五、三列布局\"></a>五、三列布局</h3><h4 id=\"5-1-两列定宽-一列自适应\"><a href=\"#5-1-两列定宽-一列自适应\" class=\"headerlink\" title=\"5.1 两列定宽,一列自适应\"></a>5.1 两列定宽,一列自适应</h4><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-3.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用float-margin实现-1\"><a href=\"#1-使用float-margin实现-1\" class=\"headerlink\" title=\"(1)使用float+margin实现\"></a>(1)使用float+margin实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    min-width: 310px; &#x2F;*100+10+200,防止宽度不够,子元素换行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*#left和#center间隔*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    margin-left: 320px;  &#x2F;*等于#left和#center的宽度之和加上间隔,多出来的就是#right和#center的间隔*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-使用float-overflow实现-1\"><a href=\"#2-使用float-overflow实现-1\" class=\"headerlink\" title=\"(2)使用float+overflow实现\"></a>(2)使用float+overflow实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    min-width: 320px; &#x2F;*100+10+200+20,防止宽度不够,子元素换行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px; &#x2F;*间隔*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center&#123;</span><br><span class=\"line\">    margin-right: 10px; &#x2F;*在此定义和#right的间隔*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    overflow: hidden;  &#x2F;*触发bfc*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li>\n<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li>\n</ul>\n<h5 id=\"3-使用table实现-1\"><a href=\"#3-使用table实现-1\" class=\"headerlink\" title=\"(3)使用table实现\"></a>(3)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%; </span><br><span class=\"line\">    height: 520px; &#x2F;*抵消上下间距10*2的高度影响*&#x2F;</span><br><span class=\"line\">    margin: -10px 0;  &#x2F;*抵消上下边间距10的位置影响*&#x2F;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    &#x2F;*左右两边间距大了一点,子元素改用padding设置盒子间距就没有这个问题*&#x2F;</span><br><span class=\"line\">    border-spacing: 10px;  &#x2F;*关键!!!设置间距*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li>\n</ul>\n<h5 id=\"4-使用flex实现\"><a href=\"#4-使用flex实现\" class=\"headerlink\" title=\"(4)使用flex实现\"></a>(4)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*间距*&#x2F;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*间距*&#x2F;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    flex: 1;  &#x2F;*均分#parent剩余的部分达到自适应*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-使用Grid实现\"><a href=\"#5-使用Grid实现\" class=\"headerlink\" title=\"(5)使用Grid实现\"></a>(5)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: 100px 200px auto; &#x2F;*设置3列,固定第一第二列的宽度,第三列auto或者1fr*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*间距*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*间距*&#x2F;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-两侧定宽-中间自适应\"><a href=\"#5-2-两侧定宽-中间自适应\" class=\"headerlink\" title=\"5.2 两侧定宽,中间自适应\"></a>5.2 两侧定宽,中间自适应</h4><h5 id=\"5-2-1-双飞翼布局方法\"><a href=\"#5-2-1-双飞翼布局方法\" class=\"headerlink\" title=\"5.2.1 双飞翼布局方法\"></a>5.2.1 双飞翼布局方法</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-4.jpg\" alt=\"image.png\"></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;!--中间栏需要放在前面--&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;</span><br><span class=\"line\">        &lt;div id&#x3D;&quot;center_inbox&quot;&gt;中间自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;hr&gt;  &lt;!--方便观察原理--&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#header &#123;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: -100%; &#x2F;*调整#left的位置,值等于自身宽度*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center_inbox&#123;</span><br><span class=\"line\">    height: 480px;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    margin: 0 220px 0 120px;  &#x2F;*关键!!!左右边界等于左右盒子的宽度,多出来的为盒子间隔*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: -200px;  &#x2F;*使right到指定的位置,值等于自身宽度*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#footer &#123;</span><br><span class=\"line\">    clear: both;  &#x2F;*注意清除浮动!!*&#x2F;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-2-圣杯布局方法\"><a href=\"#5-2-2-圣杯布局方法\" class=\"headerlink\" title=\"5.2.2 圣杯布局方法\"></a>5.2.2 圣杯布局方法</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;!--#center需要放在前面--&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应</span><br><span class=\"line\">        &lt;hr&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#header&#123;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    padding: 0 215px 0 115px;  &#x2F;*为了使#center摆正,左右padding分别等于左右盒子的宽,可以结合左右盒子相对定位的left调整间距*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-left: -100%;  &#x2F;*使#left上去一行*&#x2F;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    left: -115px;  &#x2F;*相对定位调整#left的位置,正值大于或等于自身宽度*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100%;  &#x2F;*由于#parent的padding,达到自适应的目的*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    left: 215px; &#x2F;*相对定位调整#right的位置,大于或等于自身宽度*&#x2F;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: -200px;  &#x2F;*使#right上去一行*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#footer&#123;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-3-使用Grid实现\"><a href=\"#5-2-3-使用Grid实现\" class=\"headerlink\" title=\"5.2.3 使用Grid实现\"></a>5.2.3 使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;!--#center需要放在前面--&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应</span><br><span class=\"line\">        &lt;hr&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: 100px auto 200px; &#x2F;*设定3列*&#x2F;</span><br><span class=\"line\">    grid-template-rows: 60px auto 60px; &#x2F;*设定3行*&#x2F;</span><br><span class=\"line\">    &#x2F;*设置网格区域分布*&#x2F;</span><br><span class=\"line\">    grid-template-areas: </span><br><span class=\"line\">        &quot;header header header&quot; </span><br><span class=\"line\">        &quot;leftside main rightside&quot; </span><br><span class=\"line\">        &quot;footer footer footer&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#header &#123;</span><br><span class=\"line\">    grid-area: header; &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    grid-area: leftside;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    grid-area: main; &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">    margin: 0 15px; &#x2F;*设置间隔*&#x2F;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    grid-area: rightside; &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#footer &#123;</span><br><span class=\"line\">    grid-area: footer; &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-4-其他方法\"><a href=\"#5-2-4-其他方法\" class=\"headerlink\" title=\"5.2.4 其他方法\"></a>5.2.4 其他方法</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-5.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用table实现\"><a href=\"#1-使用table实现\" class=\"headerlink\" title=\"(1)使用table实现\"></a>(1)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简洁，容易理解；</li>\n<li>缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-</li>\n</ul>\n<h5 id=\"2-使用flex实现-1\"><a href=\"#2-使用flex实现-1\" class=\"headerlink\" title=\"(2)使用flex实现\"></a>(2)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    flex: 1;  &#x2F;*均分#parent剩余的部分*&#x2F;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用position实现\"><a href=\"#3-使用position实现\" class=\"headerlink\" title=\"(3)使用position实现\"></a>(3)使用position实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    position: relative; &#x2F;*子绝父相*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: 100px; &#x2F;*大于等于#left的宽度,或者给#parent添加同样大小的padding-left*&#x2F;</span><br><span class=\"line\">    margin-right: 200px;  &#x2F;*大于等于#right的宽度,或者给#parent添加同样大小的padding-right*&#x2F;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：容易理解，兼容性比较好</li>\n<li>缺点：需手动计算宽度确定边距；脱离文档流；代码繁多</li>\n</ul>\n<h3 id=\"六、多列布局\"><a href=\"#六、多列布局\" class=\"headerlink\" title=\"六、多列布局\"></a>六、多列布局</h3><h4 id=\"6-1-等宽布局\"><a href=\"#6-1-等宽布局\" class=\"headerlink\" title=\"6.1 等宽布局\"></a>6.1 等宽布局</h4><h5 id=\"6-1-1-四列等宽\"><a href=\"#6-1-1-四列等宽\" class=\"headerlink\" title=\"6.1.1 四列等宽\"></a>6.1.1 四列等宽</h5><h5 id=\"1-使用float实现\"><a href=\"#1-使用float实现\" class=\"headerlink\" title=\"(1)使用float实现\"></a>(1)使用float实现</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-6.jpg\" alt=\"image.png\"></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    margin-left: -20px; &#x2F;*使整体内容看起来居中,抵消padding-left的影响*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    padding-left: 20px;  &#x2F;*盒子的边距*&#x2F;</span><br><span class=\"line\">    width: 25%;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    background-clip: content-box; &#x2F;*背景色从内容开始绘制,方便观察*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解；兼容性较好</li>\n<li>缺点：需要手动清除浮动，否则会产生高度塌陷</li>\n</ul>\n<h5 id=\"2-使用table实现\"><a href=\"#2-使用table实现\" class=\"headerlink\" title=\"(2)使用table实现\"></a>(2)使用table实现</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-7.jpg\" alt=\"image.png\"></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 540px;  &#x2F;*抵消上下边20*2间距的高度影响*&#x2F;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    margin: -20px 0;  &#x2F;*抵消上下边20*2间距的位置影响*&#x2F;</span><br><span class=\"line\">    &#x2F;*两边离页面间距较大,改用子元素设置padding来当成间隔就不会有这样的问题*&#x2F;</span><br><span class=\"line\">    border-spacing: 20px;  &#x2F;*设置间距*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解；无需关注宽度，单元格自动等分</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li>\n</ul>\n<h5 id=\"3-使用flex实现\"><a href=\"#3-使用flex实现\" class=\"headerlink\" title=\"(3)使用flex实现\"></a>(3)使用flex实现</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-8.jpg\" alt=\"image.png\"></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    margin-left: -15px;  &#x2F;*使内容看起来居中*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    flex: 1; &#x2F;*一起平分#parent*&#x2F;</span><br><span class=\"line\">    margin-left: 15px; &#x2F;*设置间距*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多列等宽\"><a href=\"#多列等宽\" class=\"headerlink\" title=\"多列等宽\"></a>多列等宽</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-9.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用float实现-1\"><a href=\"#1-使用float实现-1\" class=\"headerlink\" title=\"(1)使用float实现\"></a>(1)使用float实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    float: left;  &#x2F;*添加浮动*&#x2F;</span><br><span class=\"line\">    width: 16.66666666666667%;  &#x2F;*100÷列数,得出百分比*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解；兼容性较好</li>\n<li>缺点：需要手动清除浮动，否则会产生高度塌陷</li>\n</ul>\n<h5 id=\"2-使用table实现-1\"><a href=\"#2-使用table实现-1\" class=\"headerlink\" title=\"(2)使用table实现\"></a>(2)使用table实现</h5><p>html代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    display: table-cell; &#x2F;*无需关注列数,单元格自动平分*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解；无需关注宽度。单元格自动等分</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不兼容ie8-</li>\n</ul>\n<h5 id=\"3-使用flex实现-1\"><a href=\"#3-使用flex实现-1\" class=\"headerlink\" title=\"(3)使用flex实现\"></a>(3)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    flex: 1;  &#x2F;*无需关注列数,一起平分#parent*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-使用Grid实现\"><a href=\"#4-使用Grid实现\" class=\"headerlink\" title=\"(4)使用Grid实现\"></a>(4)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: repeat(6,1fr);  &#x2F;*6就是列数*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-2-九宫格布局\"><a href=\"#6-2-九宫格布局\" class=\"headerlink\" title=\"6.2 九宫格布局\"></a>6.2 九宫格布局</h4><h5 id=\"1-使用table实现-1\"><a href=\"#1-使用table实现-1\" class=\"headerlink\" title=\"(1)使用table实现\"></a>(1)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 1200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.row &#123;</span><br><span class=\"line\">    display: table-row;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简洁，容易理解；</li>\n<li>缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-</li>\n</ul>\n<h5 id=\"2-使用flex实现-2\"><a href=\"#2-使用flex实现-2\" class=\"headerlink\" title=\"(2)使用flex实现\"></a>(2)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 1200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.row &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用Grid实现-1\"><a href=\"#3-使用Grid实现-1\" class=\"headerlink\" title=\"(3)使用Grid实现\"></a>(3)使用Grid实现</h5><p><em>CSS Grid非常强大,可以实现各种各样的三维布局,可查阅本文结尾的阅读推荐</em></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 1200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: repeat(3, 1fr); &#x2F;*等同于1fr 1fr 1fr,此为重复的合并写法*&#x2F;</span><br><span class=\"line\">    grid-template-rows: repeat(3, 1fr);  &#x2F;*等同于1fr 1fr 1fr,此为重复的合并写法*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-3-栅格系统\"><a href=\"#6-3-栅格系统\" class=\"headerlink\" title=\"6.3 栅格系统\"></a>6.3 栅格系统</h4><p>优缺点：</p>\n<ul>\n<li>优点：代码简洁，容易理解；提高页面内容的流动性，能适应多种设备；</li>\n</ul>\n<h5 id=\"1-用Less生成\"><a href=\"#1-用Less生成\" class=\"headerlink\" title=\"(1)用Less生成\"></a>(1)用Less生成</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*生成栅格系统*&#x2F;</span><br><span class=\"line\">@media screen and (max-width: 768px)&#123;</span><br><span class=\"line\">  .generate-columns(12);     &#x2F;*此处设置生成列数*&#x2F;</span><br><span class=\"line\">  .generate-columns(@n, @i: 1) when (@i &lt;&#x3D; @n) &#123;</span><br><span class=\"line\">    .column-xs-@&#123;i&#125; &#123;</span><br><span class=\"line\">      width: (@i * 100% &#x2F; @n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .generate-columns(@n, (@i+1));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media screen and (min-width: 768px)&#123;</span><br><span class=\"line\">  .generate-columns(12);    &#x2F;*此处设置生成列数*&#x2F;</span><br><span class=\"line\">  .generate-columns(@n, @i: 1) when (@i &lt;&#x3D; @n) &#123;</span><br><span class=\"line\">    .column-sm-@&#123;i&#125; &#123;</span><br><span class=\"line\">      width: (@i * 100% &#x2F; @n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .generate-columns(@n, (@i+1));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div[class^&#x3D;&quot;column-xs-&quot;]&#123;</span><br><span class=\"line\">\tfloat: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div[class^&#x3D;&quot;column-sm-&quot;]&#123;</span><br><span class=\"line\">\tfloat: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译后的CSS代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 768px) &#123;</span><br><span class=\"line\">  .column-xs-1 &#123;  width: 8.33333333%;  &#125;</span><br><span class=\"line\">  .column-xs-2 &#123;  width: 16.66666667%;  &#125;</span><br><span class=\"line\">  .column-xs-3 &#123;  width: 25%;  &#125;</span><br><span class=\"line\">  .column-xs-4 &#123;  width: 33.33333333%;  &#125;</span><br><span class=\"line\">  .column-xs-5 &#123;  width: 41.66666667%;  &#125;</span><br><span class=\"line\">  .column-xs-6 &#123;  width: 50%;  &#125;</span><br><span class=\"line\">  .column-xs-7 &#123;  width: 58.33333333%;  &#125;</span><br><span class=\"line\">  .column-xs-8 &#123;  width: 66.66666667%;  &#125;</span><br><span class=\"line\">  .column-xs-9 &#123;  width: 75%;  &#125;</span><br><span class=\"line\">  .column-xs-10 &#123;  width: 83.33333333%;  &#125;</span><br><span class=\"line\">  .column-xs-11 &#123;  width: 91.66666667%;  &#125;</span><br><span class=\"line\">  .column-xs-12 &#123;  width: 100%;  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media screen and (min-width: 768px) &#123;</span><br><span class=\"line\">  .column-sm-1 &#123;  width: 8.33333333%;  &#125;</span><br><span class=\"line\">  .column-sm-2 &#123;  width: 16.66666667%;  &#125;</span><br><span class=\"line\">  .column-sm-3 &#123;  width: 25%;  &#125;</span><br><span class=\"line\">  .column-sm-4 &#123;  width: 33.33333333%;  &#125;</span><br><span class=\"line\">  .column-sm-5 &#123;  width: 41.66666667%;  &#125;</span><br><span class=\"line\">  .column-sm-6 &#123;  width: 50%;  &#125;</span><br><span class=\"line\">  .column-sm-7 &#123;  width: 58.33333333%;  &#125;</span><br><span class=\"line\">  .column-sm-8 &#123;  width: 66.66666667%;  &#125;</span><br><span class=\"line\">  .column-sm-9 &#123;  width: 75%;  &#125;</span><br><span class=\"line\">  .column-sm-10 &#123;  width: 83.33333333%;  &#125;</span><br><span class=\"line\">  .column-sm-11 &#123;  width: 91.66666667%;  &#125;  </span><br><span class=\"line\">  .column-sm-12 &#123;  width: 100%;  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div[class^&#x3D;&quot;column-xs-&quot;]&#123;</span><br><span class=\"line\">\tfloat: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div[class^&#x3D;&quot;column-sm-&quot;]&#123;</span><br><span class=\"line\">\tfloat: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、全屏布局\"><a href=\"#七、全屏布局\" class=\"headerlink\" title=\"七、全屏布局\"></a>七、全屏布局</h3><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-10.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用绝对定位实现\"><a href=\"#1-使用绝对定位实现\" class=\"headerlink\" title=\"(1)使用绝对定位实现\"></a>(1)使用绝对定位实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body, #parent &#123;height: 100%;overflow: hidden;&#125;</span><br><span class=\"line\">#parent &gt; div &#123;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#top &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 100px;  &#x2F;*值大于等于#top的高度*&#x2F;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    bottom: 50px;  &#x2F;*值大于等于#bottom的高度*&#x2F;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    overflow: auto;</span><br><span class=\"line\">    left: 200px;  &#x2F;*值大于等于#left的宽度*&#x2F;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    top: 100px;  &#x2F;*值大于等于#top的高度*&#x2F;</span><br><span class=\"line\">    bottom: 50px;  &#x2F;*值大于等于#bottom的高度*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#bottom &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：容易理解</li>\n<li>缺点：代码繁多；需要计算好各个盒子的宽高；</li>\n</ul>\n<h5 id=\"2-使用flex实现-3\"><a href=\"#2-使用flex实现-3\" class=\"headerlink\" title=\"(2)使用flex实现\"></a>(2)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;middle&quot;&gt;</span><br><span class=\"line\">        &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html,body,#parent&#123;</span><br><span class=\"line\">    height:100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#top &#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#bottom &#123;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#middle &#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    overflow: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用Grid实现-2\"><a href=\"#3-使用Grid实现-2\" class=\"headerlink\" title=\"(3)使用Grid实现\"></a>(3)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html, body, #parent &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    &#x2F;*分成2列,第一列宽度200px,第二列1fr平分剩余的部分,此处换成auto也行*&#x2F;</span><br><span class=\"line\">    grid-template-columns: 200px 1fr;  </span><br><span class=\"line\">    &#x2F;*分成3行,第一行高度100px,第二行auto为自适应,此处换成1fr也行,第3行高度为50px*&#x2F;</span><br><span class=\"line\">    grid-template-rows: 100px auto 50px; </span><br><span class=\"line\">    &#x2F;*定义网格区域分布*&#x2F;</span><br><span class=\"line\">    grid-template-areas:</span><br><span class=\"line\">        &quot;header header&quot;</span><br><span class=\"line\">        &quot;aside main&quot;</span><br><span class=\"line\">        &quot;footer footer&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#parent&gt;div&#123;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#top&#123;</span><br><span class=\"line\">    grid-area: header;  &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left&#123;</span><br><span class=\"line\">    grid-area: aside;  &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right&#123;</span><br><span class=\"line\">    grid-area: main;  &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#bottom&#123;</span><br><span class=\"line\">    grid-area: footer;  &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、水平居中\"><a href=\"#一、水平居中\" class=\"headerlink\" title=\"一、水平居中\"></a>一、水平居中</h3><h5 id=\"1-文本-行内元素-行内块级元素▲\"><a href=\"#1-文本-行内元素-行内块级元素▲\" class=\"headerlink\" title=\"(1)文本/行内元素/行内块级元素▲\"></a>(1)文本/行内元素/行内块级元素▲</h5><p>原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单快捷，容易理解，兼容性非常好</li>\n<li>缺点：只对行内内容有效；属性会继承影响到后代行内内容；如果子元素宽度大于父元素宽度则无效，只有后代行内内容中宽度小于设置text-align属性的元素宽度的时候，才会水平居中</li>\n</ul>\n<h5 id=\"2-单个块级元素▲\"><a href=\"#2-单个块级元素▲\" class=\"headerlink\" title=\"(2)单个块级元素▲\"></a>(2)单个块级元素▲</h5><p>原理：根据<a href=\"https://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins\" target=\"_blank\" rel=\"noopener\">规范</a>介绍得很清楚了，有这么一种情况：在margin有节余的同时如果左右margin设置了auto，将会均分剩余空间。另外，如果上下的margin设置了auto，其计算值为0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#son&#123;</span><br><span class=\"line\">    width: 100px; &#x2F;*必须定宽*&#x2F;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；兼容性好</li>\n<li>缺点：必须定宽，并且值不能为auto；宽度要小于父元素，否则无效</li>\n</ul>\n<h5 id=\"3-多个块级元素\"><a href=\"#3-多个块级元素\" class=\"headerlink\" title=\"(3)多个块级元素\"></a>(3)多个块级元素</h5><p>原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son&#123;</span><br><span class=\"line\">    display: inline-block; &#x2F;*改为行内或者行内块级形式，以达到text-align对其生效*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单，容易理解，兼容性非常好</li>\n<li>缺点：只对行内内容有效；属性会继承影响到后代行内内容；块级改为inline-block换行、空格会产生元素间隔</li>\n</ul>\n<h5 id=\"4-使用绝对定位实现▲\"><a href=\"#4-使用绝对定位实现▲\" class=\"headerlink\" title=\"(4)使用绝对定位实现▲\"></a>(4)使用绝对定位实现▲</h5><p>原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    width: 200px;  &#x2F;*定宽*&#x2F;</span><br><span class=\"line\">    position: relative;  &#x2F;*父相*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;  &#x2F;*子绝*&#x2F;</span><br><span class=\"line\">    left: 50%;  &#x2F;*父元素宽度一半,这里等同于left:100px*&#x2F;</span><br><span class=\"line\">    transform: translateX(-50%);  &#x2F;*自身宽度一半,等同于margin-left: -50px;*&#x2F;</span><br><span class=\"line\">    width: 100px;  &#x2F;*定宽*&#x2F;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background-color: #00ff00;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：使用margin-left兼容性好；不管是块级还是行内元素都可以实现</li>\n<li>缺点：代码较多；脱离文档流；使用margin-left需要知道宽度值；使用transform兼容性不好（ie9+）</li>\n</ul>\n<h5 id=\"5-任意个元素-flex\"><a href=\"#5-任意个元素-flex\" class=\"headerlink\" title=\"(5)任意个元素(flex)\"></a>(5)任意个元素(flex)</h5><p>原理：就是设置当前主轴对齐方式为居中。说不上为什么，flex无非就是主轴侧轴是重点，然后就是排列方式的设置，可以去看看文末的flex阅读推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：功能强大；简单方便；容易理解</li>\n<li>缺点：PC端<a href=\"https://caniuse.com/#search=flex\" target=\"_blank\" rel=\"noopener\">兼容性不好</a>，移动端（Android4.0+）</li>\n</ul>\n<h5 id=\"本章小结：\"><a href=\"#本章小结：\" class=\"headerlink\" title=\"本章小结：\"></a>本章小结：</h5><ul>\n<li>对于水平居中，我们应该先考虑，哪些元素有自带的居中效果，最先想到的应该就是 <code>text-align:center</code> 了，但是这个只对行内内容有效，所以我们要使用 <code>text-align:center</code> 就必须将子元素设置为 <code>display: inline;</code> 或者 <code>display: inline-block;</code> ；</li>\n<li>其次就是考虑能不能用<code>margin: 0 auto;</code> ，因为这都是一两句代码能搞定的事，实在不行就是用绝对定位去实现了。</li>\n<li>移动端能用flex就用flex，简单方便，灵活并且功能强大，无愧为网页布局的一大利器！</li>\n</ul>\n<h3 id=\"二、垂直居中\"><a href=\"#二、垂直居中\" class=\"headerlink\" title=\"二、垂直居中\"></a>二、垂直居中</h3><p><em>一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有</em></p>\n<h5 id=\"1-单行文本-行内元素-行内块级元素▲\"><a href=\"#1-单行文本-行内元素-行内块级元素▲\" class=\"headerlink\" title=\"(1)单行文本/行内元素/行内块级元素▲\"></a>(1)单行文本/行内元素/行内块级元素▲</h5><p>原理：line-height的最终表现是通过inline box实现的，而无论inline box所占据的高度是多少（无论比文字大还是比文字小），其占据的空间都是与文字内容公用水平中垂线的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    line-height: 150px;  &#x2F;*与height等值*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；兼容性好</li>\n<li>缺点：只能用于单行行内内容；要知道高度的值</li>\n</ul>\n<h5 id=\"2-多行文本-行内元素-行内块级元素\"><a href=\"#2-多行文本-行内元素-行内块级元素\" class=\"headerlink\" title=\"(2)多行文本/行内元素/行内块级元素\"></a>(2)多行文本/行内元素/行内块级元素</h5><p>原理同上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;  &#x2F;*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*&#x2F;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    line-height: 30px;  &#x2F;*元素在页面呈现为5行,则line-height的值为height&#x2F;5*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；兼容性好</li>\n<li>缺点：只能用于行内内容；需要知道高度和最终呈现多少行来计算出line-height的值，建议用span包裹多行文本</li>\n</ul>\n<h5 id=\"3-图片▲\"><a href=\"#3-图片▲\" class=\"headerlink\" title=\"(3)图片▲\"></a>(3)图片▲</h5><p>原理：<a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">vertical-align和line-height的基友关系</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    line-height: 150px;</span><br><span class=\"line\">    font-size: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img#son&#123;vertical-align: middle;&#125; &#x2F;*默认是基线对齐，改为middle*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；兼容性好</li>\n<li>缺点：需要添加font-size: 0; 才可以完全的垂直居中；不过需要主要，html#parent包裹img之间需要有换行或空格</li>\n</ul>\n<h5 id=\"4-单个块级元素\"><a href=\"#4-单个块级元素\" class=\"headerlink\" title=\"(4)单个块级元素\"></a>(4)单个块级元素</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4-1-使用tabel-cell实现\"><a href=\"#4-1-使用tabel-cell实现\" class=\"headerlink\" title=\"(4-1) 使用tabel-cell实现:\"></a>(4-1) 使用tabel-cell实现:</h6><p>原理：CSS Table，使表格内容对齐方式为middle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；宽高不定；兼容性好（ie8+）</li>\n<li>缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置display: table; 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素</li>\n</ul>\n<h6 id=\"4-2-使用绝对定位实现-▲\"><a href=\"#4-2-使用绝对定位实现-▲\" class=\"headerlink\" title=\"(4-2) 使用绝对定位实现:▲\"></a>(4-2) 使用绝对定位实现:▲</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的*&#x2F;</span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    position: relative;  &#x2F;*父相*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;  &#x2F;*子绝*&#x2F;</span><br><span class=\"line\">    top: 50%;  &#x2F;*父元素高度一半,这里等同于top:75px;*&#x2F;</span><br><span class=\"line\">    transform: translateY(-50%);  &#x2F;*自身高度一半,这里等同于margin-top:-25px;*&#x2F;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*优缺点</span><br><span class=\"line\">- 优点：使用margin-top兼容性好；不管是块级还是行内元素都可以实现</span><br><span class=\"line\">- 缺点：代码较多；脱离文档流；使用margin-top需要知道高度值；使用transform兼容性不好（ie9+）*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*原理：当top、bottom为0时,margin-top&amp;bottom会无限延伸占满空间并且平分*&#x2F;</span><br><span class=\"line\">#parent&#123;position: relative;&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    margin: auto 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*优缺点</span><br><span class=\"line\">- 优点：简单;兼容性较好(ie8+)</span><br><span class=\"line\">- 缺点：脱离文档流*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4-3-使用flex实现\"><a href=\"#4-3-使用flex实现\" class=\"headerlink\" title=\"(4-3) 使用flex实现:\"></a>(4-3) 使用flex实现:</h6><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;display: flex;&#125;</span><br><span class=\"line\">#son&#123;align-self: center;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\">&#x2F;*原理：这个尚未搞清楚，应该是flex使margin上下边界无限延伸至剩余空间并平分了*&#x2F;</span><br><span class=\"line\">#parent&#123;display: flex;&#125;</span><br><span class=\"line\">#son&#123;margin: auto 0;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单灵活；功能强大</li>\n<li>缺点：PC端<a href=\"https://caniuse.com/#search=flex\" target=\"_blank\" rel=\"noopener\">兼容性不好</a>，移动端（Android4.0+）</li>\n</ul>\n<h5 id=\"5-任意个元素-flex-1\"><a href=\"#5-任意个元素-flex-1\" class=\"headerlink\" title=\"(5)任意个元素(flex)\"></a>(5)任意个元素(flex)</h5><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son&#123;</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或 </span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单灵活；功能强大</li>\n<li>缺点：PC端<a href=\"https://caniuse.com/#search=flex\" target=\"_blank\" rel=\"noopener\">兼容性不好</a>，移动端（Android4.0+）</li>\n</ul>\n<h5 id=\"★本章小结：\"><a href=\"#★本章小结：\" class=\"headerlink\" title=\"★本章小结：\"></a>★本章小结：</h5><ul>\n<li>对于垂直居中，最先想到的应该就是 <code>line-height</code> 了，但是这个只能用于行内内容；</li>\n<li>其次就是考虑能不能用<code>vertical-align: middle;</code> ，不过这个一定要熟知原理才能用得顺手，建议看下<a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">vertical-align和line-height的基友关系</a> ；</li>\n<li>然后便是绝对定位，虽然代码多了点，但是胜在适用于不同情况；</li>\n<li>移动端兼容性允许的情况下能用flex就用flex</li>\n</ul>\n<h3 id=\"三、水平垂直居中\"><a href=\"#三、水平垂直居中\" class=\"headerlink\" title=\"三、水平垂直居中\"></a>三、水平垂直居中</h3><h5 id=\"1-行内-行内块级-图片▲\"><a href=\"#1-行内-行内块级-图片▲\" class=\"headerlink\" title=\"(1)行内/行内块级/图片▲\"></a>(1)行内/行内块级/图片▲</h5><p>原理：<code>text-align: center;</code> 控制行内内容相对于块父元素水平居中,然后就是<code>line-height</code>和<code>vertical-align</code>的基友关系使其垂直居中，<code>font-size: 0;</code> 是为了消除近似居中的bug</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    line-height: 150px;  &#x2F;*行高的值与height相等*&#x2F;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-size: 0;   &#x2F;*消除幽灵空白节点的bug*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    &#x2F;*display: inline-block;*&#x2F;  &#x2F;*如果是块级元素需改为行内或行内块级才生效*&#x2F;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：代码简单；兼容性好（ie8+）</li>\n<li>缺点：只对行内内容有效；需要添加<code>font-size: 0;</code> 才可以完全的垂直居中；不过需要注意html中#parent包裹#son之间需要有换行或空格；熟悉<code>line-height</code>和<code>vertical-align</code>的基友关系较难</li>\n</ul>\n<h5 id=\"2-table-cell\"><a href=\"#2-table-cell\" class=\"headerlink\" title=\"(2)table-cell\"></a>(2)table-cell</h5><p>原理：CSS Table，使表格内容垂直对齐方式为middle,然后根据是行内内容还是块级内容采取不同的方式达到水平居中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    &#x2F;*text-align: center;*&#x2F;   &#x2F;*如果是行内元素就添加这个*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    &#x2F;*margin: 0 auto;*&#x2F;    &#x2F;*如果是块级元素就添加这个*&#x2F;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；适用于宽度高度未知情况；兼容性好（ie8+）</li>\n<li>缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置<code>display: table;</code> 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素</li>\n</ul>\n<h5 id=\"3-button作为父元素\"><a href=\"#3-button作为父元素\" class=\"headerlink\" title=\"(3)button作为父元素\"></a>(3)button作为父元素</h5><p>原理：button的默认样式，再把需要居中的元素表现形式改为行内或行内块级就好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button#parent&#123;  &#x2F;*改掉button默认样式就好了,不需要居中处理*&#x2F;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    outline: none;  </span><br><span class=\"line\">    border: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    display: inline-block; &#x2F;*button自带text-align: center,改为行内水平居中生效*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单方便，充分利用默认样式</li>\n<li>缺点：只适用于行内内容；需要清除部分默认样式；水平垂直居中兼容性很好，但是ie下点击会有凹陷效果！</li>\n</ul>\n<h5 id=\"4-绝对定位\"><a href=\"#4-绝对定位\" class=\"headerlink\" title=\"(4)绝对定位\"></a>(4)绝对定位</h5><p>原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到几何上的水平垂直居中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    &#x2F;*定宽高时等同于margin-left:负自身宽度一半;margin-top:负自身高度一半;*&#x2F;</span><br><span class=\"line\">    transform: translate(-50%,-50%); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：使用margin兼容性好；不管是块级还是行内元素都可以实现</li>\n<li>缺点：代码较多；脱离文档流；使用margin需要知道宽高；使用transform兼容性不好（ie9+）</li>\n</ul>\n<h5 id=\"5-绝对居中\"><a href=\"#5-绝对居中\" class=\"headerlink\" title=\"(5)绝对居中\"></a>(5)绝对居中</h5><p>原理：当top、bottom为0时,margin-top&amp;bottom设置auto的话会无限延伸占满空间并且平分；当left、right为0时,margin-left&amp;right设置auto的话会无限延伸占满空间并且平分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：无需关注宽高；兼容性较好(ie8+)</li>\n<li>缺点：代码较多；脱离文档流</li>\n</ul>\n<h5 id=\"6-flex\"><a href=\"#6-flex\" class=\"headerlink\" title=\"(6)flex\"></a>(6)flex</h5><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单灵活；功能强大</li>\n<li>缺点：PC端<a href=\"https://caniuse.com/#search=flex\" target=\"_blank\" rel=\"noopener\">兼容性不好</a>，移动端（Android4.0+）</li>\n</ul>\n<h5 id=\"7-视窗居中\"><a href=\"#7-视窗居中\" class=\"headerlink\" title=\"(7)视窗居中\"></a>(7)视窗居中</h5><p>原理：vh为视口单位，视口即文档可视的部分，50vh就是视口高度的50/100，设置50vh上边距再</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#son&#123;</span><br><span class=\"line\">\t&#x2F;*0如果去掉，则会多出滚动条并且上下都是50vh的margin。如果去掉就给body加上overflow:hidden;*&#x2F;</span><br><span class=\"line\">    margin: 50vh auto 0;  </span><br><span class=\"line\">    transform: translateY(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点</p>\n<ul>\n<li>优点：简单；容易理解；两句代码达到屏幕水平垂直居中</li>\n<li>缺点：兼容性不好（ie9+，Android4.4+）</li>\n</ul>\n<h5 id=\"★本章小结：-1\"><a href=\"#★本章小结：-1\" class=\"headerlink\" title=\"★本章小结：\"></a>★本章小结：</h5><ul>\n<li>一般情况下，水平垂直居中，我们最常用的就是绝对定位加负边距了，缺点就是需要知道宽高，使用transform倒是可以不需要，但是兼容性不好（ie9+）；</li>\n<li>其次就是绝对居中，绝对定位设置top、left、right、bottom为0，然后<code>margin:auto;</code> 让浏览器自动平分边距以达到水平垂直居中的目的；</li>\n<li>如果是行内/行内块级/图片这些内容，可以优先考虑<code>line-height</code>和<code>vertical-align</code> 结合使用，不要忘了还有<code>text-align</code> ，这个方法代码其实不多，就是理解原理有点困难，想要熟练应对各种情况还需好好研究；</li>\n<li>移动端兼容性允许的情况下能用flex就用flex。</li>\n</ul>\n<h3 id=\"四、两列布局\"><a href=\"#四、两列布局\" class=\"headerlink\" title=\"四、两列布局\"></a>四、两列布局</h3><h4 id=\"4-1-左列定宽-右列自适应\"><a href=\"#4-1-左列定宽-右列自适应\" class=\"headerlink\" title=\"4.1 左列定宽,右列自适应\"></a>4.1 左列定宽,右列自适应</h4><h5 id=\"1-利用float-margin实现\"><a href=\"#1-利用float-margin实现\" class=\"headerlink\" title=\"(1)利用float+margin实现\"></a>(1)利用float+margin实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: 100px; &#x2F;*大于等于#left的宽度*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-利用float-margin-fix-实现\"><a href=\"#2-利用float-margin-fix-实现\" class=\"headerlink\" title=\"(2)利用float+margin(fix)实现\"></a>(2)利用float+margin(fix)实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;right-fix&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right-fix &#123;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    margin-left: -100px; &#x2F;*正值大于或等于#left的宽度,才能显示在同一行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right&#123;</span><br><span class=\"line\">    margin-left: 100px; &#x2F;*大于或等于#left的宽度*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用float-overflow实现\"><a href=\"#3-使用float-overflow实现\" class=\"headerlink\" title=\"(3)使用float+overflow实现\"></a>(3)使用float+overflow实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    overflow: hidden; &#x2F;*触发bfc达到自适应*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li>\n<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li>\n</ul>\n<h5 id=\"4-使用table实现\"><a href=\"#4-使用table实现\" class=\"headerlink\" title=\"(4)使用table实现\"></a>(4)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left,#right&#123;</span><br><span class=\"line\">    display: table-cell;  &#x2F;*利用单元格自动分配宽度*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li>\n</ul>\n<h5 id=\"5-使用绝对定位实现\"><a href=\"#5-使用绝对定位实现\" class=\"headerlink\" title=\"(5)使用绝对定位实现\"></a>(5)使用绝对定位实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    position: relative;  &#x2F;*子绝父相*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 100px;  &#x2F;*值大于等于#left的宽度*&#x2F;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-使用flex实现\"><a href=\"#6-使用flex实现\" class=\"headerlink\" title=\"(6)使用flex实现\"></a>(6)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    flex: 1; &#x2F;*均分了父元素剩余空间*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-使用Grid实现\"><a href=\"#7-使用Grid实现\" class=\"headerlink\" title=\"(7)使用Grid实现\"></a>(7)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: 100px auto;  &#x2F;*设定2列就ok了,auto换成1fr也行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-左列自适应-右列定宽\"><a href=\"#4-2-左列自适应-右列定宽\" class=\"headerlink\" title=\"4.2 左列自适应,右列定宽\"></a>4.2 左列自适应,右列定宽</h4><p>效果:</p>\n<h5 id=\"1-使用float-margin实现\"><a href=\"#1-使用float-margin实现\" class=\"headerlink\" title=\"(1)使用float+margin实现\"></a>(1)使用float+margin实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    padding-left: 100px;  &#x2F;*抵消#left的margin-left以达到#parent水平居中*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    margin-left: -100px; &#x2F;*正值等于#right的宽度*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-使用float-overflow实现\"><a href=\"#2-使用float-overflow实现\" class=\"headerlink\" title=\"(2)使用float+overflow实现\"></a>(2)使用float+overflow实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;   &lt;!--顺序要换一下--&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    overflow: hidden;  &#x2F;*触发bfc*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    margin-left: 10px;  &#x2F;*margin需要定义在#right中*&#x2F;</span><br><span class=\"line\">    float: right;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li>\n<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li>\n</ul>\n<h5 id=\"3-使用table实现\"><a href=\"#3-使用table实现\" class=\"headerlink\" title=\"(3)使用table实现\"></a>(3)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li>\n</ul>\n<h5 id=\"4-使用绝对定位实现\"><a href=\"#4-使用绝对定位实现\" class=\"headerlink\" title=\"(4)使用绝对定位实现\"></a>(4)使用绝对定位实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    position: relative;  &#x2F;*子绝父相*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 100px;  &#x2F;*大于等于#rigth的宽度*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-使用flex实现\"><a href=\"#5-使用flex实现\" class=\"headerlink\" title=\"(5)使用flex实现\"></a>(5)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-使用Grid实现\"><a href=\"#6-使用Grid实现\" class=\"headerlink\" title=\"(6)使用Grid实现\"></a>(6)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: auto 100px;  &#x2F;*设定2列,auto换成1fr也行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-一列不定-一列自适应\"><a href=\"#4-3-一列不定-一列自适应\" class=\"headerlink\" title=\"4.3 一列不定,一列自适应\"></a>4.3 一列不定,一列自适应</h4><p>(盒子宽度随着内容增加或减少发生变化,另一个盒子自适应)</p>\n<p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-1.jpg\" alt=\"image.png\"></p>\n<p>变化后:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-2.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用float-overflow实现\"><a href=\"#1-使用float-overflow实现\" class=\"headerlink\" title=\"(1)使用float+overflow实现\"></a>(1)使用float+overflow实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">    float: left;  &#x2F;*只设置浮动,不设宽度*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    overflow: hidden;  &#x2F;*触发bfc*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注宽度，利用bfc达到自适应效果</li>\n<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li>\n</ul>\n<h5 id=\"2-使用flex实现\"><a href=\"#2-使用flex实现\" class=\"headerlink\" title=\"(2)使用flex实现\"></a>(2)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123; &#x2F;*不设宽度*&#x2F;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    flex: 1;  &#x2F;*均分#parent剩余的部分*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用Grid实现\"><a href=\"#3-使用Grid实现\" class=\"headerlink\" title=\"(3)使用Grid实现\"></a>(3)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: auto 1fr;  &#x2F;*auto和1fr换一下顺序就是左列自适应,右列不定宽了*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>左列自适应,右列不定宽同理(参考4.1和4.3对应代码示例)</em></p>\n<h3 id=\"五、三列布局\"><a href=\"#五、三列布局\" class=\"headerlink\" title=\"五、三列布局\"></a>五、三列布局</h3><h4 id=\"5-1-两列定宽-一列自适应\"><a href=\"#5-1-两列定宽-一列自适应\" class=\"headerlink\" title=\"5.1 两列定宽,一列自适应\"></a>5.1 两列定宽,一列自适应</h4><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-3.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用float-margin实现-1\"><a href=\"#1-使用float-margin实现-1\" class=\"headerlink\" title=\"(1)使用float+margin实现\"></a>(1)使用float+margin实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    min-width: 310px; &#x2F;*100+10+200,防止宽度不够,子元素换行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*#left和#center间隔*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    margin-left: 320px;  &#x2F;*等于#left和#center的宽度之和加上间隔,多出来的就是#right和#center的间隔*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-使用float-overflow实现-1\"><a href=\"#2-使用float-overflow实现-1\" class=\"headerlink\" title=\"(2)使用float+overflow实现\"></a>(2)使用float+overflow实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent&#123;</span><br><span class=\"line\">    min-width: 320px; &#x2F;*100+10+200+20,防止宽度不够,子元素换行*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px; &#x2F;*间隔*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center&#123;</span><br><span class=\"line\">    margin-right: 10px; &#x2F;*在此定义和#right的间隔*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    overflow: hidden;  &#x2F;*触发bfc*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li>\n<li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li>\n</ul>\n<h5 id=\"3-使用table实现-1\"><a href=\"#3-使用table实现-1\" class=\"headerlink\" title=\"(3)使用table实现\"></a>(3)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%; </span><br><span class=\"line\">    height: 520px; &#x2F;*抵消上下间距10*2的高度影响*&#x2F;</span><br><span class=\"line\">    margin: -10px 0;  &#x2F;*抵消上下边间距10的位置影响*&#x2F;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    &#x2F;*左右两边间距大了一点,子元素改用padding设置盒子间距就没有这个问题*&#x2F;</span><br><span class=\"line\">    border-spacing: 10px;  &#x2F;*关键!!!设置间距*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li>\n</ul>\n<h5 id=\"4-使用flex实现\"><a href=\"#4-使用flex实现\" class=\"headerlink\" title=\"(4)使用flex实现\"></a>(4)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*间距*&#x2F;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*间距*&#x2F;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    flex: 1;  &#x2F;*均分#parent剩余的部分达到自适应*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-使用Grid实现\"><a href=\"#5-使用Grid实现\" class=\"headerlink\" title=\"(5)使用Grid实现\"></a>(5)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: 100px 200px auto; &#x2F;*设置3列,固定第一第二列的宽度,第三列auto或者1fr*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*间距*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    margin-right: 10px;  &#x2F;*间距*&#x2F;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-两侧定宽-中间自适应\"><a href=\"#5-2-两侧定宽-中间自适应\" class=\"headerlink\" title=\"5.2 两侧定宽,中间自适应\"></a>5.2 两侧定宽,中间自适应</h4><h5 id=\"5-2-1-双飞翼布局方法\"><a href=\"#5-2-1-双飞翼布局方法\" class=\"headerlink\" title=\"5.2.1 双飞翼布局方法\"></a>5.2.1 双飞翼布局方法</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-4.jpg\" alt=\"image.png\"></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;!--中间栏需要放在前面--&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;</span><br><span class=\"line\">        &lt;div id&#x3D;&quot;center_inbox&quot;&gt;中间自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;hr&gt;  &lt;!--方便观察原理--&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#header &#123;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: -100%; &#x2F;*调整#left的位置,值等于自身宽度*&#x2F;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center_inbox&#123;</span><br><span class=\"line\">    height: 480px;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    margin: 0 220px 0 120px;  &#x2F;*关键!!!左右边界等于左右盒子的宽度,多出来的为盒子间隔*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: -200px;  &#x2F;*使right到指定的位置,值等于自身宽度*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#footer &#123;</span><br><span class=\"line\">    clear: both;  &#x2F;*注意清除浮动!!*&#x2F;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-2-圣杯布局方法\"><a href=\"#5-2-2-圣杯布局方法\" class=\"headerlink\" title=\"5.2.2 圣杯布局方法\"></a>5.2.2 圣杯布局方法</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;!--#center需要放在前面--&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应</span><br><span class=\"line\">        &lt;hr&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#header&#123;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    padding: 0 215px 0 115px;  &#x2F;*为了使#center摆正,左右padding分别等于左右盒子的宽,可以结合左右盒子相对定位的left调整间距*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    margin-left: -100%;  &#x2F;*使#left上去一行*&#x2F;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    left: -115px;  &#x2F;*相对定位调整#left的位置,正值大于或等于自身宽度*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100%;  &#x2F;*由于#parent的padding,达到自适应的目的*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    left: 215px; &#x2F;*相对定位调整#right的位置,大于或等于自身宽度*&#x2F;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: -200px;  &#x2F;*使#right上去一行*&#x2F;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#footer&#123;</span><br><span class=\"line\">    height: 60px;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-3-使用Grid实现\"><a href=\"#5-2-3-使用Grid实现\" class=\"headerlink\" title=\"5.2.3 使用Grid实现\"></a>5.2.3 使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;!--#center需要放在前面--&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应</span><br><span class=\"line\">        &lt;hr&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: 100px auto 200px; &#x2F;*设定3列*&#x2F;</span><br><span class=\"line\">    grid-template-rows: 60px auto 60px; &#x2F;*设定3行*&#x2F;</span><br><span class=\"line\">    &#x2F;*设置网格区域分布*&#x2F;</span><br><span class=\"line\">    grid-template-areas: </span><br><span class=\"line\">        &quot;header header header&quot; </span><br><span class=\"line\">        &quot;leftside main rightside&quot; </span><br><span class=\"line\">        &quot;footer footer footer&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#header &#123;</span><br><span class=\"line\">    grid-area: header; &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    grid-area: leftside;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    grid-area: main; &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">    margin: 0 15px; &#x2F;*设置间隔*&#x2F;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    grid-area: rightside; &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#footer &#123;</span><br><span class=\"line\">    grid-area: footer; &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">    background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-4-其他方法\"><a href=\"#5-2-4-其他方法\" class=\"headerlink\" title=\"5.2.4 其他方法\"></a>5.2.4 其他方法</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-5.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用table实现\"><a href=\"#1-使用table实现\" class=\"headerlink\" title=\"(1)使用table实现\"></a>(1)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简洁，容易理解；</li>\n<li>缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-</li>\n</ul>\n<h5 id=\"2-使用flex实现-1\"><a href=\"#2-使用flex实现-1\" class=\"headerlink\" title=\"(2)使用flex实现\"></a>(2)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    flex: 1;  &#x2F;*均分#parent剩余的部分*&#x2F;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用position实现\"><a href=\"#3-使用position实现\" class=\"headerlink\" title=\"(3)使用position实现\"></a>(3)使用position实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    position: relative; &#x2F;*子绝父相*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#center &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin-left: 100px; &#x2F;*大于等于#left的宽度,或者给#parent添加同样大小的padding-left*&#x2F;</span><br><span class=\"line\">    margin-right: 200px;  &#x2F;*大于等于#right的宽度,或者给#parent添加同样大小的padding-right*&#x2F;</span><br><span class=\"line\">    background-color: #eeff2b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：容易理解，兼容性比较好</li>\n<li>缺点：需手动计算宽度确定边距；脱离文档流；代码繁多</li>\n</ul>\n<h3 id=\"六、多列布局\"><a href=\"#六、多列布局\" class=\"headerlink\" title=\"六、多列布局\"></a>六、多列布局</h3><h4 id=\"6-1-等宽布局\"><a href=\"#6-1-等宽布局\" class=\"headerlink\" title=\"6.1 等宽布局\"></a>6.1 等宽布局</h4><h5 id=\"6-1-1-四列等宽\"><a href=\"#6-1-1-四列等宽\" class=\"headerlink\" title=\"6.1.1 四列等宽\"></a>6.1.1 四列等宽</h5><h5 id=\"1-使用float实现\"><a href=\"#1-使用float实现\" class=\"headerlink\" title=\"(1)使用float实现\"></a>(1)使用float实现</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-6.jpg\" alt=\"image.png\"></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    margin-left: -20px; &#x2F;*使整体内容看起来居中,抵消padding-left的影响*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    padding-left: 20px;  &#x2F;*盒子的边距*&#x2F;</span><br><span class=\"line\">    width: 25%;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    background-clip: content-box; &#x2F;*背景色从内容开始绘制,方便观察*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解；兼容性较好</li>\n<li>缺点：需要手动清除浮动，否则会产生高度塌陷</li>\n</ul>\n<h5 id=\"2-使用table实现\"><a href=\"#2-使用table实现\" class=\"headerlink\" title=\"(2)使用table实现\"></a>(2)使用table实现</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-7.jpg\" alt=\"image.png\"></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 540px;  &#x2F;*抵消上下边20*2间距的高度影响*&#x2F;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    margin: -20px 0;  &#x2F;*抵消上下边20*2间距的位置影响*&#x2F;</span><br><span class=\"line\">    &#x2F;*两边离页面间距较大,改用子元素设置padding来当成间隔就不会有这样的问题*&#x2F;</span><br><span class=\"line\">    border-spacing: 20px;  &#x2F;*设置间距*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解；无需关注宽度，单元格自动等分</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li>\n</ul>\n<h5 id=\"3-使用flex实现\"><a href=\"#3-使用flex实现\" class=\"headerlink\" title=\"(3)使用flex实现\"></a>(3)使用flex实现</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-8.jpg\" alt=\"image.png\"></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    margin-left: -15px;  &#x2F;*使内容看起来居中*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    flex: 1; &#x2F;*一起平分#parent*&#x2F;</span><br><span class=\"line\">    margin-left: 15px; &#x2F;*设置间距*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多列等宽\"><a href=\"#多列等宽\" class=\"headerlink\" title=\"多列等宽\"></a>多列等宽</h5><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-9.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用float实现-1\"><a href=\"#1-使用float实现-1\" class=\"headerlink\" title=\"(1)使用float实现\"></a>(1)使用float实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    float: left;  &#x2F;*添加浮动*&#x2F;</span><br><span class=\"line\">    width: 16.66666666666667%;  &#x2F;*100÷列数,得出百分比*&#x2F;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解；兼容性较好</li>\n<li>缺点：需要手动清除浮动，否则会产生高度塌陷</li>\n</ul>\n<h5 id=\"2-使用table实现-1\"><a href=\"#2-使用table实现-1\" class=\"headerlink\" title=\"(2)使用table实现\"></a>(2)使用table实现</h5><p>html代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    display: table-cell; &#x2F;*无需关注列数,单元格自动平分*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简单，容易理解；无需关注宽度。单元格自动等分</li>\n<li>缺点：margin失效；设置间隔比较麻烦；不兼容ie8-</li>\n</ul>\n<h5 id=\"3-使用flex实现-1\"><a href=\"#3-使用flex实现-1\" class=\"headerlink\" title=\"(3)使用flex实现\"></a>(3)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;</span><br><span class=\"line\">    flex: 1;  &#x2F;*无需关注列数,一起平分#parent*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-使用Grid实现\"><a href=\"#4-使用Grid实现\" class=\"headerlink\" title=\"(4)使用Grid实现\"></a>(4)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: repeat(6,1fr);  &#x2F;*6就是列数*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column&#123;&#125;</span><br><span class=\"line\">.column:nth-child(odd)&#123;</span><br><span class=\"line\">    background-color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.column:nth-child(even)&#123;</span><br><span class=\"line\">    background-color: #0f0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-2-九宫格布局\"><a href=\"#6-2-九宫格布局\" class=\"headerlink\" title=\"6.2 九宫格布局\"></a>6.2 九宫格布局</h4><h5 id=\"1-使用table实现-1\"><a href=\"#1-使用table实现-1\" class=\"headerlink\" title=\"(1)使用table实现\"></a>(1)使用table实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 1200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.row &#123;</span><br><span class=\"line\">    display: table-row;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：代码简洁，容易理解；</li>\n<li>缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-</li>\n</ul>\n<h5 id=\"2-使用flex实现-2\"><a href=\"#2-使用flex实现-2\" class=\"headerlink\" title=\"(2)使用flex实现\"></a>(2)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 1200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.row &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用Grid实现-1\"><a href=\"#3-使用Grid实现-1\" class=\"headerlink\" title=\"(3)使用Grid实现\"></a>(3)使用Grid实现</h5><p><em>CSS Grid非常强大,可以实现各种各样的三维布局,可查阅本文结尾的阅读推荐</em></p>\n<p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 1200px;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    grid-template-columns: repeat(3, 1fr); &#x2F;*等同于1fr 1fr 1fr,此为重复的合并写法*&#x2F;</span><br><span class=\"line\">    grid-template-rows: repeat(3, 1fr);  &#x2F;*等同于1fr 1fr 1fr,此为重复的合并写法*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-3-栅格系统\"><a href=\"#6-3-栅格系统\" class=\"headerlink\" title=\"6.3 栅格系统\"></a>6.3 栅格系统</h4><p>优缺点：</p>\n<ul>\n<li>优点：代码简洁，容易理解；提高页面内容的流动性，能适应多种设备；</li>\n</ul>\n<h5 id=\"1-用Less生成\"><a href=\"#1-用Less生成\" class=\"headerlink\" title=\"(1)用Less生成\"></a>(1)用Less生成</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*生成栅格系统*&#x2F;</span><br><span class=\"line\">@media screen and (max-width: 768px)&#123;</span><br><span class=\"line\">  .generate-columns(12);     &#x2F;*此处设置生成列数*&#x2F;</span><br><span class=\"line\">  .generate-columns(@n, @i: 1) when (@i &lt;&#x3D; @n) &#123;</span><br><span class=\"line\">    .column-xs-@&#123;i&#125; &#123;</span><br><span class=\"line\">      width: (@i * 100% &#x2F; @n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .generate-columns(@n, (@i+1));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media screen and (min-width: 768px)&#123;</span><br><span class=\"line\">  .generate-columns(12);    &#x2F;*此处设置生成列数*&#x2F;</span><br><span class=\"line\">  .generate-columns(@n, @i: 1) when (@i &lt;&#x3D; @n) &#123;</span><br><span class=\"line\">    .column-sm-@&#123;i&#125; &#123;</span><br><span class=\"line\">      width: (@i * 100% &#x2F; @n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .generate-columns(@n, (@i+1));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div[class^&#x3D;&quot;column-xs-&quot;]&#123;</span><br><span class=\"line\">\tfloat: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div[class^&#x3D;&quot;column-sm-&quot;]&#123;</span><br><span class=\"line\">\tfloat: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译后的CSS代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 768px) &#123;</span><br><span class=\"line\">  .column-xs-1 &#123;  width: 8.33333333%;  &#125;</span><br><span class=\"line\">  .column-xs-2 &#123;  width: 16.66666667%;  &#125;</span><br><span class=\"line\">  .column-xs-3 &#123;  width: 25%;  &#125;</span><br><span class=\"line\">  .column-xs-4 &#123;  width: 33.33333333%;  &#125;</span><br><span class=\"line\">  .column-xs-5 &#123;  width: 41.66666667%;  &#125;</span><br><span class=\"line\">  .column-xs-6 &#123;  width: 50%;  &#125;</span><br><span class=\"line\">  .column-xs-7 &#123;  width: 58.33333333%;  &#125;</span><br><span class=\"line\">  .column-xs-8 &#123;  width: 66.66666667%;  &#125;</span><br><span class=\"line\">  .column-xs-9 &#123;  width: 75%;  &#125;</span><br><span class=\"line\">  .column-xs-10 &#123;  width: 83.33333333%;  &#125;</span><br><span class=\"line\">  .column-xs-11 &#123;  width: 91.66666667%;  &#125;</span><br><span class=\"line\">  .column-xs-12 &#123;  width: 100%;  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media screen and (min-width: 768px) &#123;</span><br><span class=\"line\">  .column-sm-1 &#123;  width: 8.33333333%;  &#125;</span><br><span class=\"line\">  .column-sm-2 &#123;  width: 16.66666667%;  &#125;</span><br><span class=\"line\">  .column-sm-3 &#123;  width: 25%;  &#125;</span><br><span class=\"line\">  .column-sm-4 &#123;  width: 33.33333333%;  &#125;</span><br><span class=\"line\">  .column-sm-5 &#123;  width: 41.66666667%;  &#125;</span><br><span class=\"line\">  .column-sm-6 &#123;  width: 50%;  &#125;</span><br><span class=\"line\">  .column-sm-7 &#123;  width: 58.33333333%;  &#125;</span><br><span class=\"line\">  .column-sm-8 &#123;  width: 66.66666667%;  &#125;</span><br><span class=\"line\">  .column-sm-9 &#123;  width: 75%;  &#125;</span><br><span class=\"line\">  .column-sm-10 &#123;  width: 83.33333333%;  &#125;</span><br><span class=\"line\">  .column-sm-11 &#123;  width: 91.66666667%;  &#125;  </span><br><span class=\"line\">  .column-sm-12 &#123;  width: 100%;  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div[class^&#x3D;&quot;column-xs-&quot;]&#123;</span><br><span class=\"line\">\tfloat: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div[class^&#x3D;&quot;column-sm-&quot;]&#123;</span><br><span class=\"line\">\tfloat: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、全屏布局\"><a href=\"#七、全屏布局\" class=\"headerlink\" title=\"七、全屏布局\"></a>七、全屏布局</h3><p>效果图:</p>\n<p><img src=\"http://106.14.74.107/comm-img/css-10.jpg\" alt=\"image.png\"></p>\n<h5 id=\"1-使用绝对定位实现\"><a href=\"#1-使用绝对定位实现\" class=\"headerlink\" title=\"(1)使用绝对定位实现\"></a>(1)使用绝对定位实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body, #parent &#123;height: 100%;overflow: hidden;&#125;</span><br><span class=\"line\">#parent &gt; div &#123;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#top &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 100px;  &#x2F;*值大于等于#top的高度*&#x2F;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    bottom: 50px;  &#x2F;*值大于等于#bottom的高度*&#x2F;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    overflow: auto;</span><br><span class=\"line\">    left: 200px;  &#x2F;*值大于等于#left的宽度*&#x2F;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    top: 100px;  &#x2F;*值大于等于#top的高度*&#x2F;</span><br><span class=\"line\">    bottom: 50px;  &#x2F;*值大于等于#bottom的高度*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#bottom &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优缺点：</p>\n<ul>\n<li>优点：容易理解</li>\n<li>缺点：代码繁多；需要计算好各个盒子的宽高；</li>\n</ul>\n<h5 id=\"2-使用flex实现-3\"><a href=\"#2-使用flex实现-3\" class=\"headerlink\" title=\"(2)使用flex实现\"></a>(2)使用flex实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;middle&quot;&gt;</span><br><span class=\"line\">        &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html,body,#parent&#123;</span><br><span class=\"line\">    height:100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#top &#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#bottom &#123;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#middle &#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right &#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    overflow: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用Grid实现-2\"><a href=\"#3-使用Grid实现-2\" class=\"headerlink\" title=\"(3)使用Grid实现\"></a>(3)使用Grid实现</h5><p>html代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>css代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html, body, #parent &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#parent &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    &#x2F;*分成2列,第一列宽度200px,第二列1fr平分剩余的部分,此处换成auto也行*&#x2F;</span><br><span class=\"line\">    grid-template-columns: 200px 1fr;  </span><br><span class=\"line\">    &#x2F;*分成3行,第一行高度100px,第二行auto为自适应,此处换成1fr也行,第3行高度为50px*&#x2F;</span><br><span class=\"line\">    grid-template-rows: 100px auto 50px; </span><br><span class=\"line\">    &#x2F;*定义网格区域分布*&#x2F;</span><br><span class=\"line\">    grid-template-areas:</span><br><span class=\"line\">        &quot;header header&quot;</span><br><span class=\"line\">        &quot;aside main&quot;</span><br><span class=\"line\">        &quot;footer footer&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#parent&gt;div&#123;</span><br><span class=\"line\">    border: 1px solid #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#top&#123;</span><br><span class=\"line\">    grid-area: header;  &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#left&#123;</span><br><span class=\"line\">    grid-area: aside;  &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#right&#123;</span><br><span class=\"line\">    grid-area: main;  &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#bottom&#123;</span><br><span class=\"line\">    grid-area: footer;  &#x2F;*指定在哪个网格区域*&#x2F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>"},{"title":"种草ES2020","date":"2020-01-10T02:40:00.000Z","cover":"/images/article_bg_04.webp","_content":"#### 一：Promise.allSettled\n\n##### Promise.all 缺陷\n\n都知道 Promise.all 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise直接进入 reject 状态。\n\n想象这个场景：你的页面有三个区域，分别对应三个独立的接口数据，使用 Promise.all 来并发三个接口，如果其中任意一个接口服务异常，状态是reject,这会导致页面中该三个区域数据全都无法渲染出来，因为任何 reject 都会进入catch回调, 很明显，这是无法接受的，如下：\n\n```\nPromise.all([    Promise.reject({code: 500, msg: '服务异常'}),    Promise.resolve({ code: 200, list: []}),    Promise.resolve({code: 200, list: []})]).then((ret) => {    // 如果其中一个任务是 reject，则不会执行到这个回调。    RenderContent(ret);}).catch((error) => {    // 本例中会执行到这个回调    // error: {code: 500, msg: \"服务异常\"}})\n```\n\n我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态（fulfilled 或者 rejected）与结果（业务value 或者 拒因 reason），在 then 里面通过 filter 来过滤出想要的业务逻辑结果，这就能最大限度的保障业务当前状态的可访问性，而 Promise.allSettled 就是解决这问题的。\n\n```\nPromise.allSettled([    Promise.reject({code: 500, msg: '服务异常'}),    Promise.resolve({ code: 200, list: []}),    Promise.resolve({code: 200, list: []})]).then((ret) => {    /*        0: {status: \"rejected\", reason: {…}}        1: {status: \"fulfilled\", value: {…}}        2: {status: \"fulfilled\", value: {…}}    */    // 过滤掉 rejected 状态，尽可能多的保证页面区域数据渲染    RenderContent(ret.filter((el) => {        return el.status !== 'rejected';    }));});\n```\n\n#### 二：可选链（Optional chaining）\n\n可选链 可让我们在查询具有多层级的对象时，不再需要进行冗余的各种前置校验。\n\n日常开发中，我们经常会遇到这种查询\n\n```\nvar name = user && user.info && user.info.name;\n```\n\n又或是这种\n\n```\nvar age = user && user.info && user.info.getAge && user.info.getAge();\n```\n\n这是一种丑陋但又不得不做的前置校验，否则很容易命中 Uncaught TypeError: Cannot read property… 这种错误，这极有可能让你整个应用挂掉。\n\n用了 Optional Chaining ，上面代码会变成\n\n```\nvar name = user?.info?.name;var age = user?.info?.getAge?.();\n```\n\n可选链中的 ? 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。\n\n#### 三：空值合并运算符（Nullish coalescing Operator）\n\n当我们查询某个属性时，经常会遇到，如果没有该属性就会设置一个默认的值。比如下面代码中查询玩家等级。\n\n```\nvar level = (user.data && user.data.level) || '暂无等级';\n```\n\n在JS中，空字符串、0 等，当进行逻辑操作符判时，会自动转化为 false。在上面的代码里，如果玩家等级本身就是 0 级, 变量 level 就会被赋值 暂无等级 字符串，这是逻辑错误。\n\n```\nvar level;if (typeof user.level === 'number') {    level = user.level;} else if (!user.level) {    level = '暂无等级';} else {    level = user.level;}\n```\n\n来看看用空值合并运算符如何处理\n\n```\n// {//   \"level\": 0// }var level = `${user.level}级` ?? '暂无等级';// level -> '0级'\n```\n\n用空值合并运算在逻辑正确的前提下，代码更加简洁。\n\n空值合并运算符 与 可选链 相结合，可以很轻松处理多级查询并赋予默认值问题。\n\n```\nvar level = user.data?.level ?? '暂无等级';\n```\n\n#### 四：dynamic-import\n\n按需 import 提案几年前就已提出，如今终于能进入ES正式规范。这里个人理解成“按需”更为贴切。现代前端打包资源越来越大，打包成几M的JS资源已成常态，而往往前端应用初始化时根本不需要全量加载逻辑资源，为了首屏渲染速度更快，很多时候都是按需加载，比如懒加载图片等。而这些按需执行逻辑资源都体现在某一个事件回调中去加载。\n\n```\nel.onclick = () => {    import(`/path/current-logic.js`)    .then((module) => {        module.doSomthing();    })    .catch((err) => {        // load error;    })}\n```\n\n当然，webpack目前已很好的支持了该特性。\n\n#### 五：globalThis\n\nJavascript 在不同的环境获取全局对象有不通的方式，node 中通过 global, web中通过 window, self 等，有些甚至通过 this 获取，但通过 this 是及其危险的，this 在 js 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。过去获取全局对象，可通过一个全局函数\n\n```\nvar getGlobal = function () {   if (typeof self !== 'undefined') { return self; }   if (typeof window !== 'undefined') { return window; }   if (typeof global !== 'undefined') { return global; }   throw new Error('unable to locate global object'); }; \nvar globals = getGlobal(); \n// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n```\n\n而 globalThis 目的就是提供一种标准化方式访问全局对象，有了 globalThis 后，你可以在任意上下文，任意时刻都能获取到全局对象。\n\n#### 六：BigInt\n\nJs 中 Number类型只能安全的表示-(2^53-1)至 2^53-1 范的值，即Number.MINSAFEINTEGER 至Number.MAXSAFEINTEGER，超出这个范围的整数计算或者表示会丢失精度。\n\n```\nvar num = Number.MAX_SAFE_INTEGER;  // -> 9007199254740991\nnum = num + 1; // -> 9007199254740992\n// 再次加 +1 后无法正常运算num = num + 1; // -> 9007199254740992\n// 两个不同的值，却返回了true9007199254740992 === 9007199254740993  // -> true\n```\n\n为解决此问题，ES2020提供一种新的数据类型：BigInt。使用 BigInt 有两种方式：\n\n##### 在整数字面量后面加n。\n\n```\nvar bigIntNum = 9007199254740993n;\n```\n\n##### 使用 BigInt 函数。\n\n```\nvar bigIntNum = BigInt(9007199254740);var anOtherBigIntNum = BigInt('9007199254740993');\n```\n\n通过 BigInt， 我们可以安全的进行大数整型计算。\n\n```\nvar bigNumRet = 9007199254740993n + 9007199254740993n; // -> -> 18014398509481986n\nbigNumRet.toString(); // -> '18014398509481986'\n```\n\n注意:\n\nBigInt 是一种新的数据原始（primitive）类型。\n\n```\ntypeof 9007199254740993n; // -> 'bigint'\n```\n\n尽可能避免通过调用函数 BigInt 方式来实例化超大整型。因为参数的字面量实际也是 Number 类型的一次实例化，超出安全范围的数字，可能会引起精度丢失。\n\n#### 七：String.prototype.matchAll\n\n思考下面代码\n\n```\nvar str = '<text>JS</text><text>正则</text>';var reg = /<\\w+>(.*?)<\\/\\w+>/g;\nconsole.log(str.match(reg));// -> [\"<text>JS</text>\", \"<text>正则</text>\"]\n```\n\n可以看出返回的数组里包含了父匹配项，但未匹配到子项（group）。移除全局搜索符“g”试试。\n\n```\nvar str = '<text>JS</text><text>正则</text>';// 注意这里没有全局搜素标示符“g”var reg = /<\\w+>(.*?)<\\/\\w+>/;console.log(str.match(reg));\n// 上面会打印出/*[    \"<text>JS</text>\",    \"JS\",    index: 0,    input:    \"<text>JS</text><text>正则</text>\",    groups: undefined]*/\n```\n\n这样可以获取到匹配的父项，包括子项（group），但只能获取到第一个满足的匹配字符。能看出上面无法匹配到 `正则`。\n\n如果获取到全局所有匹配项，包括子项呢？\n\nES2020提供了一种简易的方式：String.prototype.matchAll, 该方法会返回一个迭代器。\n\n```\nvar str = '<text>JS</text><text>正则</text>';var allMatchs = str.matchAll(/<\\w+>(.*?)<\\/\\w+>/g);\nfor (const match of allMatchs) {  console.log(match);}\n\n\n/*第一次迭代返回：[    \"<text>JS</text>\",    \"JS\",    index: 0,    input: \"<text>JS</text><text>正则</text>\",    groups: undefined]\n第二次迭代返回：[    \"<text>正则</text>\",    \"正则\",    index: 15,    input: \"<text>JS</text><text>正则</text>\",    groups: undefined]*/\n```\n\n能看出每次迭代中可获取所有的匹配，以及本次匹配的成功的一些其他元信息。","source":"_posts/es2020.md","raw":"---\ntitle: 种草ES2020\ndate: 2020-01-10 10:40:00\ncover: /images/article_bg_04.webp\n---\n#### 一：Promise.allSettled\n\n##### Promise.all 缺陷\n\n都知道 Promise.all 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise直接进入 reject 状态。\n\n想象这个场景：你的页面有三个区域，分别对应三个独立的接口数据，使用 Promise.all 来并发三个接口，如果其中任意一个接口服务异常，状态是reject,这会导致页面中该三个区域数据全都无法渲染出来，因为任何 reject 都会进入catch回调, 很明显，这是无法接受的，如下：\n\n```\nPromise.all([    Promise.reject({code: 500, msg: '服务异常'}),    Promise.resolve({ code: 200, list: []}),    Promise.resolve({code: 200, list: []})]).then((ret) => {    // 如果其中一个任务是 reject，则不会执行到这个回调。    RenderContent(ret);}).catch((error) => {    // 本例中会执行到这个回调    // error: {code: 500, msg: \"服务异常\"}})\n```\n\n我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态（fulfilled 或者 rejected）与结果（业务value 或者 拒因 reason），在 then 里面通过 filter 来过滤出想要的业务逻辑结果，这就能最大限度的保障业务当前状态的可访问性，而 Promise.allSettled 就是解决这问题的。\n\n```\nPromise.allSettled([    Promise.reject({code: 500, msg: '服务异常'}),    Promise.resolve({ code: 200, list: []}),    Promise.resolve({code: 200, list: []})]).then((ret) => {    /*        0: {status: \"rejected\", reason: {…}}        1: {status: \"fulfilled\", value: {…}}        2: {status: \"fulfilled\", value: {…}}    */    // 过滤掉 rejected 状态，尽可能多的保证页面区域数据渲染    RenderContent(ret.filter((el) => {        return el.status !== 'rejected';    }));});\n```\n\n#### 二：可选链（Optional chaining）\n\n可选链 可让我们在查询具有多层级的对象时，不再需要进行冗余的各种前置校验。\n\n日常开发中，我们经常会遇到这种查询\n\n```\nvar name = user && user.info && user.info.name;\n```\n\n又或是这种\n\n```\nvar age = user && user.info && user.info.getAge && user.info.getAge();\n```\n\n这是一种丑陋但又不得不做的前置校验，否则很容易命中 Uncaught TypeError: Cannot read property… 这种错误，这极有可能让你整个应用挂掉。\n\n用了 Optional Chaining ，上面代码会变成\n\n```\nvar name = user?.info?.name;var age = user?.info?.getAge?.();\n```\n\n可选链中的 ? 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。\n\n#### 三：空值合并运算符（Nullish coalescing Operator）\n\n当我们查询某个属性时，经常会遇到，如果没有该属性就会设置一个默认的值。比如下面代码中查询玩家等级。\n\n```\nvar level = (user.data && user.data.level) || '暂无等级';\n```\n\n在JS中，空字符串、0 等，当进行逻辑操作符判时，会自动转化为 false。在上面的代码里，如果玩家等级本身就是 0 级, 变量 level 就会被赋值 暂无等级 字符串，这是逻辑错误。\n\n```\nvar level;if (typeof user.level === 'number') {    level = user.level;} else if (!user.level) {    level = '暂无等级';} else {    level = user.level;}\n```\n\n来看看用空值合并运算符如何处理\n\n```\n// {//   \"level\": 0// }var level = `${user.level}级` ?? '暂无等级';// level -> '0级'\n```\n\n用空值合并运算在逻辑正确的前提下，代码更加简洁。\n\n空值合并运算符 与 可选链 相结合，可以很轻松处理多级查询并赋予默认值问题。\n\n```\nvar level = user.data?.level ?? '暂无等级';\n```\n\n#### 四：dynamic-import\n\n按需 import 提案几年前就已提出，如今终于能进入ES正式规范。这里个人理解成“按需”更为贴切。现代前端打包资源越来越大，打包成几M的JS资源已成常态，而往往前端应用初始化时根本不需要全量加载逻辑资源，为了首屏渲染速度更快，很多时候都是按需加载，比如懒加载图片等。而这些按需执行逻辑资源都体现在某一个事件回调中去加载。\n\n```\nel.onclick = () => {    import(`/path/current-logic.js`)    .then((module) => {        module.doSomthing();    })    .catch((err) => {        // load error;    })}\n```\n\n当然，webpack目前已很好的支持了该特性。\n\n#### 五：globalThis\n\nJavascript 在不同的环境获取全局对象有不通的方式，node 中通过 global, web中通过 window, self 等，有些甚至通过 this 获取，但通过 this 是及其危险的，this 在 js 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。过去获取全局对象，可通过一个全局函数\n\n```\nvar getGlobal = function () {   if (typeof self !== 'undefined') { return self; }   if (typeof window !== 'undefined') { return window; }   if (typeof global !== 'undefined') { return global; }   throw new Error('unable to locate global object'); }; \nvar globals = getGlobal(); \n// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n```\n\n而 globalThis 目的就是提供一种标准化方式访问全局对象，有了 globalThis 后，你可以在任意上下文，任意时刻都能获取到全局对象。\n\n#### 六：BigInt\n\nJs 中 Number类型只能安全的表示-(2^53-1)至 2^53-1 范的值，即Number.MINSAFEINTEGER 至Number.MAXSAFEINTEGER，超出这个范围的整数计算或者表示会丢失精度。\n\n```\nvar num = Number.MAX_SAFE_INTEGER;  // -> 9007199254740991\nnum = num + 1; // -> 9007199254740992\n// 再次加 +1 后无法正常运算num = num + 1; // -> 9007199254740992\n// 两个不同的值，却返回了true9007199254740992 === 9007199254740993  // -> true\n```\n\n为解决此问题，ES2020提供一种新的数据类型：BigInt。使用 BigInt 有两种方式：\n\n##### 在整数字面量后面加n。\n\n```\nvar bigIntNum = 9007199254740993n;\n```\n\n##### 使用 BigInt 函数。\n\n```\nvar bigIntNum = BigInt(9007199254740);var anOtherBigIntNum = BigInt('9007199254740993');\n```\n\n通过 BigInt， 我们可以安全的进行大数整型计算。\n\n```\nvar bigNumRet = 9007199254740993n + 9007199254740993n; // -> -> 18014398509481986n\nbigNumRet.toString(); // -> '18014398509481986'\n```\n\n注意:\n\nBigInt 是一种新的数据原始（primitive）类型。\n\n```\ntypeof 9007199254740993n; // -> 'bigint'\n```\n\n尽可能避免通过调用函数 BigInt 方式来实例化超大整型。因为参数的字面量实际也是 Number 类型的一次实例化，超出安全范围的数字，可能会引起精度丢失。\n\n#### 七：String.prototype.matchAll\n\n思考下面代码\n\n```\nvar str = '<text>JS</text><text>正则</text>';var reg = /<\\w+>(.*?)<\\/\\w+>/g;\nconsole.log(str.match(reg));// -> [\"<text>JS</text>\", \"<text>正则</text>\"]\n```\n\n可以看出返回的数组里包含了父匹配项，但未匹配到子项（group）。移除全局搜索符“g”试试。\n\n```\nvar str = '<text>JS</text><text>正则</text>';// 注意这里没有全局搜素标示符“g”var reg = /<\\w+>(.*?)<\\/\\w+>/;console.log(str.match(reg));\n// 上面会打印出/*[    \"<text>JS</text>\",    \"JS\",    index: 0,    input:    \"<text>JS</text><text>正则</text>\",    groups: undefined]*/\n```\n\n这样可以获取到匹配的父项，包括子项（group），但只能获取到第一个满足的匹配字符。能看出上面无法匹配到 `正则`。\n\n如果获取到全局所有匹配项，包括子项呢？\n\nES2020提供了一种简易的方式：String.prototype.matchAll, 该方法会返回一个迭代器。\n\n```\nvar str = '<text>JS</text><text>正则</text>';var allMatchs = str.matchAll(/<\\w+>(.*?)<\\/\\w+>/g);\nfor (const match of allMatchs) {  console.log(match);}\n\n\n/*第一次迭代返回：[    \"<text>JS</text>\",    \"JS\",    index: 0,    input: \"<text>JS</text><text>正则</text>\",    groups: undefined]\n第二次迭代返回：[    \"<text>正则</text>\",    \"正则\",    index: 15,    input: \"<text>JS</text><text>正则</text>\",    groups: undefined]*/\n```\n\n能看出每次迭代中可获取所有的匹配，以及本次匹配的成功的一些其他元信息。","slug":"es2020","published":1,"updated":"2020-01-15T08:40:46.957Z","_id":"ck5ez4olv0000gic96dgq2p0l","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一：Promise-allSettled\"><a href=\"#一：Promise-allSettled\" class=\"headerlink\" title=\"一：Promise.allSettled\"></a>一：Promise.allSettled</h4><h5 id=\"Promise-all-缺陷\"><a href=\"#Promise-all-缺陷\" class=\"headerlink\" title=\"Promise.all 缺陷\"></a>Promise.all 缺陷</h5><p>都知道 Promise.all 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise直接进入 reject 状态。</p>\n<p>想象这个场景：你的页面有三个区域，分别对应三个独立的接口数据，使用 Promise.all 来并发三个接口，如果其中任意一个接口服务异常，状态是reject,这会导致页面中该三个区域数据全都无法渲染出来，因为任何 reject 都会进入catch回调, 很明显，这是无法接受的，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.all([    Promise.reject(&#123;code: 500, msg: &#39;服务异常&#39;&#125;),    Promise.resolve(&#123; code: 200, list: []&#125;),    Promise.resolve(&#123;code: 200, list: []&#125;)]).then((ret) &#x3D;&gt; &#123;    &#x2F;&#x2F; 如果其中一个任务是 reject，则不会执行到这个回调。    RenderContent(ret);&#125;).catch((error) &#x3D;&gt; &#123;    &#x2F;&#x2F; 本例中会执行到这个回调    &#x2F;&#x2F; error: &#123;code: 500, msg: &quot;服务异常&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态（fulfilled 或者 rejected）与结果（业务value 或者 拒因 reason），在 then 里面通过 filter 来过滤出想要的业务逻辑结果，这就能最大限度的保障业务当前状态的可访问性，而 Promise.allSettled 就是解决这问题的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.allSettled([    Promise.reject(&#123;code: 500, msg: &#39;服务异常&#39;&#125;),    Promise.resolve(&#123; code: 200, list: []&#125;),    Promise.resolve(&#123;code: 200, list: []&#125;)]).then((ret) &#x3D;&gt; &#123;    &#x2F;*        0: &#123;status: &quot;rejected&quot;, reason: &#123;…&#125;&#125;        1: &#123;status: &quot;fulfilled&quot;, value: &#123;…&#125;&#125;        2: &#123;status: &quot;fulfilled&quot;, value: &#123;…&#125;&#125;    *&#x2F;    &#x2F;&#x2F; 过滤掉 rejected 状态，尽可能多的保证页面区域数据渲染    RenderContent(ret.filter((el) &#x3D;&gt; &#123;        return el.status !&#x3D;&#x3D; &#39;rejected&#39;;    &#125;));&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二：可选链（Optional-chaining）\"><a href=\"#二：可选链（Optional-chaining）\" class=\"headerlink\" title=\"二：可选链（Optional chaining）\"></a>二：可选链（Optional chaining）</h4><p>可选链 可让我们在查询具有多层级的对象时，不再需要进行冗余的各种前置校验。</p>\n<p>日常开发中，我们经常会遇到这种查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name &#x3D; user &amp;&amp; user.info &amp;&amp; user.info.name;</span><br></pre></td></tr></table></figure>\n\n<p>又或是这种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var age &#x3D; user &amp;&amp; user.info &amp;&amp; user.info.getAge &amp;&amp; user.info.getAge();</span><br></pre></td></tr></table></figure>\n\n<p>这是一种丑陋但又不得不做的前置校验，否则很容易命中 Uncaught TypeError: Cannot read property… 这种错误，这极有可能让你整个应用挂掉。</p>\n<p>用了 Optional Chaining ，上面代码会变成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name &#x3D; user?.info?.name;var age &#x3D; user?.info?.getAge?.();</span><br></pre></td></tr></table></figure>\n\n<p>可选链中的 ? 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。</p>\n<h4 id=\"三：空值合并运算符（Nullish-coalescing-Operator）\"><a href=\"#三：空值合并运算符（Nullish-coalescing-Operator）\" class=\"headerlink\" title=\"三：空值合并运算符（Nullish coalescing Operator）\"></a>三：空值合并运算符（Nullish coalescing Operator）</h4><p>当我们查询某个属性时，经常会遇到，如果没有该属性就会设置一个默认的值。比如下面代码中查询玩家等级。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var level &#x3D; (user.data &amp;&amp; user.data.level) || &#39;暂无等级&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>在JS中，空字符串、0 等，当进行逻辑操作符判时，会自动转化为 false。在上面的代码里，如果玩家等级本身就是 0 级, 变量 level 就会被赋值 暂无等级 字符串，这是逻辑错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var level;if (typeof user.level &#x3D;&#x3D;&#x3D; &#39;number&#39;) &#123;    level &#x3D; user.level;&#125; else if (!user.level) &#123;    level &#x3D; &#39;暂无等级&#39;;&#125; else &#123;    level &#x3D; user.level;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看看用空值合并运算符如何处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; &#123;&#x2F;&#x2F;   &quot;level&quot;: 0&#x2F;&#x2F; &#125;var level &#x3D; &#96;$&#123;user.level&#125;级&#96; ?? &#39;暂无等级&#39;;&#x2F;&#x2F; level -&gt; &#39;0级&#39;</span><br></pre></td></tr></table></figure>\n\n<p>用空值合并运算在逻辑正确的前提下，代码更加简洁。</p>\n<p>空值合并运算符 与 可选链 相结合，可以很轻松处理多级查询并赋予默认值问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var level &#x3D; user.data?.level ?? &#39;暂无等级&#39;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四：dynamic-import\"><a href=\"#四：dynamic-import\" class=\"headerlink\" title=\"四：dynamic-import\"></a>四：dynamic-import</h4><p>按需 import 提案几年前就已提出，如今终于能进入ES正式规范。这里个人理解成“按需”更为贴切。现代前端打包资源越来越大，打包成几M的JS资源已成常态，而往往前端应用初始化时根本不需要全量加载逻辑资源，为了首屏渲染速度更快，很多时候都是按需加载，比如懒加载图片等。而这些按需执行逻辑资源都体现在某一个事件回调中去加载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el.onclick &#x3D; () &#x3D;&gt; &#123;    import(&#96;&#x2F;path&#x2F;current-logic.js&#96;)    .then((module) &#x3D;&gt; &#123;        module.doSomthing();    &#125;)    .catch((err) &#x3D;&gt; &#123;        &#x2F;&#x2F; load error;    &#125;)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，webpack目前已很好的支持了该特性。</p>\n<h4 id=\"五：globalThis\"><a href=\"#五：globalThis\" class=\"headerlink\" title=\"五：globalThis\"></a>五：globalThis</h4><p>Javascript 在不同的环境获取全局对象有不通的方式，node 中通过 global, web中通过 window, self 等，有些甚至通过 this 获取，但通过 this 是及其危险的，this 在 js 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。过去获取全局对象，可通过一个全局函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var getGlobal &#x3D; function () &#123;   if (typeof self !&#x3D;&#x3D; &#39;undefined&#39;) &#123; return self; &#125;   if (typeof window !&#x3D;&#x3D; &#39;undefined&#39;) &#123; return window; &#125;   if (typeof global !&#x3D;&#x3D; &#39;undefined&#39;) &#123; return global; &#125;   throw new Error(&#39;unable to locate global object&#39;); &#125;; </span><br><span class=\"line\">var globals &#x3D; getGlobal(); </span><br><span class=\"line\">&#x2F;&#x2F; https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;globalThis</span><br></pre></td></tr></table></figure>\n\n<p>而 globalThis 目的就是提供一种标准化方式访问全局对象，有了 globalThis 后，你可以在任意上下文，任意时刻都能获取到全局对象。</p>\n<h4 id=\"六：BigInt\"><a href=\"#六：BigInt\" class=\"headerlink\" title=\"六：BigInt\"></a>六：BigInt</h4><p>Js 中 Number类型只能安全的表示-(2^53-1)至 2^53-1 范的值，即Number.MINSAFEINTEGER 至Number.MAXSAFEINTEGER，超出这个范围的整数计算或者表示会丢失精度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num &#x3D; Number.MAX_SAFE_INTEGER;  &#x2F;&#x2F; -&gt; 9007199254740991</span><br><span class=\"line\">num &#x3D; num + 1; &#x2F;&#x2F; -&gt; 9007199254740992</span><br><span class=\"line\">&#x2F;&#x2F; 再次加 +1 后无法正常运算num &#x3D; num + 1; &#x2F;&#x2F; -&gt; 9007199254740992</span><br><span class=\"line\">&#x2F;&#x2F; 两个不同的值，却返回了true9007199254740992 &#x3D;&#x3D;&#x3D; 9007199254740993  &#x2F;&#x2F; -&gt; true</span><br></pre></td></tr></table></figure>\n\n<p>为解决此问题，ES2020提供一种新的数据类型：BigInt。使用 BigInt 有两种方式：</p>\n<h5 id=\"在整数字面量后面加n。\"><a href=\"#在整数字面量后面加n。\" class=\"headerlink\" title=\"在整数字面量后面加n。\"></a>在整数字面量后面加n。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bigIntNum &#x3D; 9007199254740993n;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-BigInt-函数。\"><a href=\"#使用-BigInt-函数。\" class=\"headerlink\" title=\"使用 BigInt 函数。\"></a>使用 BigInt 函数。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bigIntNum &#x3D; BigInt(9007199254740);var anOtherBigIntNum &#x3D; BigInt(&#39;9007199254740993&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>通过 BigInt， 我们可以安全的进行大数整型计算。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bigNumRet &#x3D; 9007199254740993n + 9007199254740993n; &#x2F;&#x2F; -&gt; -&gt; 18014398509481986n</span><br><span class=\"line\">bigNumRet.toString(); &#x2F;&#x2F; -&gt; &#39;18014398509481986&#39;</span><br></pre></td></tr></table></figure>\n\n<p>注意:</p>\n<p>BigInt 是一种新的数据原始（primitive）类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof 9007199254740993n; &#x2F;&#x2F; -&gt; &#39;bigint&#39;</span><br></pre></td></tr></table></figure>\n\n<p>尽可能避免通过调用函数 BigInt 方式来实例化超大整型。因为参数的字面量实际也是 Number 类型的一次实例化，超出安全范围的数字，可能会引起精度丢失。</p>\n<h4 id=\"七：String-prototype-matchAll\"><a href=\"#七：String-prototype-matchAll\" class=\"headerlink\" title=\"七：String.prototype.matchAll\"></a>七：String.prototype.matchAll</h4><p>思考下面代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str &#x3D; &#39;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&#39;;var reg &#x3D; &#x2F;&lt;\\w+&gt;(.*?)&lt;\\&#x2F;\\w+&gt;&#x2F;g;</span><br><span class=\"line\">console.log(str.match(reg));&#x2F;&#x2F; -&gt; [&quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&quot;, &quot;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>可以看出返回的数组里包含了父匹配项，但未匹配到子项（group）。移除全局搜索符“g”试试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str &#x3D; &#39;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&#39;;&#x2F;&#x2F; 注意这里没有全局搜素标示符“g”var reg &#x3D; &#x2F;&lt;\\w+&gt;(.*?)&lt;\\&#x2F;\\w+&gt;&#x2F;;console.log(str.match(reg));</span><br><span class=\"line\">&#x2F;&#x2F; 上面会打印出&#x2F;*[    &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&quot;,    &quot;JS&quot;,    index: 0,    input:    &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;,    groups: undefined]*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>这样可以获取到匹配的父项，包括子项（group），但只能获取到第一个满足的匹配字符。能看出上面无法匹配到 <code>正则</code>。</p>\n<p>如果获取到全局所有匹配项，包括子项呢？</p>\n<p>ES2020提供了一种简易的方式：String.prototype.matchAll, 该方法会返回一个迭代器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str &#x3D; &#39;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&#39;;var allMatchs &#x3D; str.matchAll(&#x2F;&lt;\\w+&gt;(.*?)&lt;\\&#x2F;\\w+&gt;&#x2F;g);</span><br><span class=\"line\">for (const match of allMatchs) &#123;  console.log(match);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*第一次迭代返回：[    &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&quot;,    &quot;JS&quot;,    index: 0,    input: &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;,    groups: undefined]</span><br><span class=\"line\">第二次迭代返回：[    &quot;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;,    &quot;正则&quot;,    index: 15,    input: &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;,    groups: undefined]*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>能看出每次迭代中可获取所有的匹配，以及本次匹配的成功的一些其他元信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一：Promise-allSettled\"><a href=\"#一：Promise-allSettled\" class=\"headerlink\" title=\"一：Promise.allSettled\"></a>一：Promise.allSettled</h4><h5 id=\"Promise-all-缺陷\"><a href=\"#Promise-all-缺陷\" class=\"headerlink\" title=\"Promise.all 缺陷\"></a>Promise.all 缺陷</h5><p>都知道 Promise.all 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise直接进入 reject 状态。</p>\n<p>想象这个场景：你的页面有三个区域，分别对应三个独立的接口数据，使用 Promise.all 来并发三个接口，如果其中任意一个接口服务异常，状态是reject,这会导致页面中该三个区域数据全都无法渲染出来，因为任何 reject 都会进入catch回调, 很明显，这是无法接受的，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.all([    Promise.reject(&#123;code: 500, msg: &#39;服务异常&#39;&#125;),    Promise.resolve(&#123; code: 200, list: []&#125;),    Promise.resolve(&#123;code: 200, list: []&#125;)]).then((ret) &#x3D;&gt; &#123;    &#x2F;&#x2F; 如果其中一个任务是 reject，则不会执行到这个回调。    RenderContent(ret);&#125;).catch((error) &#x3D;&gt; &#123;    &#x2F;&#x2F; 本例中会执行到这个回调    &#x2F;&#x2F; error: &#123;code: 500, msg: &quot;服务异常&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态（fulfilled 或者 rejected）与结果（业务value 或者 拒因 reason），在 then 里面通过 filter 来过滤出想要的业务逻辑结果，这就能最大限度的保障业务当前状态的可访问性，而 Promise.allSettled 就是解决这问题的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.allSettled([    Promise.reject(&#123;code: 500, msg: &#39;服务异常&#39;&#125;),    Promise.resolve(&#123; code: 200, list: []&#125;),    Promise.resolve(&#123;code: 200, list: []&#125;)]).then((ret) &#x3D;&gt; &#123;    &#x2F;*        0: &#123;status: &quot;rejected&quot;, reason: &#123;…&#125;&#125;        1: &#123;status: &quot;fulfilled&quot;, value: &#123;…&#125;&#125;        2: &#123;status: &quot;fulfilled&quot;, value: &#123;…&#125;&#125;    *&#x2F;    &#x2F;&#x2F; 过滤掉 rejected 状态，尽可能多的保证页面区域数据渲染    RenderContent(ret.filter((el) &#x3D;&gt; &#123;        return el.status !&#x3D;&#x3D; &#39;rejected&#39;;    &#125;));&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二：可选链（Optional-chaining）\"><a href=\"#二：可选链（Optional-chaining）\" class=\"headerlink\" title=\"二：可选链（Optional chaining）\"></a>二：可选链（Optional chaining）</h4><p>可选链 可让我们在查询具有多层级的对象时，不再需要进行冗余的各种前置校验。</p>\n<p>日常开发中，我们经常会遇到这种查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name &#x3D; user &amp;&amp; user.info &amp;&amp; user.info.name;</span><br></pre></td></tr></table></figure>\n\n<p>又或是这种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var age &#x3D; user &amp;&amp; user.info &amp;&amp; user.info.getAge &amp;&amp; user.info.getAge();</span><br></pre></td></tr></table></figure>\n\n<p>这是一种丑陋但又不得不做的前置校验，否则很容易命中 Uncaught TypeError: Cannot read property… 这种错误，这极有可能让你整个应用挂掉。</p>\n<p>用了 Optional Chaining ，上面代码会变成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name &#x3D; user?.info?.name;var age &#x3D; user?.info?.getAge?.();</span><br></pre></td></tr></table></figure>\n\n<p>可选链中的 ? 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。</p>\n<h4 id=\"三：空值合并运算符（Nullish-coalescing-Operator）\"><a href=\"#三：空值合并运算符（Nullish-coalescing-Operator）\" class=\"headerlink\" title=\"三：空值合并运算符（Nullish coalescing Operator）\"></a>三：空值合并运算符（Nullish coalescing Operator）</h4><p>当我们查询某个属性时，经常会遇到，如果没有该属性就会设置一个默认的值。比如下面代码中查询玩家等级。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var level &#x3D; (user.data &amp;&amp; user.data.level) || &#39;暂无等级&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>在JS中，空字符串、0 等，当进行逻辑操作符判时，会自动转化为 false。在上面的代码里，如果玩家等级本身就是 0 级, 变量 level 就会被赋值 暂无等级 字符串，这是逻辑错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var level;if (typeof user.level &#x3D;&#x3D;&#x3D; &#39;number&#39;) &#123;    level &#x3D; user.level;&#125; else if (!user.level) &#123;    level &#x3D; &#39;暂无等级&#39;;&#125; else &#123;    level &#x3D; user.level;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看看用空值合并运算符如何处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; &#123;&#x2F;&#x2F;   &quot;level&quot;: 0&#x2F;&#x2F; &#125;var level &#x3D; &#96;$&#123;user.level&#125;级&#96; ?? &#39;暂无等级&#39;;&#x2F;&#x2F; level -&gt; &#39;0级&#39;</span><br></pre></td></tr></table></figure>\n\n<p>用空值合并运算在逻辑正确的前提下，代码更加简洁。</p>\n<p>空值合并运算符 与 可选链 相结合，可以很轻松处理多级查询并赋予默认值问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var level &#x3D; user.data?.level ?? &#39;暂无等级&#39;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四：dynamic-import\"><a href=\"#四：dynamic-import\" class=\"headerlink\" title=\"四：dynamic-import\"></a>四：dynamic-import</h4><p>按需 import 提案几年前就已提出，如今终于能进入ES正式规范。这里个人理解成“按需”更为贴切。现代前端打包资源越来越大，打包成几M的JS资源已成常态，而往往前端应用初始化时根本不需要全量加载逻辑资源，为了首屏渲染速度更快，很多时候都是按需加载，比如懒加载图片等。而这些按需执行逻辑资源都体现在某一个事件回调中去加载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el.onclick &#x3D; () &#x3D;&gt; &#123;    import(&#96;&#x2F;path&#x2F;current-logic.js&#96;)    .then((module) &#x3D;&gt; &#123;        module.doSomthing();    &#125;)    .catch((err) &#x3D;&gt; &#123;        &#x2F;&#x2F; load error;    &#125;)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，webpack目前已很好的支持了该特性。</p>\n<h4 id=\"五：globalThis\"><a href=\"#五：globalThis\" class=\"headerlink\" title=\"五：globalThis\"></a>五：globalThis</h4><p>Javascript 在不同的环境获取全局对象有不通的方式，node 中通过 global, web中通过 window, self 等，有些甚至通过 this 获取，但通过 this 是及其危险的，this 在 js 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。过去获取全局对象，可通过一个全局函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var getGlobal &#x3D; function () &#123;   if (typeof self !&#x3D;&#x3D; &#39;undefined&#39;) &#123; return self; &#125;   if (typeof window !&#x3D;&#x3D; &#39;undefined&#39;) &#123; return window; &#125;   if (typeof global !&#x3D;&#x3D; &#39;undefined&#39;) &#123; return global; &#125;   throw new Error(&#39;unable to locate global object&#39;); &#125;; </span><br><span class=\"line\">var globals &#x3D; getGlobal(); </span><br><span class=\"line\">&#x2F;&#x2F; https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;globalThis</span><br></pre></td></tr></table></figure>\n\n<p>而 globalThis 目的就是提供一种标准化方式访问全局对象，有了 globalThis 后，你可以在任意上下文，任意时刻都能获取到全局对象。</p>\n<h4 id=\"六：BigInt\"><a href=\"#六：BigInt\" class=\"headerlink\" title=\"六：BigInt\"></a>六：BigInt</h4><p>Js 中 Number类型只能安全的表示-(2^53-1)至 2^53-1 范的值，即Number.MINSAFEINTEGER 至Number.MAXSAFEINTEGER，超出这个范围的整数计算或者表示会丢失精度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num &#x3D; Number.MAX_SAFE_INTEGER;  &#x2F;&#x2F; -&gt; 9007199254740991</span><br><span class=\"line\">num &#x3D; num + 1; &#x2F;&#x2F; -&gt; 9007199254740992</span><br><span class=\"line\">&#x2F;&#x2F; 再次加 +1 后无法正常运算num &#x3D; num + 1; &#x2F;&#x2F; -&gt; 9007199254740992</span><br><span class=\"line\">&#x2F;&#x2F; 两个不同的值，却返回了true9007199254740992 &#x3D;&#x3D;&#x3D; 9007199254740993  &#x2F;&#x2F; -&gt; true</span><br></pre></td></tr></table></figure>\n\n<p>为解决此问题，ES2020提供一种新的数据类型：BigInt。使用 BigInt 有两种方式：</p>\n<h5 id=\"在整数字面量后面加n。\"><a href=\"#在整数字面量后面加n。\" class=\"headerlink\" title=\"在整数字面量后面加n。\"></a>在整数字面量后面加n。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bigIntNum &#x3D; 9007199254740993n;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-BigInt-函数。\"><a href=\"#使用-BigInt-函数。\" class=\"headerlink\" title=\"使用 BigInt 函数。\"></a>使用 BigInt 函数。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bigIntNum &#x3D; BigInt(9007199254740);var anOtherBigIntNum &#x3D; BigInt(&#39;9007199254740993&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>通过 BigInt， 我们可以安全的进行大数整型计算。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bigNumRet &#x3D; 9007199254740993n + 9007199254740993n; &#x2F;&#x2F; -&gt; -&gt; 18014398509481986n</span><br><span class=\"line\">bigNumRet.toString(); &#x2F;&#x2F; -&gt; &#39;18014398509481986&#39;</span><br></pre></td></tr></table></figure>\n\n<p>注意:</p>\n<p>BigInt 是一种新的数据原始（primitive）类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof 9007199254740993n; &#x2F;&#x2F; -&gt; &#39;bigint&#39;</span><br></pre></td></tr></table></figure>\n\n<p>尽可能避免通过调用函数 BigInt 方式来实例化超大整型。因为参数的字面量实际也是 Number 类型的一次实例化，超出安全范围的数字，可能会引起精度丢失。</p>\n<h4 id=\"七：String-prototype-matchAll\"><a href=\"#七：String-prototype-matchAll\" class=\"headerlink\" title=\"七：String.prototype.matchAll\"></a>七：String.prototype.matchAll</h4><p>思考下面代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str &#x3D; &#39;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&#39;;var reg &#x3D; &#x2F;&lt;\\w+&gt;(.*?)&lt;\\&#x2F;\\w+&gt;&#x2F;g;</span><br><span class=\"line\">console.log(str.match(reg));&#x2F;&#x2F; -&gt; [&quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&quot;, &quot;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>可以看出返回的数组里包含了父匹配项，但未匹配到子项（group）。移除全局搜索符“g”试试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str &#x3D; &#39;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&#39;;&#x2F;&#x2F; 注意这里没有全局搜素标示符“g”var reg &#x3D; &#x2F;&lt;\\w+&gt;(.*?)&lt;\\&#x2F;\\w+&gt;&#x2F;;console.log(str.match(reg));</span><br><span class=\"line\">&#x2F;&#x2F; 上面会打印出&#x2F;*[    &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&quot;,    &quot;JS&quot;,    index: 0,    input:    &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;,    groups: undefined]*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>这样可以获取到匹配的父项，包括子项（group），但只能获取到第一个满足的匹配字符。能看出上面无法匹配到 <code>正则</code>。</p>\n<p>如果获取到全局所有匹配项，包括子项呢？</p>\n<p>ES2020提供了一种简易的方式：String.prototype.matchAll, 该方法会返回一个迭代器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str &#x3D; &#39;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&#39;;var allMatchs &#x3D; str.matchAll(&#x2F;&lt;\\w+&gt;(.*?)&lt;\\&#x2F;\\w+&gt;&#x2F;g);</span><br><span class=\"line\">for (const match of allMatchs) &#123;  console.log(match);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*第一次迭代返回：[    &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&quot;,    &quot;JS&quot;,    index: 0,    input: &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;,    groups: undefined]</span><br><span class=\"line\">第二次迭代返回：[    &quot;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;,    &quot;正则&quot;,    index: 15,    input: &quot;&lt;text&gt;JS&lt;&#x2F;text&gt;&lt;text&gt;正则&lt;&#x2F;text&gt;&quot;,    groups: undefined]*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>能看出每次迭代中可获取所有的匹配，以及本次匹配的成功的一些其他元信息。</p>\n"},{"title":"前端开发规范","date":"2020-01-17T06:37:14.000Z","excerpt":"命名规范、html规范、css规范、js规范","cover":"/images/spec-ff.jpg","_content":"   \n一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。\n# 命名\n\n## 驼峰式命名法介绍\n\n- Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo\n\n- Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo\n\n  ## 文件资源命名\n\n- 文件名不得含有空格\n\n- 文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )\n\n- 文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。\n\n- 引入资源使用相对路径，不要指定资源所带的具体协议 ( `http:`,`https:` ) ，除非这两者协议都不可用。\n\n不推荐：\n\n```\n<script src=\"http://cdn.com/foundation.min.js\"></script>\n```\n\n推荐\n\n```\n<script src=\"//cdn.com/foundation.min.js\"></script>\n```\n\n## 变量命名\n\n**命名方式** : 小驼峰式命名方法\n**命名规范** : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词\n\n| 类型     | 小写字母 |\n| -------- | -------- |\n| array    | a        |\n| boolean  | b        |\n| function | fn       |\n| int      | i        |\n| object   | o        |\n| regular  | r        |\n| string   | s        |\n\n推荐\n\n```\nvar tableTitle = \"LoginTable\"\n```\n\n不推荐\n\n```\nvar getTitle = \"LoginTable\"\n```\n\n## 函数\n\n**命名方式** : 小驼峰方式 ( 构造函数使用大驼峰命名法 )\n**命名规则** : 前缀为动词\n\n| 动词 | 含义                            | 返回值                                                |\n| ---- | ------------------------------- | ----------------------------------------------------- |\n| can  | 判断是否可执行某个动作 ( 权限 ) | 函数返回一个布尔值。true：可执行；false：不可执行     |\n| has  | 判断是否含有某个值              | 函数返回一个布尔值。true：含有此值；false：不含有此值 |\n| is   | 判断是否为某个值                | 函数返回一个布尔值。true：为某个值；false：不为某个值 |\n| get  | 获取某个值                      | 函数返回一个非布尔值                                  |\n| set  | 设置某个值                      | 无返回值、返回是否设置成功或者返回链式对象            |\n\n推荐：\n\n```\n//是否可阅读\nfunction canRead(){\n    return true;\n}\n\n//获取姓名\nfunction getName{\n    return this.name\n}\n```\n\n## 常量\n\n**命名方法** : 全部大写\n**命名规范** : 使用大写字母和下划线来组合命名，下划线用以分割单词。\n推荐：\n\n```\n var MAX_COUNT = 10;\n var URL = 'http://www.baidu.com';\n```\n\n## 类的成员\n\n- 公共属性和方法 : 同变量命名方式\n- 私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式\n\n推荐(将`name`换成`this`是不是更熟悉了呢)\n\n```\nfunction Student(name) {\n    var _name = name; // 私有成员\n\n    // 公共方法\n    this.getName = function () {\n        return _name;\n    }\n\n    // 公共方式\n    this.setName = function (value) {\n        _name = value;\n    }\n}\nvar st = new Student('tom');\nst.setName('jerry');\nconsole.log(st.getName()); // => jerry：输出_name私有变量的值复制代码\n```\n\n## 注释规范\n\n### 单行注释 ( // )\n\n- 单独一行：//(双斜线)与注释文字之间保留一个空格\n- 在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。\n- 注释代码：//(双斜线)与代码之间保留一个空格。\n\n推荐 : \n\n```\n// 调用了一个函数；1)单独在一行\nsetTitle();\n\nvar maxCount = 10; // 设置最大量；2)在代码后面注释\n\n// setName(); // 3)注释代码复制代码\n```\n\n## 多行注释 ( / *注释说明* / )\n\n- 若开始(/`*`和结束(`*`/)都在一行，推荐采用单行注释\n\n  推荐 : \n\n  ```\n  /*\n  * 代码执行到这里后会调用setTitle()函数\n  * setTitle()：设置title的值\n  */\n  setTitle();复制代码\n  ```\n\n## 函数 ( 方法 ) 注释\n\n函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 [javadoc(百度百科)](http://baike.baidu.com/item/javadoc)\n语法：\n\n```\n/** \n* 函数说明 \n* @关键字 \n*/复制代码\n```\n\n常用注释关键字\n\n| 注释名   | 语法                                      | 含义                      | 示例                                         |\n| -------- | ----------------------------------------- | ------------------------- | -------------------------------------------- |\n| @param   | @param 参数名 {参数类型}  描述信息        | 描述参数的信息            | @param name {String} 传入名称                |\n| @return  | @return {返回类型} 描述信息               | 描述返回值的信息          | @return {Boolean} true:可执行;false:不可执行 |\n| @author  | @author 作者信息 [附属信息：如邮箱、日期] | 描述此函数作者的信息      | @author 张三 2015/07/21                      |\n| @version | @version XX.XX.XX                         | 描述此函数的版本号        | @version 1.0.3                               |\n| @example | @example 示例代码                         | @example setTitle('测试') | 如下                                         |\n\n推荐 :\n\n```\n/**\n - 合并Grid的行\n - @param grid {Ext.Grid.Panel} 需要合并的Grid\n - @param cols {Array} 需要合并列的Index(序号)数组；从0开始计数，序号也包含。\n - @param isAllSome {Boolean} ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样\n - @return void\n - @author polk6 2015/07/21 \n - @example\n - _________________                             _________________\n - |  年龄 |  姓名 |                             |  年龄 |  姓名 |\n - -----------------      mergeCells(grid,[0])   -----------------\n - |  18   |  张三 |              =>             |       |  张三 |\n - -----------------                             -  18   ---------\n - |  18   |  王五 |                             |       |  王五 |\n - -----------------                             -----------------\n*/\nfunction mergeCells(grid, cols, isAllSome) {\n    // Do Something\n}复制代码\n```\n\n# HTML规范\n\n## 文档规范\n\n使用 HTML5 的文档声明类型 : ``\n\n- DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。\n- 使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 \n- 没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。\n- 如果你的页面添加了<!DOCTYP>那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。\n\n## 脚本加载\n\n说到js和css的位置，大家应该都知道js放在下面，css放在上面。\n但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性`async`，将脚本文件放在``内\n**兼容老旧浏览器(IE9-)时**：\n脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。\n**而在现代浏览器中**：\n脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。\n综上所述，\n所有浏览器中推荐:\n\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n  </head>\n  <body>\n    <!-- body goes here -->\n\n    <script src=\"main.js\" async></script>\n  </body>\n</html>\n```\n\n只兼容现代浏览器推荐:\n\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n    <script src=\"main.js\" async></script>\n  </head>\n  <body>\n    <!-- body goes here -->\n  </body>\n</html>\n```\n\n## 语义化\n\n我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。\n\n> 语义化是指：根据元素其被创造出来时的初始意义来使用它。\n> 意思就是用正确的标签干正确的事，而不是只有`div`和`span`。\n\n不推荐：\n\n```\n<b>My page title</b>\n<div class=\"top-navigation\">\n  <div class=\"nav-item\"><a href=\"#home\">Home</a></div>\n  <div class=\"nav-item\"><a href=\"#news\">News</a></div>\n  <div class=\"nav-item\"><a href=\"#about\">About</a></div>\n</div>\n\n<div class=\"news-page\">\n  <div class=\"page-section news\">\n    <div class=\"title\">All news articles</div>\n    <div class=\"news-article\">\n      <h2>Bad article</h2>\n      <div class=\"intro\">Introduction sub-title</div>\n      <div class=\"content\">This is a very bad example for HTML semantics</div>\n      <div class=\"article-side-notes\">I think I'm more on the side and should not receive the main credits</div>\n      <div class=\"article-foot-notes\">\n        This article was created by David <div class=\"time\">2014-01-01 00:00</div>\n      </div>\n    </div>\n\n    <div class=\"section-footer\">\n      Related sections: Events, Public holidays\n    </div>\n  </div>\n</div>\n\n<div class=\"page-footer\">\n  Copyright 2014\n</div>\n```\n\n推荐\n\n```\nhtml 代码:\n<!-- The page header should go into a header element -->\n<header>\n  <!-- As this title belongs to the page structure it's a heading and h1 should be used -->\n  <h1>My page title</h1>\n</header>\n\n<!-- All navigation should go into a nav element -->\n<nav class=\"top-navigation\">\n  <!-- A listing of elements should always go to UL (OL for ordered listings) -->\n  <ul>\n    <li class=\"nav-item\"><a href=\"#home\">Home</a></li>\n    <li class=\"nav-item\"><a href=\"#news\">News</a></li>\n    <li class=\"nav-item\"><a href=\"#about\">About</a></li>\n  </ul>\n</nav>\n\n<!-- The main part of the page should go into a main element (also use role=\"main\" for accessibility) -->\n<main class=\"news-page\" role=\"main\">\n  <!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. -->\n  <section class=\"page-section news\">\n    <!-- A section header should go into a section element -->\n    <header>\n      <!-- As a page section belongs to the page structure heading elements should be used (in this case h2) -->\n      <h2 class=\"title\">All news articles</h2>\n    </header>\n\n    <!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other\n     re-usable module / section that can occur multiple times on a page) a article element should be used -->\n    <article class=\"news-article\">\n      <!-- An article can contain a header that contains the summary / introduction information of the article -->\n      <header>\n        <!-- As a article title does not belong to the overall page structure there should not be any heading tag! -->\n        <div class=\"article-title\">Good article</div>\n        <!-- Small can optionally be used to reduce importance -->\n        <small class=\"intro\">Introduction sub-title</small>\n      </header>\n\n      <!-- For the main content in a section or article there is no semantic element -->\n      <div class=\"content\">\n        <p>This is a good example for HTML semantics</p>\n      </div>\n      <!-- For content that is represented as side note or less important information in a given context use aside -->\n      <aside class=\"article-side-notes\">\n        <p>I think I'm more on the side and should not receive the main credits</p>\n      </aside>\n      <!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element -->\n      <footer class=\"article-foot-notes\">\n        <!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time\n         while the actual text in the time element can also be more human readable / relative -->\n        <p>This article was created by David <time datetime=\"2014-01-01 00:00\" class=\"time\">1 month ago</time></p>\n      </footer>\n    </article>\n\n    <!-- In a section, footnotes or similar information can also go into a footer element -->\n    <footer class=\"section-footer\">\n      <p>Related sections: Events, Public holidays</p>\n    </footer>\n  </section>\n</main>\n\n<!-- Your page footer should go into a global footer element -->\n<footer class=\"page-footer\">\n  Copyright 2014\n</footer>\n```\n\n## alt标签不为空\n\n<img>标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。 假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：\n\n- 网速太慢\n- src 属性中的错误\n- 浏览器禁用图像\n- 用户使用的是屏幕阅读器\n\n从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容\n\n## 结构、表现、行为三者分离\n\n尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。\n在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。\n建议：\n\n- 不使用超过一到两张样式表\n- 不使用超过一到两个脚本（学会用合并脚本）\n- 不使用行内样式（`.no-good {}`）\n- 不在元素上使用 style 属性（``）\n- 不使用行内脚本（`alert('no good')`）\n- 不使用表象元素（`i.e. , , , , `）\n- 不使用表象 class 名（`i.e. red, left, center`）\n\n## HTML只关注内容\n\n- HTML只显示展示内容信息\n- 不要引入一些特定的 HTML 结构来解决一些视觉设计问题\n- 不要将`img`元素当做专门用来做视觉设计的元素\n- 样式上的问题应该使用css解决\n\n不推荐：\n\n```\n<!-- We should not introduce an additional element just to solve a design problem  -->\n<span class=\"text-box\">\n  <span class=\"square\"></span>\n  See the square next to me?\n</span>\ncss 代码:\n.text-box > .square {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n\n推荐\n\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n\n**图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。**\n\n不推荐\n\n```\nhtml 代码:\n<!-- Content images should never be used for design elements!  -->\n<span class=\"text-box\">\n  <img src=\"square.svg\" alt=\"Square\" />\n  See the square next to me?\n</span>\n```\n\n推荐\n\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element with a background image to solve the problem */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background: url(square.svg) no-repeat;\n  background-size: 100%;\n}\n```\n\n# js规范\n\n## 避免全局命名空间污染\n\n防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。\n\nIIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。\n不推荐:\n\n```\nvar x = 10,\n    y = 100;\n\n// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this\n// will be stored in the window object. This is very unclean and needs to be avoided.\nconsole.log(window.x + ' ' + window.y);\n```\n\n推荐\n\n```\n// We declare a IIFE and pass parameters into the function that we will use from the global space\n(function(log, w, undefined){\n  'use strict';\n\n  var x = 10,\n      y = 100;\n\n  // Will output 'true true'\n  log((w.x === undefined) + ' ' + (w.y === undefined));\n\n}(window.console.log, window));\n```\n\n推荐的IIFE写法:\n\n```\n(function(){\n  'use strict';\n\n  // Code goes here\n\n}());\n```\n\n如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：\n\n```\n(function($, w, d){\n  'use strict';\n\n  $(function() {\n    w.alert(d.querySelectorAll('div').length);\n  });\n}(jQuery, window, document));\n```\n\n## 严格模式\n\nECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。\n\n严格模式会阻止使用在未来很可能被引入的预留关键字。\n\n你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。\n\n## 变量声明\n\n总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如\n\n```\nvar a = b = 0; //b会被隐式的创建为全局变量复制代码\n```\n\n所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：\n\n```\n(function (){\n  'use strict'\n  var a = 0,\n      b = 0,\n      c = 0,\n      i,\n      j,\n      myObject();\n}())\n```\n\n采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。\n\n## js声明提前\n\njavascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）\n例如：\n\n```\n(function(log){\n  'use strict';\n\n  var a = 10;\n\n  for(var i = 0; i < a; i++) {\n    var b = i * i;\n    log(b);\n  }\n\n  if(a === 10) {\n    var f = function() {\n      log(a);\n    };\n    f();\n  }\n\n  function x() {\n    log('Mr. X!');\n  }\n  x();\n\n}(window.console.log));\n```\n\n提升后的js\n\n```\n(function(log){\n  'use strict';\n  // All variables used in the closure will be hoisted to the top of the function\n  var a,\n      i,\n      b,\n      f;\n  // All functions in the closure will be hoisted to the top\n  function x() {\n    log('Mr. X!');\n  }\n\n  a = 10;\n\n  for(i = 0; i < a; i++) {\n    b = i * i;\n    log(b);\n  }\n\n  if(a === 10) {\n    // Function assignments will only result in hoisted variables but the function body will not be hoisted\n    // Only by using a real function declaration the whole function will be hoisted with its body\n    f = function() {\n      log(a);\n    };\n    f();\n  }\n\n  x();\n\n}(window.console.log));\n```\n\n## 使用严格等\n\n总是使用 `===` 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：\n\n```\n(function(log){\n  'use strict';\n\n  log('0' == 0); // true\n  log('' == false); // true\n  log('1' == true); // true\n  log(null == undefined); // true\n\n  var x = {\n    valueOf: function() {\n      return 'X';\n    }\n  };\n\n  log(x == 'X');\n\n}(window.console.log));\n```\n\n### 等同== 和严格等===的区别\n\n- ==， 两边值类型不同的时候，要先进行类型转换，再比较。\n- ===，不做类型转换，类型不同的一定不等。\n\n==等同操作符\n\n- 如果两个值具有相同类型，会进行===比较，返回===的比较值 \n- 如果两个值不具有相同类型，也有可能返回true \n- 如果一个值是null另一个值是undefined，返回true \n- 如果一个值是string另个是number，会把string转换成number再进行比较 \n- 如果一个值是true，会把它转成1再比较，false会转成0 \n\n```\nconsole.log( false == null )      // false\nconsole.log( false == undefined ) // false\nconsole.log( false == 0 )         // true\nconsole.log( false == '' )        // true\nconsole.log( false == NaN )       // false\n\nconsole.log( null == undefined ) // true\nconsole.log( null == 0 )         // false\nconsole.log( null == '' )        // false\nconsole.log( null == NaN )       // false\n\nconsole.log( undefined == 0)   // false\nconsole.log( undefined == '')  // false\nconsole.log( undefined == NaN) // false\n\nconsole.log( 0 == '' )  // true\nconsole.log( 0 == NaN ) // false\n```\n\n总结一下==\n\n- false 除了和自身比较为 true 外，和 0，\"\" 比较也为 true\n- null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个\n- 0 除了和 false 比较为 true，还有空字符串 ''\" 和空数组 []\n- 空字符串 '' 除了和 false 比较为 true，还有一个数字 0\n\n> ==, >, <, +, -, ... 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 `valueOf/toString`的话，==就会产生副作用.\n\n例如：\n\n```\nArray.prototype.valueOf = function() {\n  this[0]++;\n  return this;\n}\nvar x = [1, 2, 3];\nx == 0;\nconsole.log(x);   // [2, 2, 3]\n```\n\n===操作符：\n\n- 要是两个值类型不同，返回false \n- 要是两个值都是number类型，并且数值相同，返回true \n- 要是两个值都是stirng，并且两个值的String内容相同，返回true \n- 要是两个值都是true或者都是false，返回true \n- 要是两个值都是指向相同的Object，Arraya或者function，返回true \n- 要是两个值都是null或者都是undefined，返回true\n\n## 真假判断\n\n- js中以下内容为假：\n- false\n- null\n- undefined\n- 0\n- '' (空字符串)\n- NaN\n\n## 设置默认参数\n\n辑操作符 || 和 && 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y\n\n```\nif(!x) {\n  if(!y) {\n    x = 1;\n  } else {\n    x = y;\n  }\n}\n```\n\n 等同于：\n\n```\n x = x || y || 1;复制代码\n```\n\n这一小技巧经常用来给方法设定默认的参数。\n\n```\n(function(log){\n  'use strict';\n\n  function multiply(a, b) {\n    a = a || 1;\n    b = b || 1;\n\n    log('Result ' + a * b);\n  }\n\n  multiply(); // Result 1\n  multiply(10); // Result 10\n  multiply(3, NaN); // Result 3\n  multiply(9, 5); // Result 45\n\n}(window.console.log));\n```\n\n## 不使用eval()函数\n\n就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。\neval()函数的作用是返回任意字符串，当作js代码来处理。\n\n## this关键字\n\n只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。\n\n正因为它是如此容易地被搞错，请限制它的使用场景：\n\n- 在构造函数中\n- 在对象的方法中（包括由此创建出的闭包内）\n\n## 首选函数式风格\n\n函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。\n\n接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。\n不推荐\n\n```\n(function(log){\n  'use strict';\n\n  var arr = [10, 3, 7, 9, 100, 20],\n      sum = 0,\n      i;\n\n\n  for(i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  log('The sum of array ' + arr + ' is: ' + sum)\n\n}(window.console.log));\n```\n\n推荐(函数式编程)：\n\n```\n(function(log){\n  'use strict';\n\n  var arr = [10, 3, 7, 9, 100, 20];\n\n  var sum = arr.reduce(function(prevValue, currentValue) {\n    return prevValue + currentValue;\n  }, 0);\n\n  log('The sum of array ' + arr + ' is: ' + sum);\n\n}(window.console.log));复制代码\n```\n\n## 修改内建对象的原型链\n\n修改内建的诸如 `Object.prototype` 和 `Array.prototype` 是被严厉禁止的。修改其它的内建对象比如 `Function.prototype`，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。\n\n## 三元条件判断（if 的快捷方法）\n\n用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。\n不推荐：\n\n```\nif(x === 10) {\n  return 'valid';\n} else {\n  return 'invalid';\n}\n```\n\n推荐：\n\n```\nreturn x === 10 ? 'valid' : 'invalid'复制代码\n```\n\n# JSHint\n\n在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用`===`而不是`==`，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例\n\n## webstorm内置JSHint\n\n对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。\n在Settings => language & frameworks => JavaScript => Code Quality Tolls => JSHint\n\n![webstorm中的jshint](https://user-gold-cdn.xitu.io/2017/5/30/7e7984a9e668c6d03b9d2fe0ab8f9bd2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)webstorm中的jshint\n\n这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考[官方文档](http://jshint.com/docs/)\n\n\n\n| 名称      | 含义                                           |\n| --------- | ---------------------------------------------- |\n| curly     | 循环或者条件语句必须使用花括号包住             |\n| eqeqeq    | 使用强制等===                                  |\n| newcap    | 对于首字母大写的函数（声明的类），强制使用new  |\n| noarg     | 禁用arguments.caller和arguments.callee         |\n| sub       | 对于属性使用aaa.bbb而不是aaa['bbb']            |\n| undef     | 查找所有未定义的变量                           |\n| boss      | 查找类似与if(a = 0)这样的代码                  |\n| node      | 指定运行环境为node                             |\n| strict    | 必须使用严格模式                               |\n| asi       | 允许省略分号                                   |\n| bitwise   | 禁止使用位运算符，比如经常把&&写错& 规避此错误 |\n| jquery    | 定义全局暴露的jQuery库                         |\n| evil      | 禁止使用eval                                   |\n| maxdepth  | 嵌套的最大深度                                 |\n| maxparams | 参数的最大个数                                 |\n\n# css规范\n\n## id和class的命名\n\nID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称\n不推荐 :\n\n```\n.fw-800 {\n  font-weight: 800;\n}\n\n.red {\n  color: red;\n}\n```\n\n推荐 :\n\n```\n.heavy {\n  font-weight: 800;\n}\n\n.important {\n  color: red;\n}\n```\n\n## 合理的使用ID\n\n一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class\n不推荐：\n\n```\n#content .title {\n  font-size: 2em;\n}\n```\n\n推荐：\n\n```\n.content .title {\n  font-size: 2em;\n}\n```\n\n## css选择器中避免使用标签名\n\n从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。\n\n## 使用子选择器\n\n很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。\n有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。\n然而，在任何情况下，这是一个非常不好的做法。\n如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。\n不推荐:\n\n```\n.content .title {\n  font-size: 2rem;\n}\n```\n\n推荐\n\n```\n.content > .title {\n  font-size: 2rem;\n}\n```\n\n## 尽量使用缩写属性\n\n尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。\n不推荐：\n\n```\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n```\n\n推荐：\n\n```\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n## 0后面不带单位\n\n省略0后面的单位，\n不推荐：\n\n```\npadding-bottom: 0px;\nmargin: 0em;\n```\n\n推荐：\n\n```\npadding-bottom: 0;\nmargin: 0;\n```\n\n## 属性格式\n\n- 为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。\n- 属性名的冒号后使用一个空格。出于一致性的原因，\n  属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。\n- 每个选择器和属性声明总是使用新的一行。\n- 属性选择器或属性值用双引号（””），而不是单引号（”）括起来。\n- URI值（url()）不要使用引号。\n\n作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：\n\n结构性属性：\n\n1. display\n2. position, left, top, right etc.\n3. overflow, float, clear etc.\n4. margin, padding\n\n表现性属性：\n\n- background, border etc.\n- font, text\n\n不推荐：\n\n```\n .box {\n  font-family: 'Arial', sans-serif;\n  border: 3px solid #ddd;\n  left: 30%;\n  position: absolute;\n  text-transform: uppercase;\n  background-color: #eee;\n  right: 30%;\n  isplay: block;\n  font-size: 1.5rem;\n  overflow: hidden;\n  padding: 1em;\n  margin: 1em;\n}\n```\n\n推荐：\n\n```\n.box {\n  display: block;\n  position: absolute;\n  left: 30%;\n  right: 30%;\n  overflow: hidden;\n  margin: 1em;\n  padding: 1em;\n  background-color: #eee;\n  border: 3px solid #ddd;\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  text-transform: uppercase;\n}\n```\n\n\n","source":"_posts/front-end-specification.md","raw":"---\ntitle: 前端开发规范\ndate: 2020-01-17 14:37:14\nexcerpt: 命名规范、html规范、css规范、js规范\ncover: /images/spec-ff.jpg\n---\n   \n一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。\n# 命名\n\n## 驼峰式命名法介绍\n\n- Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo\n\n- Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo\n\n  ## 文件资源命名\n\n- 文件名不得含有空格\n\n- 文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )\n\n- 文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。\n\n- 引入资源使用相对路径，不要指定资源所带的具体协议 ( `http:`,`https:` ) ，除非这两者协议都不可用。\n\n不推荐：\n\n```\n<script src=\"http://cdn.com/foundation.min.js\"></script>\n```\n\n推荐\n\n```\n<script src=\"//cdn.com/foundation.min.js\"></script>\n```\n\n## 变量命名\n\n**命名方式** : 小驼峰式命名方法\n**命名规范** : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词\n\n| 类型     | 小写字母 |\n| -------- | -------- |\n| array    | a        |\n| boolean  | b        |\n| function | fn       |\n| int      | i        |\n| object   | o        |\n| regular  | r        |\n| string   | s        |\n\n推荐\n\n```\nvar tableTitle = \"LoginTable\"\n```\n\n不推荐\n\n```\nvar getTitle = \"LoginTable\"\n```\n\n## 函数\n\n**命名方式** : 小驼峰方式 ( 构造函数使用大驼峰命名法 )\n**命名规则** : 前缀为动词\n\n| 动词 | 含义                            | 返回值                                                |\n| ---- | ------------------------------- | ----------------------------------------------------- |\n| can  | 判断是否可执行某个动作 ( 权限 ) | 函数返回一个布尔值。true：可执行；false：不可执行     |\n| has  | 判断是否含有某个值              | 函数返回一个布尔值。true：含有此值；false：不含有此值 |\n| is   | 判断是否为某个值                | 函数返回一个布尔值。true：为某个值；false：不为某个值 |\n| get  | 获取某个值                      | 函数返回一个非布尔值                                  |\n| set  | 设置某个值                      | 无返回值、返回是否设置成功或者返回链式对象            |\n\n推荐：\n\n```\n//是否可阅读\nfunction canRead(){\n    return true;\n}\n\n//获取姓名\nfunction getName{\n    return this.name\n}\n```\n\n## 常量\n\n**命名方法** : 全部大写\n**命名规范** : 使用大写字母和下划线来组合命名，下划线用以分割单词。\n推荐：\n\n```\n var MAX_COUNT = 10;\n var URL = 'http://www.baidu.com';\n```\n\n## 类的成员\n\n- 公共属性和方法 : 同变量命名方式\n- 私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式\n\n推荐(将`name`换成`this`是不是更熟悉了呢)\n\n```\nfunction Student(name) {\n    var _name = name; // 私有成员\n\n    // 公共方法\n    this.getName = function () {\n        return _name;\n    }\n\n    // 公共方式\n    this.setName = function (value) {\n        _name = value;\n    }\n}\nvar st = new Student('tom');\nst.setName('jerry');\nconsole.log(st.getName()); // => jerry：输出_name私有变量的值复制代码\n```\n\n## 注释规范\n\n### 单行注释 ( // )\n\n- 单独一行：//(双斜线)与注释文字之间保留一个空格\n- 在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。\n- 注释代码：//(双斜线)与代码之间保留一个空格。\n\n推荐 : \n\n```\n// 调用了一个函数；1)单独在一行\nsetTitle();\n\nvar maxCount = 10; // 设置最大量；2)在代码后面注释\n\n// setName(); // 3)注释代码复制代码\n```\n\n## 多行注释 ( / *注释说明* / )\n\n- 若开始(/`*`和结束(`*`/)都在一行，推荐采用单行注释\n\n  推荐 : \n\n  ```\n  /*\n  * 代码执行到这里后会调用setTitle()函数\n  * setTitle()：设置title的值\n  */\n  setTitle();复制代码\n  ```\n\n## 函数 ( 方法 ) 注释\n\n函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 [javadoc(百度百科)](http://baike.baidu.com/item/javadoc)\n语法：\n\n```\n/** \n* 函数说明 \n* @关键字 \n*/复制代码\n```\n\n常用注释关键字\n\n| 注释名   | 语法                                      | 含义                      | 示例                                         |\n| -------- | ----------------------------------------- | ------------------------- | -------------------------------------------- |\n| @param   | @param 参数名 {参数类型}  描述信息        | 描述参数的信息            | @param name {String} 传入名称                |\n| @return  | @return {返回类型} 描述信息               | 描述返回值的信息          | @return {Boolean} true:可执行;false:不可执行 |\n| @author  | @author 作者信息 [附属信息：如邮箱、日期] | 描述此函数作者的信息      | @author 张三 2015/07/21                      |\n| @version | @version XX.XX.XX                         | 描述此函数的版本号        | @version 1.0.3                               |\n| @example | @example 示例代码                         | @example setTitle('测试') | 如下                                         |\n\n推荐 :\n\n```\n/**\n - 合并Grid的行\n - @param grid {Ext.Grid.Panel} 需要合并的Grid\n - @param cols {Array} 需要合并列的Index(序号)数组；从0开始计数，序号也包含。\n - @param isAllSome {Boolean} ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样\n - @return void\n - @author polk6 2015/07/21 \n - @example\n - _________________                             _________________\n - |  年龄 |  姓名 |                             |  年龄 |  姓名 |\n - -----------------      mergeCells(grid,[0])   -----------------\n - |  18   |  张三 |              =>             |       |  张三 |\n - -----------------                             -  18   ---------\n - |  18   |  王五 |                             |       |  王五 |\n - -----------------                             -----------------\n*/\nfunction mergeCells(grid, cols, isAllSome) {\n    // Do Something\n}复制代码\n```\n\n# HTML规范\n\n## 文档规范\n\n使用 HTML5 的文档声明类型 : ``\n\n- DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。\n- 使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 \n- 没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。\n- 如果你的页面添加了<!DOCTYP>那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。\n\n## 脚本加载\n\n说到js和css的位置，大家应该都知道js放在下面，css放在上面。\n但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性`async`，将脚本文件放在``内\n**兼容老旧浏览器(IE9-)时**：\n脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。\n**而在现代浏览器中**：\n脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。\n综上所述，\n所有浏览器中推荐:\n\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n  </head>\n  <body>\n    <!-- body goes here -->\n\n    <script src=\"main.js\" async></script>\n  </body>\n</html>\n```\n\n只兼容现代浏览器推荐:\n\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n    <script src=\"main.js\" async></script>\n  </head>\n  <body>\n    <!-- body goes here -->\n  </body>\n</html>\n```\n\n## 语义化\n\n我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。\n\n> 语义化是指：根据元素其被创造出来时的初始意义来使用它。\n> 意思就是用正确的标签干正确的事，而不是只有`div`和`span`。\n\n不推荐：\n\n```\n<b>My page title</b>\n<div class=\"top-navigation\">\n  <div class=\"nav-item\"><a href=\"#home\">Home</a></div>\n  <div class=\"nav-item\"><a href=\"#news\">News</a></div>\n  <div class=\"nav-item\"><a href=\"#about\">About</a></div>\n</div>\n\n<div class=\"news-page\">\n  <div class=\"page-section news\">\n    <div class=\"title\">All news articles</div>\n    <div class=\"news-article\">\n      <h2>Bad article</h2>\n      <div class=\"intro\">Introduction sub-title</div>\n      <div class=\"content\">This is a very bad example for HTML semantics</div>\n      <div class=\"article-side-notes\">I think I'm more on the side and should not receive the main credits</div>\n      <div class=\"article-foot-notes\">\n        This article was created by David <div class=\"time\">2014-01-01 00:00</div>\n      </div>\n    </div>\n\n    <div class=\"section-footer\">\n      Related sections: Events, Public holidays\n    </div>\n  </div>\n</div>\n\n<div class=\"page-footer\">\n  Copyright 2014\n</div>\n```\n\n推荐\n\n```\nhtml 代码:\n<!-- The page header should go into a header element -->\n<header>\n  <!-- As this title belongs to the page structure it's a heading and h1 should be used -->\n  <h1>My page title</h1>\n</header>\n\n<!-- All navigation should go into a nav element -->\n<nav class=\"top-navigation\">\n  <!-- A listing of elements should always go to UL (OL for ordered listings) -->\n  <ul>\n    <li class=\"nav-item\"><a href=\"#home\">Home</a></li>\n    <li class=\"nav-item\"><a href=\"#news\">News</a></li>\n    <li class=\"nav-item\"><a href=\"#about\">About</a></li>\n  </ul>\n</nav>\n\n<!-- The main part of the page should go into a main element (also use role=\"main\" for accessibility) -->\n<main class=\"news-page\" role=\"main\">\n  <!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. -->\n  <section class=\"page-section news\">\n    <!-- A section header should go into a section element -->\n    <header>\n      <!-- As a page section belongs to the page structure heading elements should be used (in this case h2) -->\n      <h2 class=\"title\">All news articles</h2>\n    </header>\n\n    <!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other\n     re-usable module / section that can occur multiple times on a page) a article element should be used -->\n    <article class=\"news-article\">\n      <!-- An article can contain a header that contains the summary / introduction information of the article -->\n      <header>\n        <!-- As a article title does not belong to the overall page structure there should not be any heading tag! -->\n        <div class=\"article-title\">Good article</div>\n        <!-- Small can optionally be used to reduce importance -->\n        <small class=\"intro\">Introduction sub-title</small>\n      </header>\n\n      <!-- For the main content in a section or article there is no semantic element -->\n      <div class=\"content\">\n        <p>This is a good example for HTML semantics</p>\n      </div>\n      <!-- For content that is represented as side note or less important information in a given context use aside -->\n      <aside class=\"article-side-notes\">\n        <p>I think I'm more on the side and should not receive the main credits</p>\n      </aside>\n      <!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element -->\n      <footer class=\"article-foot-notes\">\n        <!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time\n         while the actual text in the time element can also be more human readable / relative -->\n        <p>This article was created by David <time datetime=\"2014-01-01 00:00\" class=\"time\">1 month ago</time></p>\n      </footer>\n    </article>\n\n    <!-- In a section, footnotes or similar information can also go into a footer element -->\n    <footer class=\"section-footer\">\n      <p>Related sections: Events, Public holidays</p>\n    </footer>\n  </section>\n</main>\n\n<!-- Your page footer should go into a global footer element -->\n<footer class=\"page-footer\">\n  Copyright 2014\n</footer>\n```\n\n## alt标签不为空\n\n<img>标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。 假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：\n\n- 网速太慢\n- src 属性中的错误\n- 浏览器禁用图像\n- 用户使用的是屏幕阅读器\n\n从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容\n\n## 结构、表现、行为三者分离\n\n尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。\n在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。\n建议：\n\n- 不使用超过一到两张样式表\n- 不使用超过一到两个脚本（学会用合并脚本）\n- 不使用行内样式（`.no-good {}`）\n- 不在元素上使用 style 属性（``）\n- 不使用行内脚本（`alert('no good')`）\n- 不使用表象元素（`i.e. , , , , `）\n- 不使用表象 class 名（`i.e. red, left, center`）\n\n## HTML只关注内容\n\n- HTML只显示展示内容信息\n- 不要引入一些特定的 HTML 结构来解决一些视觉设计问题\n- 不要将`img`元素当做专门用来做视觉设计的元素\n- 样式上的问题应该使用css解决\n\n不推荐：\n\n```\n<!-- We should not introduce an additional element just to solve a design problem  -->\n<span class=\"text-box\">\n  <span class=\"square\"></span>\n  See the square next to me?\n</span>\ncss 代码:\n.text-box > .square {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n\n推荐\n\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n\n**图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。**\n\n不推荐\n\n```\nhtml 代码:\n<!-- Content images should never be used for design elements!  -->\n<span class=\"text-box\">\n  <img src=\"square.svg\" alt=\"Square\" />\n  See the square next to me?\n</span>\n```\n\n推荐\n\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element with a background image to solve the problem */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background: url(square.svg) no-repeat;\n  background-size: 100%;\n}\n```\n\n# js规范\n\n## 避免全局命名空间污染\n\n防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。\n\nIIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。\n不推荐:\n\n```\nvar x = 10,\n    y = 100;\n\n// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this\n// will be stored in the window object. This is very unclean and needs to be avoided.\nconsole.log(window.x + ' ' + window.y);\n```\n\n推荐\n\n```\n// We declare a IIFE and pass parameters into the function that we will use from the global space\n(function(log, w, undefined){\n  'use strict';\n\n  var x = 10,\n      y = 100;\n\n  // Will output 'true true'\n  log((w.x === undefined) + ' ' + (w.y === undefined));\n\n}(window.console.log, window));\n```\n\n推荐的IIFE写法:\n\n```\n(function(){\n  'use strict';\n\n  // Code goes here\n\n}());\n```\n\n如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：\n\n```\n(function($, w, d){\n  'use strict';\n\n  $(function() {\n    w.alert(d.querySelectorAll('div').length);\n  });\n}(jQuery, window, document));\n```\n\n## 严格模式\n\nECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。\n\n严格模式会阻止使用在未来很可能被引入的预留关键字。\n\n你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。\n\n## 变量声明\n\n总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如\n\n```\nvar a = b = 0; //b会被隐式的创建为全局变量复制代码\n```\n\n所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：\n\n```\n(function (){\n  'use strict'\n  var a = 0,\n      b = 0,\n      c = 0,\n      i,\n      j,\n      myObject();\n}())\n```\n\n采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。\n\n## js声明提前\n\njavascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）\n例如：\n\n```\n(function(log){\n  'use strict';\n\n  var a = 10;\n\n  for(var i = 0; i < a; i++) {\n    var b = i * i;\n    log(b);\n  }\n\n  if(a === 10) {\n    var f = function() {\n      log(a);\n    };\n    f();\n  }\n\n  function x() {\n    log('Mr. X!');\n  }\n  x();\n\n}(window.console.log));\n```\n\n提升后的js\n\n```\n(function(log){\n  'use strict';\n  // All variables used in the closure will be hoisted to the top of the function\n  var a,\n      i,\n      b,\n      f;\n  // All functions in the closure will be hoisted to the top\n  function x() {\n    log('Mr. X!');\n  }\n\n  a = 10;\n\n  for(i = 0; i < a; i++) {\n    b = i * i;\n    log(b);\n  }\n\n  if(a === 10) {\n    // Function assignments will only result in hoisted variables but the function body will not be hoisted\n    // Only by using a real function declaration the whole function will be hoisted with its body\n    f = function() {\n      log(a);\n    };\n    f();\n  }\n\n  x();\n\n}(window.console.log));\n```\n\n## 使用严格等\n\n总是使用 `===` 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：\n\n```\n(function(log){\n  'use strict';\n\n  log('0' == 0); // true\n  log('' == false); // true\n  log('1' == true); // true\n  log(null == undefined); // true\n\n  var x = {\n    valueOf: function() {\n      return 'X';\n    }\n  };\n\n  log(x == 'X');\n\n}(window.console.log));\n```\n\n### 等同== 和严格等===的区别\n\n- ==， 两边值类型不同的时候，要先进行类型转换，再比较。\n- ===，不做类型转换，类型不同的一定不等。\n\n==等同操作符\n\n- 如果两个值具有相同类型，会进行===比较，返回===的比较值 \n- 如果两个值不具有相同类型，也有可能返回true \n- 如果一个值是null另一个值是undefined，返回true \n- 如果一个值是string另个是number，会把string转换成number再进行比较 \n- 如果一个值是true，会把它转成1再比较，false会转成0 \n\n```\nconsole.log( false == null )      // false\nconsole.log( false == undefined ) // false\nconsole.log( false == 0 )         // true\nconsole.log( false == '' )        // true\nconsole.log( false == NaN )       // false\n\nconsole.log( null == undefined ) // true\nconsole.log( null == 0 )         // false\nconsole.log( null == '' )        // false\nconsole.log( null == NaN )       // false\n\nconsole.log( undefined == 0)   // false\nconsole.log( undefined == '')  // false\nconsole.log( undefined == NaN) // false\n\nconsole.log( 0 == '' )  // true\nconsole.log( 0 == NaN ) // false\n```\n\n总结一下==\n\n- false 除了和自身比较为 true 外，和 0，\"\" 比较也为 true\n- null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个\n- 0 除了和 false 比较为 true，还有空字符串 ''\" 和空数组 []\n- 空字符串 '' 除了和 false 比较为 true，还有一个数字 0\n\n> ==, >, <, +, -, ... 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 `valueOf/toString`的话，==就会产生副作用.\n\n例如：\n\n```\nArray.prototype.valueOf = function() {\n  this[0]++;\n  return this;\n}\nvar x = [1, 2, 3];\nx == 0;\nconsole.log(x);   // [2, 2, 3]\n```\n\n===操作符：\n\n- 要是两个值类型不同，返回false \n- 要是两个值都是number类型，并且数值相同，返回true \n- 要是两个值都是stirng，并且两个值的String内容相同，返回true \n- 要是两个值都是true或者都是false，返回true \n- 要是两个值都是指向相同的Object，Arraya或者function，返回true \n- 要是两个值都是null或者都是undefined，返回true\n\n## 真假判断\n\n- js中以下内容为假：\n- false\n- null\n- undefined\n- 0\n- '' (空字符串)\n- NaN\n\n## 设置默认参数\n\n辑操作符 || 和 && 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y\n\n```\nif(!x) {\n  if(!y) {\n    x = 1;\n  } else {\n    x = y;\n  }\n}\n```\n\n 等同于：\n\n```\n x = x || y || 1;复制代码\n```\n\n这一小技巧经常用来给方法设定默认的参数。\n\n```\n(function(log){\n  'use strict';\n\n  function multiply(a, b) {\n    a = a || 1;\n    b = b || 1;\n\n    log('Result ' + a * b);\n  }\n\n  multiply(); // Result 1\n  multiply(10); // Result 10\n  multiply(3, NaN); // Result 3\n  multiply(9, 5); // Result 45\n\n}(window.console.log));\n```\n\n## 不使用eval()函数\n\n就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。\neval()函数的作用是返回任意字符串，当作js代码来处理。\n\n## this关键字\n\n只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。\n\n正因为它是如此容易地被搞错，请限制它的使用场景：\n\n- 在构造函数中\n- 在对象的方法中（包括由此创建出的闭包内）\n\n## 首选函数式风格\n\n函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。\n\n接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。\n不推荐\n\n```\n(function(log){\n  'use strict';\n\n  var arr = [10, 3, 7, 9, 100, 20],\n      sum = 0,\n      i;\n\n\n  for(i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  log('The sum of array ' + arr + ' is: ' + sum)\n\n}(window.console.log));\n```\n\n推荐(函数式编程)：\n\n```\n(function(log){\n  'use strict';\n\n  var arr = [10, 3, 7, 9, 100, 20];\n\n  var sum = arr.reduce(function(prevValue, currentValue) {\n    return prevValue + currentValue;\n  }, 0);\n\n  log('The sum of array ' + arr + ' is: ' + sum);\n\n}(window.console.log));复制代码\n```\n\n## 修改内建对象的原型链\n\n修改内建的诸如 `Object.prototype` 和 `Array.prototype` 是被严厉禁止的。修改其它的内建对象比如 `Function.prototype`，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。\n\n## 三元条件判断（if 的快捷方法）\n\n用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。\n不推荐：\n\n```\nif(x === 10) {\n  return 'valid';\n} else {\n  return 'invalid';\n}\n```\n\n推荐：\n\n```\nreturn x === 10 ? 'valid' : 'invalid'复制代码\n```\n\n# JSHint\n\n在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用`===`而不是`==`，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例\n\n## webstorm内置JSHint\n\n对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。\n在Settings => language & frameworks => JavaScript => Code Quality Tolls => JSHint\n\n![webstorm中的jshint](https://user-gold-cdn.xitu.io/2017/5/30/7e7984a9e668c6d03b9d2fe0ab8f9bd2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)webstorm中的jshint\n\n这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考[官方文档](http://jshint.com/docs/)\n\n\n\n| 名称      | 含义                                           |\n| --------- | ---------------------------------------------- |\n| curly     | 循环或者条件语句必须使用花括号包住             |\n| eqeqeq    | 使用强制等===                                  |\n| newcap    | 对于首字母大写的函数（声明的类），强制使用new  |\n| noarg     | 禁用arguments.caller和arguments.callee         |\n| sub       | 对于属性使用aaa.bbb而不是aaa['bbb']            |\n| undef     | 查找所有未定义的变量                           |\n| boss      | 查找类似与if(a = 0)这样的代码                  |\n| node      | 指定运行环境为node                             |\n| strict    | 必须使用严格模式                               |\n| asi       | 允许省略分号                                   |\n| bitwise   | 禁止使用位运算符，比如经常把&&写错& 规避此错误 |\n| jquery    | 定义全局暴露的jQuery库                         |\n| evil      | 禁止使用eval                                   |\n| maxdepth  | 嵌套的最大深度                                 |\n| maxparams | 参数的最大个数                                 |\n\n# css规范\n\n## id和class的命名\n\nID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称\n不推荐 :\n\n```\n.fw-800 {\n  font-weight: 800;\n}\n\n.red {\n  color: red;\n}\n```\n\n推荐 :\n\n```\n.heavy {\n  font-weight: 800;\n}\n\n.important {\n  color: red;\n}\n```\n\n## 合理的使用ID\n\n一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class\n不推荐：\n\n```\n#content .title {\n  font-size: 2em;\n}\n```\n\n推荐：\n\n```\n.content .title {\n  font-size: 2em;\n}\n```\n\n## css选择器中避免使用标签名\n\n从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。\n\n## 使用子选择器\n\n很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。\n有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。\n然而，在任何情况下，这是一个非常不好的做法。\n如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。\n不推荐:\n\n```\n.content .title {\n  font-size: 2rem;\n}\n```\n\n推荐\n\n```\n.content > .title {\n  font-size: 2rem;\n}\n```\n\n## 尽量使用缩写属性\n\n尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。\n不推荐：\n\n```\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n```\n\n推荐：\n\n```\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n## 0后面不带单位\n\n省略0后面的单位，\n不推荐：\n\n```\npadding-bottom: 0px;\nmargin: 0em;\n```\n\n推荐：\n\n```\npadding-bottom: 0;\nmargin: 0;\n```\n\n## 属性格式\n\n- 为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。\n- 属性名的冒号后使用一个空格。出于一致性的原因，\n  属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。\n- 每个选择器和属性声明总是使用新的一行。\n- 属性选择器或属性值用双引号（””），而不是单引号（”）括起来。\n- URI值（url()）不要使用引号。\n\n作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：\n\n结构性属性：\n\n1. display\n2. position, left, top, right etc.\n3. overflow, float, clear etc.\n4. margin, padding\n\n表现性属性：\n\n- background, border etc.\n- font, text\n\n不推荐：\n\n```\n .box {\n  font-family: 'Arial', sans-serif;\n  border: 3px solid #ddd;\n  left: 30%;\n  position: absolute;\n  text-transform: uppercase;\n  background-color: #eee;\n  right: 30%;\n  isplay: block;\n  font-size: 1.5rem;\n  overflow: hidden;\n  padding: 1em;\n  margin: 1em;\n}\n```\n\n推荐：\n\n```\n.box {\n  display: block;\n  position: absolute;\n  left: 30%;\n  right: 30%;\n  overflow: hidden;\n  margin: 1em;\n  padding: 1em;\n  background-color: #eee;\n  border: 3px solid #ddd;\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  text-transform: uppercase;\n}\n```\n\n\n","slug":"front-end-specification","published":1,"updated":"2020-01-17T08:04:14.033Z","_id":"ck5ht47fi0000bsc95xid5e8l","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。</p>\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><h2 id=\"驼峰式命名法介绍\"><a href=\"#驼峰式命名法介绍\" class=\"headerlink\" title=\"驼峰式命名法介绍\"></a>驼峰式命名法介绍</h2><ul>\n<li><p>Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo</p>\n</li>\n<li><p>Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo</p>\n<h2 id=\"文件资源命名\"><a href=\"#文件资源命名\" class=\"headerlink\" title=\"文件资源命名\"></a>文件资源命名</h2></li>\n<li><p>文件名不得含有空格</p>\n</li>\n<li><p>文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )</p>\n</li>\n<li><p>文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。</p>\n</li>\n<li><p>引入资源使用相对路径，不要指定资源所带的具体协议 ( <code>http:</code>,<code>https:</code> ) ，除非这两者协议都不可用。</p>\n</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;cdn.com&#x2F;foundation.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.com&#x2F;foundation.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h2><p><strong>命名方式</strong> : 小驼峰式命名方法<br><strong>命名规范</strong> : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>小写字母</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>array</td>\n<td>a</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>b</td>\n</tr>\n<tr>\n<td>function</td>\n<td>fn</td>\n</tr>\n<tr>\n<td>int</td>\n<td>i</td>\n</tr>\n<tr>\n<td>object</td>\n<td>o</td>\n</tr>\n<tr>\n<td>regular</td>\n<td>r</td>\n</tr>\n<tr>\n<td>string</td>\n<td>s</td>\n</tr>\n</tbody></table>\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tableTitle &#x3D; &quot;LoginTable&quot;</span><br></pre></td></tr></table></figure>\n\n<p>不推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var getTitle &#x3D; &quot;LoginTable&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p><strong>命名方式</strong> : 小驼峰方式 ( 构造函数使用大驼峰命名法 )<br><strong>命名规则</strong> : 前缀为动词</p>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>含义</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>can</td>\n<td>判断是否可执行某个动作 ( 权限 )</td>\n<td>函数返回一个布尔值。true：可执行；false：不可执行</td>\n</tr>\n<tr>\n<td>has</td>\n<td>判断是否含有某个值</td>\n<td>函数返回一个布尔值。true：含有此值；false：不含有此值</td>\n</tr>\n<tr>\n<td>is</td>\n<td>判断是否为某个值</td>\n<td>函数返回一个布尔值。true：为某个值；false：不为某个值</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取某个值</td>\n<td>函数返回一个非布尔值</td>\n</tr>\n<tr>\n<td>set</td>\n<td>设置某个值</td>\n<td>无返回值、返回是否设置成功或者返回链式对象</td>\n</tr>\n</tbody></table>\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;是否可阅读</span><br><span class=\"line\">function canRead()&#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;获取姓名</span><br><span class=\"line\">function getName&#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p><strong>命名方法</strong> : 全部大写<br><strong>命名规范</strong> : 使用大写字母和下划线来组合命名，下划线用以分割单词。<br>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MAX_COUNT &#x3D; 10;</span><br><span class=\"line\">var URL &#x3D; &#39;http:&#x2F;&#x2F;www.baidu.com&#39;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的成员\"><a href=\"#类的成员\" class=\"headerlink\" title=\"类的成员\"></a>类的成员</h2><ul>\n<li>公共属性和方法 : 同变量命名方式</li>\n<li>私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式</li>\n</ul>\n<p>推荐(将<code>name</code>换成<code>this</code>是不是更熟悉了呢)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Student(name) &#123;</span><br><span class=\"line\">    var _name &#x3D; name; &#x2F;&#x2F; 私有成员</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 公共方法</span><br><span class=\"line\">    this.getName &#x3D; function () &#123;</span><br><span class=\"line\">        return _name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 公共方式</span><br><span class=\"line\">    this.setName &#x3D; function (value) &#123;</span><br><span class=\"line\">        _name &#x3D; value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var st &#x3D; new Student(&#39;tom&#39;);</span><br><span class=\"line\">st.setName(&#39;jerry&#39;);</span><br><span class=\"line\">console.log(st.getName()); &#x2F;&#x2F; &#x3D;&gt; jerry：输出_name私有变量的值复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h2><h3 id=\"单行注释\"><a href=\"#单行注释\" class=\"headerlink\" title=\"单行注释 ( // )\"></a>单行注释 ( // )</h3><ul>\n<li>单独一行：//(双斜线)与注释文字之间保留一个空格</li>\n<li>在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</li>\n<li>注释代码：//(双斜线)与代码之间保留一个空格。</li>\n</ul>\n<p>推荐 : </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 调用了一个函数；1)单独在一行</span><br><span class=\"line\">setTitle();</span><br><span class=\"line\"></span><br><span class=\"line\">var maxCount &#x3D; 10; &#x2F;&#x2F; 设置最大量；2)在代码后面注释</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; setName(); &#x2F;&#x2F; 3)注释代码复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多行注释-注释说明\"><a href=\"#多行注释-注释说明\" class=\"headerlink\" title=\"多行注释 ( / 注释说明 / )\"></a>多行注释 ( / <em>注释说明</em> / )</h2><ul>\n<li><p>若开始(/<code>*</code>和结束(<code>*</code>/)都在一行，推荐采用单行注释</p>\n<p>推荐 : </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\">* 代码执行到这里后会调用setTitle()函数</span><br><span class=\"line\">* setTitle()：设置title的值</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">setTitle();复制代码</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"函数-方法-注释\"><a href=\"#函数-方法-注释\" class=\"headerlink\" title=\"函数 ( 方法 ) 注释\"></a>函数 ( 方法 ) 注释</h2><p>函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 <a href=\"http://baike.baidu.com/item/javadoc\" target=\"_blank\" rel=\"noopener\">javadoc(百度百科)</a><br>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** </span><br><span class=\"line\">* 函数说明 </span><br><span class=\"line\">* @关键字 </span><br><span class=\"line\">*&#x2F;复制代码</span><br></pre></td></tr></table></figure>\n\n<p>常用注释关键字</p>\n<table>\n<thead>\n<tr>\n<th>注释名</th>\n<th>语法</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@param</td>\n<td>@param 参数名 {参数类型}  描述信息</td>\n<td>描述参数的信息</td>\n<td>@param name {String} 传入名称</td>\n</tr>\n<tr>\n<td>@return</td>\n<td>@return {返回类型} 描述信息</td>\n<td>描述返回值的信息</td>\n<td>@return {Boolean} true:可执行;false:不可执行</td>\n</tr>\n<tr>\n<td>@author</td>\n<td>@author 作者信息 [附属信息：如邮箱、日期]</td>\n<td>描述此函数作者的信息</td>\n<td>@author 张三 2015/07/21</td>\n</tr>\n<tr>\n<td>@version</td>\n<td>@version XX.XX.XX</td>\n<td>描述此函数的版本号</td>\n<td>@version 1.0.3</td>\n</tr>\n<tr>\n<td>@example</td>\n<td>@example 示例代码</td>\n<td>@example setTitle(‘测试’)</td>\n<td>如下</td>\n</tr>\n</tbody></table>\n<p>推荐 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> - 合并Grid的行</span><br><span class=\"line\"> - @param grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid</span><br><span class=\"line\"> - @param cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</span><br><span class=\"line\"> - @param isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</span><br><span class=\"line\"> - @return void</span><br><span class=\"line\"> - @author polk6 2015&#x2F;07&#x2F;21 </span><br><span class=\"line\"> - @example</span><br><span class=\"line\"> - _________________                             _________________</span><br><span class=\"line\"> - |  年龄 |  姓名 |                             |  年龄 |  姓名 |</span><br><span class=\"line\"> - -----------------      mergeCells(grid,[0])   -----------------</span><br><span class=\"line\"> - |  18   |  张三 |              &#x3D;&gt;             |       |  张三 |</span><br><span class=\"line\"> - -----------------                             -  18   ---------</span><br><span class=\"line\"> - |  18   |  王五 |                             |       |  王五 |</span><br><span class=\"line\"> - -----------------                             -----------------</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">function mergeCells(grid, cols, isAllSome) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Do Something</span><br><span class=\"line\">&#125;复制代码</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML规范\"><a href=\"#HTML规范\" class=\"headerlink\" title=\"HTML规范\"></a>HTML规范</h1><h2 id=\"文档规范\"><a href=\"#文档规范\" class=\"headerlink\" title=\"文档规范\"></a>文档规范</h2><p>使用 HTML5 的文档声明类型 : ``</p>\n<ul>\n<li>DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。</li>\n<li>使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 </li>\n<li>没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。</li>\n<li>如果你的页面添加了&lt;!DOCTYP&gt;那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。</li>\n</ul>\n<h2 id=\"脚本加载\"><a href=\"#脚本加载\" class=\"headerlink\" title=\"脚本加载\"></a>脚本加载</h2><p>说到js和css的位置，大家应该都知道js放在下面，css放在上面。<br>但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性<code>async</code>，将脚本文件放在``内<br><strong>兼容老旧浏览器(IE9-)时</strong>：<br>脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。<br><strong>而在现代浏览器中</strong>：<br>脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。<br>综上所述，<br>所有浏览器中推荐:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;main.css&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;!-- body goes here --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src&#x3D;&quot;main.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>只兼容现代浏览器推荐:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;main.css&quot;&gt;</span><br><span class=\"line\">    &lt;script src&#x3D;&quot;main.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;!-- body goes here --&gt;</span><br><span class=\"line\">  &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h2><p>我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。</p>\n<blockquote>\n<p>语义化是指：根据元素其被创造出来时的初始意义来使用它。<br>意思就是用正确的标签干正确的事，而不是只有<code>div</code>和<code>span</code>。</p>\n</blockquote>\n<p>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;b&gt;My page title&lt;&#x2F;b&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;top-navigation&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#news&quot;&gt;News&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class&#x3D;&quot;news-page&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;page-section news&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;title&quot;&gt;All news articles&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;news-article&quot;&gt;</span><br><span class=\"line\">      &lt;h2&gt;Bad article&lt;&#x2F;h2&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;intro&quot;&gt;Introduction sub-title&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;content&quot;&gt;This is a very bad example for HTML semantics&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;article-side-notes&quot;&gt;I think I&#39;m more on the side and should not receive the main credits&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;article-foot-notes&quot;&gt;</span><br><span class=\"line\">        This article was created by David &lt;div class&#x3D;&quot;time&quot;&gt;2014-01-01 00:00&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class&#x3D;&quot;section-footer&quot;&gt;</span><br><span class=\"line\">      Related sections: Events, Public holidays</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class&#x3D;&quot;page-footer&quot;&gt;</span><br><span class=\"line\">  Copyright 2014</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html 代码:</span><br><span class=\"line\">&lt;!-- The page header should go into a header element --&gt;</span><br><span class=\"line\">&lt;header&gt;</span><br><span class=\"line\">  &lt;!-- As this title belongs to the page structure it&#39;s a heading and h1 should be used --&gt;</span><br><span class=\"line\">  &lt;h1&gt;My page title&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- All navigation should go into a nav element --&gt;</span><br><span class=\"line\">&lt;nav class&#x3D;&quot;top-navigation&quot;&gt;</span><br><span class=\"line\">  &lt;!-- A listing of elements should always go to UL (OL for ordered listings) --&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#news&quot;&gt;News&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;nav&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- The main part of the page should go into a main element (also use role&#x3D;&quot;main&quot; for accessibility) --&gt;</span><br><span class=\"line\">&lt;main class&#x3D;&quot;news-page&quot; role&#x3D;&quot;main&quot;&gt;</span><br><span class=\"line\">  &lt;!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. --&gt;</span><br><span class=\"line\">  &lt;section class&#x3D;&quot;page-section news&quot;&gt;</span><br><span class=\"line\">    &lt;!-- A section header should go into a section element --&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">      &lt;!-- As a page section belongs to the page structure heading elements should be used (in this case h2) --&gt;</span><br><span class=\"line\">      &lt;h2 class&#x3D;&quot;title&quot;&gt;All news articles&lt;&#x2F;h2&gt;</span><br><span class=\"line\">    &lt;&#x2F;header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- If a section &#x2F; module can be seen as an article (news article, blog entry, products teaser, any other</span><br><span class=\"line\">     re-usable module &#x2F; section that can occur multiple times on a page) a article element should be used --&gt;</span><br><span class=\"line\">    &lt;article class&#x3D;&quot;news-article&quot;&gt;</span><br><span class=\"line\">      &lt;!-- An article can contain a header that contains the summary &#x2F; introduction information of the article --&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;!-- As a article title does not belong to the overall page structure there should not be any heading tag! --&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;article-title&quot;&gt;Good article&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;!-- Small can optionally be used to reduce importance --&gt;</span><br><span class=\"line\">        &lt;small class&#x3D;&quot;intro&quot;&gt;Introduction sub-title&lt;&#x2F;small&gt;</span><br><span class=\"line\">      &lt;&#x2F;header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;!-- For the main content in a section or article there is no semantic element --&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;This is a good example for HTML semantics&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;!-- For content that is represented as side note or less important information in a given context use aside --&gt;</span><br><span class=\"line\">      &lt;aside class&#x3D;&quot;article-side-notes&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;I think I&#39;m more on the side and should not receive the main credits&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;&#x2F;aside&gt;</span><br><span class=\"line\">      &lt;!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element --&gt;</span><br><span class=\"line\">      &lt;footer class&#x3D;&quot;article-foot-notes&quot;&gt;</span><br><span class=\"line\">        &lt;!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time</span><br><span class=\"line\">         while the actual text in the time element can also be more human readable &#x2F; relative --&gt;</span><br><span class=\"line\">        &lt;p&gt;This article was created by David &lt;time datetime&#x3D;&quot;2014-01-01 00:00&quot; class&#x3D;&quot;time&quot;&gt;1 month ago&lt;&#x2F;time&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;&#x2F;footer&gt;</span><br><span class=\"line\">    &lt;&#x2F;article&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- In a section, footnotes or similar information can also go into a footer element --&gt;</span><br><span class=\"line\">    &lt;footer class&#x3D;&quot;section-footer&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;Related sections: Events, Public holidays&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;footer&gt;</span><br><span class=\"line\">  &lt;&#x2F;section&gt;</span><br><span class=\"line\">&lt;&#x2F;main&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Your page footer should go into a global footer element --&gt;</span><br><span class=\"line\">&lt;footer class&#x3D;&quot;page-footer&quot;&gt;</span><br><span class=\"line\">  Copyright 2014</span><br><span class=\"line\">&lt;&#x2F;footer&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"alt标签不为空\"><a href=\"#alt标签不为空\" class=\"headerlink\" title=\"alt标签不为空\"></a>alt标签不为空</h2><p><img>标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。 假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：</p>\n<ul>\n<li>网速太慢</li>\n<li>src 属性中的错误</li>\n<li>浏览器禁用图像</li>\n<li>用户使用的是屏幕阅读器</li>\n</ul>\n<p>从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容</p>\n<h2 id=\"结构、表现、行为三者分离\"><a href=\"#结构、表现、行为三者分离\" class=\"headerlink\" title=\"结构、表现、行为三者分离\"></a>结构、表现、行为三者分离</h2><p>尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。<br>在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。<br>建议：</p>\n<ul>\n<li>不使用超过一到两张样式表</li>\n<li>不使用超过一到两个脚本（学会用合并脚本）</li>\n<li>不使用行内样式（<code>.no-good {}</code>）</li>\n<li>不在元素上使用 style 属性（``）</li>\n<li>不使用行内脚本（<code>alert(&#39;no good&#39;)</code>）</li>\n<li>不使用表象元素（<code>i.e. , , , ,</code>）</li>\n<li>不使用表象 class 名（<code>i.e. red, left, center</code>）</li>\n</ul>\n<h2 id=\"HTML只关注内容\"><a href=\"#HTML只关注内容\" class=\"headerlink\" title=\"HTML只关注内容\"></a>HTML只关注内容</h2><ul>\n<li>HTML只显示展示内容信息</li>\n<li>不要引入一些特定的 HTML 结构来解决一些视觉设计问题</li>\n<li>不要将<code>img</code>元素当做专门用来做视觉设计的元素</li>\n<li>样式上的问题应该使用css解决</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- We should not introduce an additional element just to solve a design problem  --&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;text-box&quot;&gt;</span><br><span class=\"line\">  &lt;span class&#x3D;&quot;square&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  See the square next to me?</span><br><span class=\"line\">&lt;&#x2F;span&gt;</span><br><span class=\"line\">css 代码:</span><br><span class=\"line\">.text-box &gt; .square &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 1rem;</span><br><span class=\"line\">  height: 1rem;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html 代码:</span><br><span class=\"line\">&lt;!-- That&#39;s clean markup! --&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;text-box&quot;&gt;</span><br><span class=\"line\">  See the square next to me?</span><br><span class=\"line\">&lt;&#x2F;span&gt;</span><br><span class=\"line\">css 代码:</span><br><span class=\"line\">&#x2F;* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content *&#x2F;</span><br><span class=\"line\">.text-box:before &#123;</span><br><span class=\"line\">  content: &quot;&quot;;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 1rem;</span><br><span class=\"line\">  height: 1rem;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。</strong></p>\n<p>不推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html 代码:</span><br><span class=\"line\">&lt;!-- Content images should never be used for design elements!  --&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;text-box&quot;&gt;</span><br><span class=\"line\">  &lt;img src&#x3D;&quot;square.svg&quot; alt&#x3D;&quot;Square&quot; &#x2F;&gt;</span><br><span class=\"line\">  See the square next to me?</span><br><span class=\"line\">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html 代码:</span><br><span class=\"line\">&lt;!-- That&#39;s clean markup! --&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;text-box&quot;&gt;</span><br><span class=\"line\">  See the square next to me?</span><br><span class=\"line\">&lt;&#x2F;span&gt;</span><br><span class=\"line\">css 代码:</span><br><span class=\"line\">&#x2F;* We use a :before pseudo element with a background image to solve the problem *&#x2F;</span><br><span class=\"line\">.text-box:before &#123;</span><br><span class=\"line\">  content: &quot;&quot;;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 1rem;</span><br><span class=\"line\">  height: 1rem;</span><br><span class=\"line\">  background: url(square.svg) no-repeat;</span><br><span class=\"line\">  background-size: 100%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"js规范\"><a href=\"#js规范\" class=\"headerlink\" title=\"js规范\"></a>js规范</h1><h2 id=\"避免全局命名空间污染\"><a href=\"#避免全局命名空间污染\" class=\"headerlink\" title=\"避免全局命名空间污染\"></a>避免全局命名空间污染</h2><p>防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。</p>\n<p>IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。<br>不推荐:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x &#x3D; 10,</span><br><span class=\"line\">    y &#x3D; 100;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this</span><br><span class=\"line\">&#x2F;&#x2F; will be stored in the window object. This is very unclean and needs to be avoided.</span><br><span class=\"line\">console.log(window.x + &#39; &#39; + window.y);</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; We declare a IIFE and pass parameters into the function that we will use from the global space</span><br><span class=\"line\">(function(log, w, undefined)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var x &#x3D; 10,</span><br><span class=\"line\">      y &#x3D; 100;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; Will output &#39;true true&#39;</span><br><span class=\"line\">  log((w.x &#x3D;&#x3D;&#x3D; undefined) + &#39; &#39; + (w.y &#x3D;&#x3D;&#x3D; undefined));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log, window));</span><br></pre></td></tr></table></figure>\n\n<p>推荐的IIFE写法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; Code goes here</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function($, w, d)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  $(function() &#123;</span><br><span class=\"line\">    w.alert(d.querySelectorAll(&#39;div&#39;).length);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;(jQuery, window, document));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>ECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。</p>\n<p>严格模式会阻止使用在未来很可能被引入的预留关键字。</p>\n<p>你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。</p>\n<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><p>总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; b &#x3D; 0; &#x2F;&#x2F;b会被隐式的创建为全局变量复制代码</span><br></pre></td></tr></table></figure>\n\n<p>所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function ()&#123;</span><br><span class=\"line\">  &#39;use strict&#39;</span><br><span class=\"line\">  var a &#x3D; 0,</span><br><span class=\"line\">      b &#x3D; 0,</span><br><span class=\"line\">      c &#x3D; 0,</span><br><span class=\"line\">      i,</span><br><span class=\"line\">      j,</span><br><span class=\"line\">      myObject();</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n\n<p>采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。</p>\n<h2 id=\"js声明提前\"><a href=\"#js声明提前\" class=\"headerlink\" title=\"js声明提前\"></a>js声明提前</h2><p>javascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var a &#x3D; 10;</span><br><span class=\"line\"></span><br><span class=\"line\">  for(var i &#x3D; 0; i &lt; a; i++) &#123;</span><br><span class=\"line\">    var b &#x3D; i * i;</span><br><span class=\"line\">    log(b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if(a &#x3D;&#x3D;&#x3D; 10) &#123;</span><br><span class=\"line\">    var f &#x3D; function() &#123;</span><br><span class=\"line\">      log(a);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function x() &#123;</span><br><span class=\"line\">    log(&#39;Mr. X!&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  x();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<p>提升后的js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\">  &#x2F;&#x2F; All variables used in the closure will be hoisted to the top of the function</span><br><span class=\"line\">  var a,</span><br><span class=\"line\">      i,</span><br><span class=\"line\">      b,</span><br><span class=\"line\">      f;</span><br><span class=\"line\">  &#x2F;&#x2F; All functions in the closure will be hoisted to the top</span><br><span class=\"line\">  function x() &#123;</span><br><span class=\"line\">    log(&#39;Mr. X!&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  a &#x3D; 10;</span><br><span class=\"line\"></span><br><span class=\"line\">  for(i &#x3D; 0; i &lt; a; i++) &#123;</span><br><span class=\"line\">    b &#x3D; i * i;</span><br><span class=\"line\">    log(b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if(a &#x3D;&#x3D;&#x3D; 10) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Function assignments will only result in hoisted variables but the function body will not be hoisted</span><br><span class=\"line\">    &#x2F;&#x2F; Only by using a real function declaration the whole function will be hoisted with its body</span><br><span class=\"line\">    f &#x3D; function() &#123;</span><br><span class=\"line\">      log(a);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  x();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用严格等\"><a href=\"#使用严格等\" class=\"headerlink\" title=\"使用严格等\"></a>使用严格等</h2><p>总是使用 <code>===</code> 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  log(&#39;0&#39; &#x3D;&#x3D; 0); &#x2F;&#x2F; true</span><br><span class=\"line\">  log(&#39;&#39; &#x3D;&#x3D; false); &#x2F;&#x2F; true</span><br><span class=\"line\">  log(&#39;1&#39; &#x3D;&#x3D; true); &#x2F;&#x2F; true</span><br><span class=\"line\">  log(null &#x3D;&#x3D; undefined); &#x2F;&#x2F; true</span><br><span class=\"line\"></span><br><span class=\"line\">  var x &#x3D; &#123;</span><br><span class=\"line\">    valueOf: function() &#123;</span><br><span class=\"line\">      return &#39;X&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  log(x &#x3D;&#x3D; &#39;X&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等同-和严格等-的区别\"><a href=\"#等同-和严格等-的区别\" class=\"headerlink\" title=\"等同== 和严格等===的区别\"></a>等同== 和严格等===的区别</h3><ul>\n<li>==， 两边值类型不同的时候，要先进行类型转换，再比较。</li>\n<li>===，不做类型转换，类型不同的一定不等。</li>\n</ul>\n<p>==等同操作符</p>\n<ul>\n<li>如果两个值具有相同类型，会进行===比较，返回===的比较值 </li>\n<li>如果两个值不具有相同类型，也有可能返回true </li>\n<li>如果一个值是null另一个值是undefined，返回true </li>\n<li>如果一个值是string另个是number，会把string转换成number再进行比较 </li>\n<li>如果一个值是true，会把它转成1再比较，false会转成0 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log( false &#x3D;&#x3D; null )      &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( false &#x3D;&#x3D; undefined ) &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( false &#x3D;&#x3D; 0 )         &#x2F;&#x2F; true</span><br><span class=\"line\">console.log( false &#x3D;&#x3D; &#39;&#39; )        &#x2F;&#x2F; true</span><br><span class=\"line\">console.log( false &#x3D;&#x3D; NaN )       &#x2F;&#x2F; false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( null &#x3D;&#x3D; undefined ) &#x2F;&#x2F; true</span><br><span class=\"line\">console.log( null &#x3D;&#x3D; 0 )         &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( null &#x3D;&#x3D; &#39;&#39; )        &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( null &#x3D;&#x3D; NaN )       &#x2F;&#x2F; false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( undefined &#x3D;&#x3D; 0)   &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( undefined &#x3D;&#x3D; &#39;&#39;)  &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( undefined &#x3D;&#x3D; NaN) &#x2F;&#x2F; false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( 0 &#x3D;&#x3D; &#39;&#39; )  &#x2F;&#x2F; true</span><br><span class=\"line\">console.log( 0 &#x3D;&#x3D; NaN ) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>\n\n<p>总结一下==</p>\n<ul>\n<li>false 除了和自身比较为 true 外，和 0，”” 比较也为 true</li>\n<li>null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个</li>\n<li>0 除了和 false 比较为 true，还有空字符串 ‘’” 和空数组 []</li>\n<li>空字符串 ‘’ 除了和 false 比较为 true，还有一个数字 0</li>\n</ul>\n<blockquote>\n<p>==, &gt;, &lt;, +, -, … 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 <code>valueOf/toString</code>的话，==就会产生副作用.</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.valueOf &#x3D; function() &#123;</span><br><span class=\"line\">  this[0]++;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x &#x3D; [1, 2, 3];</span><br><span class=\"line\">x &#x3D;&#x3D; 0;</span><br><span class=\"line\">console.log(x);   &#x2F;&#x2F; [2, 2, 3]</span><br></pre></td></tr></table></figure>\n\n<p>===操作符：</p>\n<ul>\n<li>要是两个值类型不同，返回false </li>\n<li>要是两个值都是number类型，并且数值相同，返回true </li>\n<li>要是两个值都是stirng，并且两个值的String内容相同，返回true </li>\n<li>要是两个值都是true或者都是false，返回true </li>\n<li>要是两个值都是指向相同的Object，Arraya或者function，返回true </li>\n<li>要是两个值都是null或者都是undefined，返回true</li>\n</ul>\n<h2 id=\"真假判断\"><a href=\"#真假判断\" class=\"headerlink\" title=\"真假判断\"></a>真假判断</h2><ul>\n<li>js中以下内容为假：</li>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>‘’ (空字符串)</li>\n<li>NaN</li>\n</ul>\n<h2 id=\"设置默认参数\"><a href=\"#设置默认参数\" class=\"headerlink\" title=\"设置默认参数\"></a>设置默认参数</h2><p>辑操作符 || 和 &amp;&amp; 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(!x) &#123;</span><br><span class=\"line\">  if(!y) &#123;</span><br><span class=\"line\">    x &#x3D; 1;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    x &#x3D; y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 等同于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x &#x3D; x || y || 1;复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这一小技巧经常用来给方法设定默认的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  function multiply(a, b) &#123;</span><br><span class=\"line\">    a &#x3D; a || 1;</span><br><span class=\"line\">    b &#x3D; b || 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    log(&#39;Result &#39; + a * b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  multiply(); &#x2F;&#x2F; Result 1</span><br><span class=\"line\">  multiply(10); &#x2F;&#x2F; Result 10</span><br><span class=\"line\">  multiply(3, NaN); &#x2F;&#x2F; Result 3</span><br><span class=\"line\">  multiply(9, 5); &#x2F;&#x2F; Result 45</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不使用eval-函数\"><a href=\"#不使用eval-函数\" class=\"headerlink\" title=\"不使用eval()函数\"></a>不使用eval()函数</h2><p>就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。<br>eval()函数的作用是返回任意字符串，当作js代码来处理。</p>\n<h2 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h2><p>只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。</p>\n<p>正因为它是如此容易地被搞错，请限制它的使用场景：</p>\n<ul>\n<li>在构造函数中</li>\n<li>在对象的方法中（包括由此创建出的闭包内）</li>\n</ul>\n<h2 id=\"首选函数式风格\"><a href=\"#首选函数式风格\" class=\"headerlink\" title=\"首选函数式风格\"></a>首选函数式风格</h2><p>函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。</p>\n<p>接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。<br>不推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var arr &#x3D; [10, 3, 7, 9, 100, 20],</span><br><span class=\"line\">      sum &#x3D; 0,</span><br><span class=\"line\">      i;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  for(i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    sum +&#x3D; arr[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  log(&#39;The sum of array &#39; + arr + &#39; is: &#39; + sum)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<p>推荐(函数式编程)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var arr &#x3D; [10, 3, 7, 9, 100, 20];</span><br><span class=\"line\"></span><br><span class=\"line\">  var sum &#x3D; arr.reduce(function(prevValue, currentValue) &#123;</span><br><span class=\"line\">    return prevValue + currentValue;</span><br><span class=\"line\">  &#125;, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">  log(&#39;The sum of array &#39; + arr + &#39; is: &#39; + sum);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改内建对象的原型链\"><a href=\"#修改内建对象的原型链\" class=\"headerlink\" title=\"修改内建对象的原型链\"></a>修改内建对象的原型链</h2><p>修改内建的诸如 <code>Object.prototype</code> 和 <code>Array.prototype</code> 是被严厉禁止的。修改其它的内建对象比如 <code>Function.prototype</code>，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。</p>\n<h2 id=\"三元条件判断（if-的快捷方法）\"><a href=\"#三元条件判断（if-的快捷方法）\" class=\"headerlink\" title=\"三元条件判断（if 的快捷方法）\"></a>三元条件判断（if 的快捷方法）</h2><p>用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(x &#x3D;&#x3D;&#x3D; 10) &#123;</span><br><span class=\"line\">  return &#39;valid&#39;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  return &#39;invalid&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return x &#x3D;&#x3D;&#x3D; 10 ? &#39;valid&#39; : &#39;invalid&#39;复制代码</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JSHint\"><a href=\"#JSHint\" class=\"headerlink\" title=\"JSHint\"></a>JSHint</h1><p>在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用<code>===</code>而不是<code>==</code>，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例</p>\n<h2 id=\"webstorm内置JSHint\"><a href=\"#webstorm内置JSHint\" class=\"headerlink\" title=\"webstorm内置JSHint\"></a>webstorm内置JSHint</h2><p>对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。<br>在Settings =&gt; language &amp; frameworks =&gt; JavaScript =&gt; Code Quality Tolls =&gt; JSHint</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/5/30/7e7984a9e668c6d03b9d2fe0ab8f9bd2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"webstorm中的jshint\">webstorm中的jshint</p>\n<p>这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考<a href=\"http://jshint.com/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>curly</td>\n<td>循环或者条件语句必须使用花括号包住</td>\n</tr>\n<tr>\n<td>eqeqeq</td>\n<td>使用强制等===</td>\n</tr>\n<tr>\n<td>newcap</td>\n<td>对于首字母大写的函数（声明的类），强制使用new</td>\n</tr>\n<tr>\n<td>noarg</td>\n<td>禁用arguments.caller和arguments.callee</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>对于属性使用aaa.bbb而不是aaa[‘bbb’]</td>\n</tr>\n<tr>\n<td>undef</td>\n<td>查找所有未定义的变量</td>\n</tr>\n<tr>\n<td>boss</td>\n<td>查找类似与if(a = 0)这样的代码</td>\n</tr>\n<tr>\n<td>node</td>\n<td>指定运行环境为node</td>\n</tr>\n<tr>\n<td>strict</td>\n<td>必须使用严格模式</td>\n</tr>\n<tr>\n<td>asi</td>\n<td>允许省略分号</td>\n</tr>\n<tr>\n<td>bitwise</td>\n<td>禁止使用位运算符，比如经常把&amp;&amp;写错&amp; 规避此错误</td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>定义全局暴露的jQuery库</td>\n</tr>\n<tr>\n<td>evil</td>\n<td>禁止使用eval</td>\n</tr>\n<tr>\n<td>maxdepth</td>\n<td>嵌套的最大深度</td>\n</tr>\n<tr>\n<td>maxparams</td>\n<td>参数的最大个数</td>\n</tr>\n</tbody></table>\n<h1 id=\"css规范\"><a href=\"#css规范\" class=\"headerlink\" title=\"css规范\"></a>css规范</h1><h2 id=\"id和class的命名\"><a href=\"#id和class的命名\" class=\"headerlink\" title=\"id和class的命名\"></a>id和class的命名</h2><p>ID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称<br>不推荐 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.fw-800 &#123;</span><br><span class=\"line\">  font-weight: 800;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.red &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.heavy &#123;</span><br><span class=\"line\">  font-weight: 800;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.important &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合理的使用ID\"><a href=\"#合理的使用ID\" class=\"headerlink\" title=\"合理的使用ID\"></a>合理的使用ID</h2><p>一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#content .title &#123;</span><br><span class=\"line\">  font-size: 2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content .title &#123;</span><br><span class=\"line\">  font-size: 2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"css选择器中避免使用标签名\"><a href=\"#css选择器中避免使用标签名\" class=\"headerlink\" title=\"css选择器中避免使用标签名\"></a>css选择器中避免使用标签名</h2><p>从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。</p>\n<h2 id=\"使用子选择器\"><a href=\"#使用子选择器\" class=\"headerlink\" title=\"使用子选择器\"></a>使用子选择器</h2><p>很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。<br>有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。<br>然而，在任何情况下，这是一个非常不好的做法。<br>如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。<br>不推荐:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content .title &#123;</span><br><span class=\"line\">  font-size: 2rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content &gt; .title &#123;</span><br><span class=\"line\">  font-size: 2rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"尽量使用缩写属性\"><a href=\"#尽量使用缩写属性\" class=\"headerlink\" title=\"尽量使用缩写属性\"></a>尽量使用缩写属性</h2><p>尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top-style: none;</span><br><span class=\"line\">font-family: palatino, georgia, serif;</span><br><span class=\"line\">font-size: 100%;</span><br><span class=\"line\">line-height: 1.6;</span><br><span class=\"line\">padding-bottom: 2em;</span><br><span class=\"line\">padding-left: 1em;</span><br><span class=\"line\">padding-right: 1em;</span><br><span class=\"line\">padding-top: 0;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top: 0;</span><br><span class=\"line\">font: 100%&#x2F;1.6 palatino, georgia, serif;</span><br><span class=\"line\">padding: 0 1em 2em;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0后面不带单位\"><a href=\"#0后面不带单位\" class=\"headerlink\" title=\"0后面不带单位\"></a>0后面不带单位</h2><p>省略0后面的单位，<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding-bottom: 0px;</span><br><span class=\"line\">margin: 0em;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding-bottom: 0;</span><br><span class=\"line\">margin: 0;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性格式\"><a href=\"#属性格式\" class=\"headerlink\" title=\"属性格式\"></a>属性格式</h2><ul>\n<li>为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。</li>\n<li>属性名的冒号后使用一个空格。出于一致性的原因，<br>属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。</li>\n<li>每个选择器和属性声明总是使用新的一行。</li>\n<li>属性选择器或属性值用双引号（””），而不是单引号（”）括起来。</li>\n<li>URI值（url()）不要使用引号。</li>\n</ul>\n<p>作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：</p>\n<p>结构性属性：</p>\n<ol>\n<li>display</li>\n<li>position, left, top, right etc.</li>\n<li>overflow, float, clear etc.</li>\n<li>margin, padding</li>\n</ol>\n<p>表现性属性：</p>\n<ul>\n<li>background, border etc.</li>\n<li>font, text</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .box &#123;</span><br><span class=\"line\">  font-family: &#39;Arial&#39;, sans-serif;</span><br><span class=\"line\">  border: 3px solid #ddd;</span><br><span class=\"line\">  left: 30%;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  text-transform: uppercase;</span><br><span class=\"line\">  background-color: #eee;</span><br><span class=\"line\">  right: 30%;</span><br><span class=\"line\">  isplay: block;</span><br><span class=\"line\">  font-size: 1.5rem;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  padding: 1em;</span><br><span class=\"line\">  margin: 1em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 30%;</span><br><span class=\"line\">  right: 30%;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  margin: 1em;</span><br><span class=\"line\">  padding: 1em;</span><br><span class=\"line\">  background-color: #eee;</span><br><span class=\"line\">  border: 3px solid #ddd;</span><br><span class=\"line\">  font-family: &#39;Arial&#39;, sans-serif;</span><br><span class=\"line\">  font-size: 1.5rem;</span><br><span class=\"line\">  text-transform: uppercase;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"more":"<p>一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。</p>\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><h2 id=\"驼峰式命名法介绍\"><a href=\"#驼峰式命名法介绍\" class=\"headerlink\" title=\"驼峰式命名法介绍\"></a>驼峰式命名法介绍</h2><ul>\n<li><p>Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo</p>\n</li>\n<li><p>Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo</p>\n<h2 id=\"文件资源命名\"><a href=\"#文件资源命名\" class=\"headerlink\" title=\"文件资源命名\"></a>文件资源命名</h2></li>\n<li><p>文件名不得含有空格</p>\n</li>\n<li><p>文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )</p>\n</li>\n<li><p>文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。</p>\n</li>\n<li><p>引入资源使用相对路径，不要指定资源所带的具体协议 ( <code>http:</code>,<code>https:</code> ) ，除非这两者协议都不可用。</p>\n</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;cdn.com&#x2F;foundation.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.com&#x2F;foundation.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h2><p><strong>命名方式</strong> : 小驼峰式命名方法<br><strong>命名规范</strong> : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>小写字母</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>array</td>\n<td>a</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>b</td>\n</tr>\n<tr>\n<td>function</td>\n<td>fn</td>\n</tr>\n<tr>\n<td>int</td>\n<td>i</td>\n</tr>\n<tr>\n<td>object</td>\n<td>o</td>\n</tr>\n<tr>\n<td>regular</td>\n<td>r</td>\n</tr>\n<tr>\n<td>string</td>\n<td>s</td>\n</tr>\n</tbody></table>\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tableTitle &#x3D; &quot;LoginTable&quot;</span><br></pre></td></tr></table></figure>\n\n<p>不推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var getTitle &#x3D; &quot;LoginTable&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p><strong>命名方式</strong> : 小驼峰方式 ( 构造函数使用大驼峰命名法 )<br><strong>命名规则</strong> : 前缀为动词</p>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>含义</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>can</td>\n<td>判断是否可执行某个动作 ( 权限 )</td>\n<td>函数返回一个布尔值。true：可执行；false：不可执行</td>\n</tr>\n<tr>\n<td>has</td>\n<td>判断是否含有某个值</td>\n<td>函数返回一个布尔值。true：含有此值；false：不含有此值</td>\n</tr>\n<tr>\n<td>is</td>\n<td>判断是否为某个值</td>\n<td>函数返回一个布尔值。true：为某个值；false：不为某个值</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取某个值</td>\n<td>函数返回一个非布尔值</td>\n</tr>\n<tr>\n<td>set</td>\n<td>设置某个值</td>\n<td>无返回值、返回是否设置成功或者返回链式对象</td>\n</tr>\n</tbody></table>\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;是否可阅读</span><br><span class=\"line\">function canRead()&#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;获取姓名</span><br><span class=\"line\">function getName&#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p><strong>命名方法</strong> : 全部大写<br><strong>命名规范</strong> : 使用大写字母和下划线来组合命名，下划线用以分割单词。<br>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MAX_COUNT &#x3D; 10;</span><br><span class=\"line\">var URL &#x3D; &#39;http:&#x2F;&#x2F;www.baidu.com&#39;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的成员\"><a href=\"#类的成员\" class=\"headerlink\" title=\"类的成员\"></a>类的成员</h2><ul>\n<li>公共属性和方法 : 同变量命名方式</li>\n<li>私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式</li>\n</ul>\n<p>推荐(将<code>name</code>换成<code>this</code>是不是更熟悉了呢)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Student(name) &#123;</span><br><span class=\"line\">    var _name &#x3D; name; &#x2F;&#x2F; 私有成员</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 公共方法</span><br><span class=\"line\">    this.getName &#x3D; function () &#123;</span><br><span class=\"line\">        return _name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 公共方式</span><br><span class=\"line\">    this.setName &#x3D; function (value) &#123;</span><br><span class=\"line\">        _name &#x3D; value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var st &#x3D; new Student(&#39;tom&#39;);</span><br><span class=\"line\">st.setName(&#39;jerry&#39;);</span><br><span class=\"line\">console.log(st.getName()); &#x2F;&#x2F; &#x3D;&gt; jerry：输出_name私有变量的值复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h2><h3 id=\"单行注释\"><a href=\"#单行注释\" class=\"headerlink\" title=\"单行注释 ( // )\"></a>单行注释 ( // )</h3><ul>\n<li>单独一行：//(双斜线)与注释文字之间保留一个空格</li>\n<li>在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</li>\n<li>注释代码：//(双斜线)与代码之间保留一个空格。</li>\n</ul>\n<p>推荐 : </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 调用了一个函数；1)单独在一行</span><br><span class=\"line\">setTitle();</span><br><span class=\"line\"></span><br><span class=\"line\">var maxCount &#x3D; 10; &#x2F;&#x2F; 设置最大量；2)在代码后面注释</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; setName(); &#x2F;&#x2F; 3)注释代码复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多行注释-注释说明\"><a href=\"#多行注释-注释说明\" class=\"headerlink\" title=\"多行注释 ( / 注释说明 / )\"></a>多行注释 ( / <em>注释说明</em> / )</h2><ul>\n<li><p>若开始(/<code>*</code>和结束(<code>*</code>/)都在一行，推荐采用单行注释</p>\n<p>推荐 : </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\">* 代码执行到这里后会调用setTitle()函数</span><br><span class=\"line\">* setTitle()：设置title的值</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">setTitle();复制代码</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"函数-方法-注释\"><a href=\"#函数-方法-注释\" class=\"headerlink\" title=\"函数 ( 方法 ) 注释\"></a>函数 ( 方法 ) 注释</h2><p>函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 <a href=\"http://baike.baidu.com/item/javadoc\" target=\"_blank\" rel=\"noopener\">javadoc(百度百科)</a><br>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** </span><br><span class=\"line\">* 函数说明 </span><br><span class=\"line\">* @关键字 </span><br><span class=\"line\">*&#x2F;复制代码</span><br></pre></td></tr></table></figure>\n\n<p>常用注释关键字</p>\n<table>\n<thead>\n<tr>\n<th>注释名</th>\n<th>语法</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@param</td>\n<td>@param 参数名 {参数类型}  描述信息</td>\n<td>描述参数的信息</td>\n<td>@param name {String} 传入名称</td>\n</tr>\n<tr>\n<td>@return</td>\n<td>@return {返回类型} 描述信息</td>\n<td>描述返回值的信息</td>\n<td>@return {Boolean} true:可执行;false:不可执行</td>\n</tr>\n<tr>\n<td>@author</td>\n<td>@author 作者信息 [附属信息：如邮箱、日期]</td>\n<td>描述此函数作者的信息</td>\n<td>@author 张三 2015/07/21</td>\n</tr>\n<tr>\n<td>@version</td>\n<td>@version XX.XX.XX</td>\n<td>描述此函数的版本号</td>\n<td>@version 1.0.3</td>\n</tr>\n<tr>\n<td>@example</td>\n<td>@example 示例代码</td>\n<td>@example setTitle(‘测试’)</td>\n<td>如下</td>\n</tr>\n</tbody></table>\n<p>推荐 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> - 合并Grid的行</span><br><span class=\"line\"> - @param grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid</span><br><span class=\"line\"> - @param cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</span><br><span class=\"line\"> - @param isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</span><br><span class=\"line\"> - @return void</span><br><span class=\"line\"> - @author polk6 2015&#x2F;07&#x2F;21 </span><br><span class=\"line\"> - @example</span><br><span class=\"line\"> - _________________                             _________________</span><br><span class=\"line\"> - |  年龄 |  姓名 |                             |  年龄 |  姓名 |</span><br><span class=\"line\"> - -----------------      mergeCells(grid,[0])   -----------------</span><br><span class=\"line\"> - |  18   |  张三 |              &#x3D;&gt;             |       |  张三 |</span><br><span class=\"line\"> - -----------------                             -  18   ---------</span><br><span class=\"line\"> - |  18   |  王五 |                             |       |  王五 |</span><br><span class=\"line\"> - -----------------                             -----------------</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">function mergeCells(grid, cols, isAllSome) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Do Something</span><br><span class=\"line\">&#125;复制代码</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML规范\"><a href=\"#HTML规范\" class=\"headerlink\" title=\"HTML规范\"></a>HTML规范</h1><h2 id=\"文档规范\"><a href=\"#文档规范\" class=\"headerlink\" title=\"文档规范\"></a>文档规范</h2><p>使用 HTML5 的文档声明类型 : ``</p>\n<ul>\n<li>DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。</li>\n<li>使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 </li>\n<li>没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。</li>\n<li>如果你的页面添加了&lt;!DOCTYP&gt;那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。</li>\n</ul>\n<h2 id=\"脚本加载\"><a href=\"#脚本加载\" class=\"headerlink\" title=\"脚本加载\"></a>脚本加载</h2><p>说到js和css的位置，大家应该都知道js放在下面，css放在上面。<br>但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性<code>async</code>，将脚本文件放在``内<br><strong>兼容老旧浏览器(IE9-)时</strong>：<br>脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。<br><strong>而在现代浏览器中</strong>：<br>脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。<br>综上所述，<br>所有浏览器中推荐:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;main.css&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;!-- body goes here --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src&#x3D;&quot;main.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>只兼容现代浏览器推荐:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;main.css&quot;&gt;</span><br><span class=\"line\">    &lt;script src&#x3D;&quot;main.js&quot; async&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;!-- body goes here --&gt;</span><br><span class=\"line\">  &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h2><p>我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。</p>\n<blockquote>\n<p>语义化是指：根据元素其被创造出来时的初始意义来使用它。<br>意思就是用正确的标签干正确的事，而不是只有<code>div</code>和<code>span</code>。</p>\n</blockquote>\n<p>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;b&gt;My page title&lt;&#x2F;b&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;top-navigation&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#news&quot;&gt;News&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class&#x3D;&quot;news-page&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;page-section news&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;title&quot;&gt;All news articles&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;news-article&quot;&gt;</span><br><span class=\"line\">      &lt;h2&gt;Bad article&lt;&#x2F;h2&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;intro&quot;&gt;Introduction sub-title&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;content&quot;&gt;This is a very bad example for HTML semantics&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;article-side-notes&quot;&gt;I think I&#39;m more on the side and should not receive the main credits&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;article-foot-notes&quot;&gt;</span><br><span class=\"line\">        This article was created by David &lt;div class&#x3D;&quot;time&quot;&gt;2014-01-01 00:00&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class&#x3D;&quot;section-footer&quot;&gt;</span><br><span class=\"line\">      Related sections: Events, Public holidays</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class&#x3D;&quot;page-footer&quot;&gt;</span><br><span class=\"line\">  Copyright 2014</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html 代码:</span><br><span class=\"line\">&lt;!-- The page header should go into a header element --&gt;</span><br><span class=\"line\">&lt;header&gt;</span><br><span class=\"line\">  &lt;!-- As this title belongs to the page structure it&#39;s a heading and h1 should be used --&gt;</span><br><span class=\"line\">  &lt;h1&gt;My page title&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- All navigation should go into a nav element --&gt;</span><br><span class=\"line\">&lt;nav class&#x3D;&quot;top-navigation&quot;&gt;</span><br><span class=\"line\">  &lt;!-- A listing of elements should always go to UL (OL for ordered listings) --&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#news&quot;&gt;News&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;nav&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- The main part of the page should go into a main element (also use role&#x3D;&quot;main&quot; for accessibility) --&gt;</span><br><span class=\"line\">&lt;main class&#x3D;&quot;news-page&quot; role&#x3D;&quot;main&quot;&gt;</span><br><span class=\"line\">  &lt;!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. --&gt;</span><br><span class=\"line\">  &lt;section class&#x3D;&quot;page-section news&quot;&gt;</span><br><span class=\"line\">    &lt;!-- A section header should go into a section element --&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">      &lt;!-- As a page section belongs to the page structure heading elements should be used (in this case h2) --&gt;</span><br><span class=\"line\">      &lt;h2 class&#x3D;&quot;title&quot;&gt;All news articles&lt;&#x2F;h2&gt;</span><br><span class=\"line\">    &lt;&#x2F;header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- If a section &#x2F; module can be seen as an article (news article, blog entry, products teaser, any other</span><br><span class=\"line\">     re-usable module &#x2F; section that can occur multiple times on a page) a article element should be used --&gt;</span><br><span class=\"line\">    &lt;article class&#x3D;&quot;news-article&quot;&gt;</span><br><span class=\"line\">      &lt;!-- An article can contain a header that contains the summary &#x2F; introduction information of the article --&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;!-- As a article title does not belong to the overall page structure there should not be any heading tag! --&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;article-title&quot;&gt;Good article&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;!-- Small can optionally be used to reduce importance --&gt;</span><br><span class=\"line\">        &lt;small class&#x3D;&quot;intro&quot;&gt;Introduction sub-title&lt;&#x2F;small&gt;</span><br><span class=\"line\">      &lt;&#x2F;header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;!-- For the main content in a section or article there is no semantic element --&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;This is a good example for HTML semantics&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;!-- For content that is represented as side note or less important information in a given context use aside --&gt;</span><br><span class=\"line\">      &lt;aside class&#x3D;&quot;article-side-notes&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;I think I&#39;m more on the side and should not receive the main credits&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;&#x2F;aside&gt;</span><br><span class=\"line\">      &lt;!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element --&gt;</span><br><span class=\"line\">      &lt;footer class&#x3D;&quot;article-foot-notes&quot;&gt;</span><br><span class=\"line\">        &lt;!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time</span><br><span class=\"line\">         while the actual text in the time element can also be more human readable &#x2F; relative --&gt;</span><br><span class=\"line\">        &lt;p&gt;This article was created by David &lt;time datetime&#x3D;&quot;2014-01-01 00:00&quot; class&#x3D;&quot;time&quot;&gt;1 month ago&lt;&#x2F;time&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;&#x2F;footer&gt;</span><br><span class=\"line\">    &lt;&#x2F;article&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- In a section, footnotes or similar information can also go into a footer element --&gt;</span><br><span class=\"line\">    &lt;footer class&#x3D;&quot;section-footer&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;Related sections: Events, Public holidays&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;footer&gt;</span><br><span class=\"line\">  &lt;&#x2F;section&gt;</span><br><span class=\"line\">&lt;&#x2F;main&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- Your page footer should go into a global footer element --&gt;</span><br><span class=\"line\">&lt;footer class&#x3D;&quot;page-footer&quot;&gt;</span><br><span class=\"line\">  Copyright 2014</span><br><span class=\"line\">&lt;&#x2F;footer&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"alt标签不为空\"><a href=\"#alt标签不为空\" class=\"headerlink\" title=\"alt标签不为空\"></a>alt标签不为空</h2><p><img>标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。 假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：</p>\n<ul>\n<li>网速太慢</li>\n<li>src 属性中的错误</li>\n<li>浏览器禁用图像</li>\n<li>用户使用的是屏幕阅读器</li>\n</ul>\n<p>从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容</p>\n<h2 id=\"结构、表现、行为三者分离\"><a href=\"#结构、表现、行为三者分离\" class=\"headerlink\" title=\"结构、表现、行为三者分离\"></a>结构、表现、行为三者分离</h2><p>尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。<br>在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。<br>建议：</p>\n<ul>\n<li>不使用超过一到两张样式表</li>\n<li>不使用超过一到两个脚本（学会用合并脚本）</li>\n<li>不使用行内样式（<code>.no-good {}</code>）</li>\n<li>不在元素上使用 style 属性（``）</li>\n<li>不使用行内脚本（<code>alert(&#39;no good&#39;)</code>）</li>\n<li>不使用表象元素（<code>i.e. , , , ,</code>）</li>\n<li>不使用表象 class 名（<code>i.e. red, left, center</code>）</li>\n</ul>\n<h2 id=\"HTML只关注内容\"><a href=\"#HTML只关注内容\" class=\"headerlink\" title=\"HTML只关注内容\"></a>HTML只关注内容</h2><ul>\n<li>HTML只显示展示内容信息</li>\n<li>不要引入一些特定的 HTML 结构来解决一些视觉设计问题</li>\n<li>不要将<code>img</code>元素当做专门用来做视觉设计的元素</li>\n<li>样式上的问题应该使用css解决</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- We should not introduce an additional element just to solve a design problem  --&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;text-box&quot;&gt;</span><br><span class=\"line\">  &lt;span class&#x3D;&quot;square&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  See the square next to me?</span><br><span class=\"line\">&lt;&#x2F;span&gt;</span><br><span class=\"line\">css 代码:</span><br><span class=\"line\">.text-box &gt; .square &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 1rem;</span><br><span class=\"line\">  height: 1rem;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html 代码:</span><br><span class=\"line\">&lt;!-- That&#39;s clean markup! --&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;text-box&quot;&gt;</span><br><span class=\"line\">  See the square next to me?</span><br><span class=\"line\">&lt;&#x2F;span&gt;</span><br><span class=\"line\">css 代码:</span><br><span class=\"line\">&#x2F;* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content *&#x2F;</span><br><span class=\"line\">.text-box:before &#123;</span><br><span class=\"line\">  content: &quot;&quot;;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 1rem;</span><br><span class=\"line\">  height: 1rem;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。</strong></p>\n<p>不推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html 代码:</span><br><span class=\"line\">&lt;!-- Content images should never be used for design elements!  --&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;text-box&quot;&gt;</span><br><span class=\"line\">  &lt;img src&#x3D;&quot;square.svg&quot; alt&#x3D;&quot;Square&quot; &#x2F;&gt;</span><br><span class=\"line\">  See the square next to me?</span><br><span class=\"line\">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html 代码:</span><br><span class=\"line\">&lt;!-- That&#39;s clean markup! --&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;text-box&quot;&gt;</span><br><span class=\"line\">  See the square next to me?</span><br><span class=\"line\">&lt;&#x2F;span&gt;</span><br><span class=\"line\">css 代码:</span><br><span class=\"line\">&#x2F;* We use a :before pseudo element with a background image to solve the problem *&#x2F;</span><br><span class=\"line\">.text-box:before &#123;</span><br><span class=\"line\">  content: &quot;&quot;;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 1rem;</span><br><span class=\"line\">  height: 1rem;</span><br><span class=\"line\">  background: url(square.svg) no-repeat;</span><br><span class=\"line\">  background-size: 100%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"js规范\"><a href=\"#js规范\" class=\"headerlink\" title=\"js规范\"></a>js规范</h1><h2 id=\"避免全局命名空间污染\"><a href=\"#避免全局命名空间污染\" class=\"headerlink\" title=\"避免全局命名空间污染\"></a>避免全局命名空间污染</h2><p>防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。</p>\n<p>IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。<br>不推荐:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x &#x3D; 10,</span><br><span class=\"line\">    y &#x3D; 100;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this</span><br><span class=\"line\">&#x2F;&#x2F; will be stored in the window object. This is very unclean and needs to be avoided.</span><br><span class=\"line\">console.log(window.x + &#39; &#39; + window.y);</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; We declare a IIFE and pass parameters into the function that we will use from the global space</span><br><span class=\"line\">(function(log, w, undefined)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var x &#x3D; 10,</span><br><span class=\"line\">      y &#x3D; 100;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; Will output &#39;true true&#39;</span><br><span class=\"line\">  log((w.x &#x3D;&#x3D;&#x3D; undefined) + &#39; &#39; + (w.y &#x3D;&#x3D;&#x3D; undefined));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log, window));</span><br></pre></td></tr></table></figure>\n\n<p>推荐的IIFE写法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; Code goes here</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function($, w, d)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  $(function() &#123;</span><br><span class=\"line\">    w.alert(d.querySelectorAll(&#39;div&#39;).length);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;(jQuery, window, document));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>ECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。</p>\n<p>严格模式会阻止使用在未来很可能被引入的预留关键字。</p>\n<p>你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。</p>\n<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><p>总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; b &#x3D; 0; &#x2F;&#x2F;b会被隐式的创建为全局变量复制代码</span><br></pre></td></tr></table></figure>\n\n<p>所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function ()&#123;</span><br><span class=\"line\">  &#39;use strict&#39;</span><br><span class=\"line\">  var a &#x3D; 0,</span><br><span class=\"line\">      b &#x3D; 0,</span><br><span class=\"line\">      c &#x3D; 0,</span><br><span class=\"line\">      i,</span><br><span class=\"line\">      j,</span><br><span class=\"line\">      myObject();</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n\n<p>采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。</p>\n<h2 id=\"js声明提前\"><a href=\"#js声明提前\" class=\"headerlink\" title=\"js声明提前\"></a>js声明提前</h2><p>javascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var a &#x3D; 10;</span><br><span class=\"line\"></span><br><span class=\"line\">  for(var i &#x3D; 0; i &lt; a; i++) &#123;</span><br><span class=\"line\">    var b &#x3D; i * i;</span><br><span class=\"line\">    log(b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if(a &#x3D;&#x3D;&#x3D; 10) &#123;</span><br><span class=\"line\">    var f &#x3D; function() &#123;</span><br><span class=\"line\">      log(a);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function x() &#123;</span><br><span class=\"line\">    log(&#39;Mr. X!&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  x();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<p>提升后的js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\">  &#x2F;&#x2F; All variables used in the closure will be hoisted to the top of the function</span><br><span class=\"line\">  var a,</span><br><span class=\"line\">      i,</span><br><span class=\"line\">      b,</span><br><span class=\"line\">      f;</span><br><span class=\"line\">  &#x2F;&#x2F; All functions in the closure will be hoisted to the top</span><br><span class=\"line\">  function x() &#123;</span><br><span class=\"line\">    log(&#39;Mr. X!&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  a &#x3D; 10;</span><br><span class=\"line\"></span><br><span class=\"line\">  for(i &#x3D; 0; i &lt; a; i++) &#123;</span><br><span class=\"line\">    b &#x3D; i * i;</span><br><span class=\"line\">    log(b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if(a &#x3D;&#x3D;&#x3D; 10) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Function assignments will only result in hoisted variables but the function body will not be hoisted</span><br><span class=\"line\">    &#x2F;&#x2F; Only by using a real function declaration the whole function will be hoisted with its body</span><br><span class=\"line\">    f &#x3D; function() &#123;</span><br><span class=\"line\">      log(a);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  x();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用严格等\"><a href=\"#使用严格等\" class=\"headerlink\" title=\"使用严格等\"></a>使用严格等</h2><p>总是使用 <code>===</code> 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  log(&#39;0&#39; &#x3D;&#x3D; 0); &#x2F;&#x2F; true</span><br><span class=\"line\">  log(&#39;&#39; &#x3D;&#x3D; false); &#x2F;&#x2F; true</span><br><span class=\"line\">  log(&#39;1&#39; &#x3D;&#x3D; true); &#x2F;&#x2F; true</span><br><span class=\"line\">  log(null &#x3D;&#x3D; undefined); &#x2F;&#x2F; true</span><br><span class=\"line\"></span><br><span class=\"line\">  var x &#x3D; &#123;</span><br><span class=\"line\">    valueOf: function() &#123;</span><br><span class=\"line\">      return &#39;X&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  log(x &#x3D;&#x3D; &#39;X&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等同-和严格等-的区别\"><a href=\"#等同-和严格等-的区别\" class=\"headerlink\" title=\"等同== 和严格等===的区别\"></a>等同== 和严格等===的区别</h3><ul>\n<li>==， 两边值类型不同的时候，要先进行类型转换，再比较。</li>\n<li>===，不做类型转换，类型不同的一定不等。</li>\n</ul>\n<p>==等同操作符</p>\n<ul>\n<li>如果两个值具有相同类型，会进行===比较，返回===的比较值 </li>\n<li>如果两个值不具有相同类型，也有可能返回true </li>\n<li>如果一个值是null另一个值是undefined，返回true </li>\n<li>如果一个值是string另个是number，会把string转换成number再进行比较 </li>\n<li>如果一个值是true，会把它转成1再比较，false会转成0 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log( false &#x3D;&#x3D; null )      &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( false &#x3D;&#x3D; undefined ) &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( false &#x3D;&#x3D; 0 )         &#x2F;&#x2F; true</span><br><span class=\"line\">console.log( false &#x3D;&#x3D; &#39;&#39; )        &#x2F;&#x2F; true</span><br><span class=\"line\">console.log( false &#x3D;&#x3D; NaN )       &#x2F;&#x2F; false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( null &#x3D;&#x3D; undefined ) &#x2F;&#x2F; true</span><br><span class=\"line\">console.log( null &#x3D;&#x3D; 0 )         &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( null &#x3D;&#x3D; &#39;&#39; )        &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( null &#x3D;&#x3D; NaN )       &#x2F;&#x2F; false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( undefined &#x3D;&#x3D; 0)   &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( undefined &#x3D;&#x3D; &#39;&#39;)  &#x2F;&#x2F; false</span><br><span class=\"line\">console.log( undefined &#x3D;&#x3D; NaN) &#x2F;&#x2F; false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( 0 &#x3D;&#x3D; &#39;&#39; )  &#x2F;&#x2F; true</span><br><span class=\"line\">console.log( 0 &#x3D;&#x3D; NaN ) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>\n\n<p>总结一下==</p>\n<ul>\n<li>false 除了和自身比较为 true 外，和 0，”” 比较也为 true</li>\n<li>null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个</li>\n<li>0 除了和 false 比较为 true，还有空字符串 ‘’” 和空数组 []</li>\n<li>空字符串 ‘’ 除了和 false 比较为 true，还有一个数字 0</li>\n</ul>\n<blockquote>\n<p>==, &gt;, &lt;, +, -, … 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 <code>valueOf/toString</code>的话，==就会产生副作用.</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.valueOf &#x3D; function() &#123;</span><br><span class=\"line\">  this[0]++;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x &#x3D; [1, 2, 3];</span><br><span class=\"line\">x &#x3D;&#x3D; 0;</span><br><span class=\"line\">console.log(x);   &#x2F;&#x2F; [2, 2, 3]</span><br></pre></td></tr></table></figure>\n\n<p>===操作符：</p>\n<ul>\n<li>要是两个值类型不同，返回false </li>\n<li>要是两个值都是number类型，并且数值相同，返回true </li>\n<li>要是两个值都是stirng，并且两个值的String内容相同，返回true </li>\n<li>要是两个值都是true或者都是false，返回true </li>\n<li>要是两个值都是指向相同的Object，Arraya或者function，返回true </li>\n<li>要是两个值都是null或者都是undefined，返回true</li>\n</ul>\n<h2 id=\"真假判断\"><a href=\"#真假判断\" class=\"headerlink\" title=\"真假判断\"></a>真假判断</h2><ul>\n<li>js中以下内容为假：</li>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>‘’ (空字符串)</li>\n<li>NaN</li>\n</ul>\n<h2 id=\"设置默认参数\"><a href=\"#设置默认参数\" class=\"headerlink\" title=\"设置默认参数\"></a>设置默认参数</h2><p>辑操作符 || 和 &amp;&amp; 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(!x) &#123;</span><br><span class=\"line\">  if(!y) &#123;</span><br><span class=\"line\">    x &#x3D; 1;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    x &#x3D; y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 等同于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x &#x3D; x || y || 1;复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这一小技巧经常用来给方法设定默认的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  function multiply(a, b) &#123;</span><br><span class=\"line\">    a &#x3D; a || 1;</span><br><span class=\"line\">    b &#x3D; b || 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    log(&#39;Result &#39; + a * b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  multiply(); &#x2F;&#x2F; Result 1</span><br><span class=\"line\">  multiply(10); &#x2F;&#x2F; Result 10</span><br><span class=\"line\">  multiply(3, NaN); &#x2F;&#x2F; Result 3</span><br><span class=\"line\">  multiply(9, 5); &#x2F;&#x2F; Result 45</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不使用eval-函数\"><a href=\"#不使用eval-函数\" class=\"headerlink\" title=\"不使用eval()函数\"></a>不使用eval()函数</h2><p>就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。<br>eval()函数的作用是返回任意字符串，当作js代码来处理。</p>\n<h2 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h2><p>只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。</p>\n<p>正因为它是如此容易地被搞错，请限制它的使用场景：</p>\n<ul>\n<li>在构造函数中</li>\n<li>在对象的方法中（包括由此创建出的闭包内）</li>\n</ul>\n<h2 id=\"首选函数式风格\"><a href=\"#首选函数式风格\" class=\"headerlink\" title=\"首选函数式风格\"></a>首选函数式风格</h2><p>函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。</p>\n<p>接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。<br>不推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var arr &#x3D; [10, 3, 7, 9, 100, 20],</span><br><span class=\"line\">      sum &#x3D; 0,</span><br><span class=\"line\">      i;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  for(i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    sum +&#x3D; arr[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  log(&#39;The sum of array &#39; + arr + &#39; is: &#39; + sum)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));</span><br></pre></td></tr></table></figure>\n\n<p>推荐(函数式编程)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(log)&#123;</span><br><span class=\"line\">  &#39;use strict&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var arr &#x3D; [10, 3, 7, 9, 100, 20];</span><br><span class=\"line\"></span><br><span class=\"line\">  var sum &#x3D; arr.reduce(function(prevValue, currentValue) &#123;</span><br><span class=\"line\">    return prevValue + currentValue;</span><br><span class=\"line\">  &#125;, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">  log(&#39;The sum of array &#39; + arr + &#39; is: &#39; + sum);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(window.console.log));复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改内建对象的原型链\"><a href=\"#修改内建对象的原型链\" class=\"headerlink\" title=\"修改内建对象的原型链\"></a>修改内建对象的原型链</h2><p>修改内建的诸如 <code>Object.prototype</code> 和 <code>Array.prototype</code> 是被严厉禁止的。修改其它的内建对象比如 <code>Function.prototype</code>，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。</p>\n<h2 id=\"三元条件判断（if-的快捷方法）\"><a href=\"#三元条件判断（if-的快捷方法）\" class=\"headerlink\" title=\"三元条件判断（if 的快捷方法）\"></a>三元条件判断（if 的快捷方法）</h2><p>用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(x &#x3D;&#x3D;&#x3D; 10) &#123;</span><br><span class=\"line\">  return &#39;valid&#39;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  return &#39;invalid&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return x &#x3D;&#x3D;&#x3D; 10 ? &#39;valid&#39; : &#39;invalid&#39;复制代码</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JSHint\"><a href=\"#JSHint\" class=\"headerlink\" title=\"JSHint\"></a>JSHint</h1><p>在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用<code>===</code>而不是<code>==</code>，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例</p>\n<h2 id=\"webstorm内置JSHint\"><a href=\"#webstorm内置JSHint\" class=\"headerlink\" title=\"webstorm内置JSHint\"></a>webstorm内置JSHint</h2><p>对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。<br>在Settings =&gt; language &amp; frameworks =&gt; JavaScript =&gt; Code Quality Tolls =&gt; JSHint</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/5/30/7e7984a9e668c6d03b9d2fe0ab8f9bd2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"webstorm中的jshint\">webstorm中的jshint</p>\n<p>这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考<a href=\"http://jshint.com/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>curly</td>\n<td>循环或者条件语句必须使用花括号包住</td>\n</tr>\n<tr>\n<td>eqeqeq</td>\n<td>使用强制等===</td>\n</tr>\n<tr>\n<td>newcap</td>\n<td>对于首字母大写的函数（声明的类），强制使用new</td>\n</tr>\n<tr>\n<td>noarg</td>\n<td>禁用arguments.caller和arguments.callee</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>对于属性使用aaa.bbb而不是aaa[‘bbb’]</td>\n</tr>\n<tr>\n<td>undef</td>\n<td>查找所有未定义的变量</td>\n</tr>\n<tr>\n<td>boss</td>\n<td>查找类似与if(a = 0)这样的代码</td>\n</tr>\n<tr>\n<td>node</td>\n<td>指定运行环境为node</td>\n</tr>\n<tr>\n<td>strict</td>\n<td>必须使用严格模式</td>\n</tr>\n<tr>\n<td>asi</td>\n<td>允许省略分号</td>\n</tr>\n<tr>\n<td>bitwise</td>\n<td>禁止使用位运算符，比如经常把&amp;&amp;写错&amp; 规避此错误</td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>定义全局暴露的jQuery库</td>\n</tr>\n<tr>\n<td>evil</td>\n<td>禁止使用eval</td>\n</tr>\n<tr>\n<td>maxdepth</td>\n<td>嵌套的最大深度</td>\n</tr>\n<tr>\n<td>maxparams</td>\n<td>参数的最大个数</td>\n</tr>\n</tbody></table>\n<h1 id=\"css规范\"><a href=\"#css规范\" class=\"headerlink\" title=\"css规范\"></a>css规范</h1><h2 id=\"id和class的命名\"><a href=\"#id和class的命名\" class=\"headerlink\" title=\"id和class的命名\"></a>id和class的命名</h2><p>ID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称<br>不推荐 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.fw-800 &#123;</span><br><span class=\"line\">  font-weight: 800;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.red &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.heavy &#123;</span><br><span class=\"line\">  font-weight: 800;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.important &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合理的使用ID\"><a href=\"#合理的使用ID\" class=\"headerlink\" title=\"合理的使用ID\"></a>合理的使用ID</h2><p>一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#content .title &#123;</span><br><span class=\"line\">  font-size: 2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content .title &#123;</span><br><span class=\"line\">  font-size: 2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"css选择器中避免使用标签名\"><a href=\"#css选择器中避免使用标签名\" class=\"headerlink\" title=\"css选择器中避免使用标签名\"></a>css选择器中避免使用标签名</h2><p>从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。</p>\n<h2 id=\"使用子选择器\"><a href=\"#使用子选择器\" class=\"headerlink\" title=\"使用子选择器\"></a>使用子选择器</h2><p>很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。<br>有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。<br>然而，在任何情况下，这是一个非常不好的做法。<br>如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。<br>不推荐:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content .title &#123;</span><br><span class=\"line\">  font-size: 2rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content &gt; .title &#123;</span><br><span class=\"line\">  font-size: 2rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"尽量使用缩写属性\"><a href=\"#尽量使用缩写属性\" class=\"headerlink\" title=\"尽量使用缩写属性\"></a>尽量使用缩写属性</h2><p>尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top-style: none;</span><br><span class=\"line\">font-family: palatino, georgia, serif;</span><br><span class=\"line\">font-size: 100%;</span><br><span class=\"line\">line-height: 1.6;</span><br><span class=\"line\">padding-bottom: 2em;</span><br><span class=\"line\">padding-left: 1em;</span><br><span class=\"line\">padding-right: 1em;</span><br><span class=\"line\">padding-top: 0;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top: 0;</span><br><span class=\"line\">font: 100%&#x2F;1.6 palatino, georgia, serif;</span><br><span class=\"line\">padding: 0 1em 2em;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0后面不带单位\"><a href=\"#0后面不带单位\" class=\"headerlink\" title=\"0后面不带单位\"></a>0后面不带单位</h2><p>省略0后面的单位，<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding-bottom: 0px;</span><br><span class=\"line\">margin: 0em;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding-bottom: 0;</span><br><span class=\"line\">margin: 0;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性格式\"><a href=\"#属性格式\" class=\"headerlink\" title=\"属性格式\"></a>属性格式</h2><ul>\n<li>为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。</li>\n<li>属性名的冒号后使用一个空格。出于一致性的原因，<br>属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。</li>\n<li>每个选择器和属性声明总是使用新的一行。</li>\n<li>属性选择器或属性值用双引号（””），而不是单引号（”）括起来。</li>\n<li>URI值（url()）不要使用引号。</li>\n</ul>\n<p>作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：</p>\n<p>结构性属性：</p>\n<ol>\n<li>display</li>\n<li>position, left, top, right etc.</li>\n<li>overflow, float, clear etc.</li>\n<li>margin, padding</li>\n</ol>\n<p>表现性属性：</p>\n<ul>\n<li>background, border etc.</li>\n<li>font, text</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .box &#123;</span><br><span class=\"line\">  font-family: &#39;Arial&#39;, sans-serif;</span><br><span class=\"line\">  border: 3px solid #ddd;</span><br><span class=\"line\">  left: 30%;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  text-transform: uppercase;</span><br><span class=\"line\">  background-color: #eee;</span><br><span class=\"line\">  right: 30%;</span><br><span class=\"line\">  isplay: block;</span><br><span class=\"line\">  font-size: 1.5rem;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  padding: 1em;</span><br><span class=\"line\">  margin: 1em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 30%;</span><br><span class=\"line\">  right: 30%;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  margin: 1em;</span><br><span class=\"line\">  padding: 1em;</span><br><span class=\"line\">  background-color: #eee;</span><br><span class=\"line\">  border: 3px solid #ddd;</span><br><span class=\"line\">  font-family: &#39;Arial&#39;, sans-serif;</span><br><span class=\"line\">  font-size: 1.5rem;</span><br><span class=\"line\">  text-transform: uppercase;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[{"name":"命名规范、html规范、css规范、js规范","_id":"ck5ht5wtu0001bsc96gcc2iuk"}]}}