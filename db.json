{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/diaspora.css","path":"css/diaspora.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/diaspora.js","path":"js/diaspora.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/photoswipe-ui-default.js","path":"photoswipe/photoswipe-ui-default.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/photoswipe-ui-default.min.js","path":"photoswipe/photoswipe-ui-default.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/photoswipe.css","path":"photoswipe/photoswipe.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/photoswipe.min.js","path":"photoswipe/photoswipe.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/photoswipe.js","path":"photoswipe/photoswipe.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/img/cover.jpg","path":"img/cover.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/img/welcome-cover.jpg","path":"img/welcome-cover.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.css","path":"photoswipe/default-skin/default-skin.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.png","path":"photoswipe/default-skin/default-skin.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.svg","path":"photoswipe/default-skin/default-skin.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/photoswipe/default-skin/preloader.gif","path":"photoswipe/default-skin/preloader.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/img/vue3.0.jpg","path":"img/vue3.0.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/bg_ff.jpg","path":"img/bg_ff.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/img/ffBg.jpg","path":"img/ffBg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1577256094398},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1577256094398},{"_id":"themes/landscape/README.md","hash":"c2118504a024e7eade2ad2a0cc293db8d3eb63fa","modified":1577254339207},{"_id":"themes/landscape/LICENSE","hash":"63175a16773044bed84e1778009a54ad03dd5520","modified":1577254339206},{"_id":"themes/landscape/_config.yml","hash":"4c04f54dbf58500cc5e6b220818b434a90c82748","modified":1577255094380},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1577256094409},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1577256087676},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1577256094399},{"_id":"themes/landscape/languages/default.yml","hash":"1b2b75ca9ff3bfeddb596239889b584cdfcecc32","modified":1577254339207},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1577256094400},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1577254339208},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1577256094400},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1577256094400},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1577256094401},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1577256094401},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1577256094401},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1577256094401},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ccbba6315760755926f5abfe1b98c225a6650581","modified":1577254339209},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1577256094401},{"_id":"themes/landscape/layout/archive.ejs","hash":"b6c505939cd3f45c3a062b201bf8799a8e5ad7a0","modified":1577254339214},{"_id":"themes/landscape/layout/category.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1577254339214},{"_id":"themes/landscape/layout/index.ejs","hash":"7ccb03f40fada2cd74c00554e5b6718508545d71","modified":1577254339214},{"_id":"themes/landscape/layout/layout.ejs","hash":"bbead31ed8f81cb75b22d6c220793c9ed4ff3e66","modified":1577254339214},{"_id":"themes/landscape/layout/page.ejs","hash":"c311e177fc5eea6954e313374e73bd690814c91a","modified":1577254339215},{"_id":"themes/landscape/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1577254339215},{"_id":"themes/landscape/layout/tag.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1577254339215},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1577256094410},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1577256094402},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1577256094402},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1577256094402},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1577256094403},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1577256094402},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1577254339210},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"af13f26ebecc228ff8893cf458959aec9ba328d0","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1577256094403},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1577256094404},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1577256094404},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1577256094407},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1577256094407},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1577256094407},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1577256094407},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1577256094408},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1577256094408},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577256094421},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577256094421},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577256094421},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577256094422},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577256094421},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577256094421},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1577256094410},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1577256094423},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1577256094424},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1577256094424},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1577256094420},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1577256094413},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1577256094425},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1577254339212},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1577254339213},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1577256094405},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1577256094405},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1577254339213},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1577256094406},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577256094423},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577256094422},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577256094422},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1577256094423},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1577256094422},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1577256094423},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1577256094410},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1577256094412},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1577256094411},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1577256094412},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1577256094412},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1577256094412},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1577256094413},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1577256094413},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577256094414},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577256094418},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577256094414},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577256094417},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577256094416},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1577256094420},{"_id":"themes/landscape/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1577256318142},{"_id":"themes/landscape/package-lock.json","hash":"8c803a254d1ca477cfec6b31dc35f24812563ccf","modified":1577255286620},{"_id":"themes/landscape/languages/it.yml","hash":"6ae71000ed039f56572143ffe90da17b95d1a66f","modified":1577254339208},{"_id":"themes/landscape/scripts/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1577254339215},{"_id":"themes/landscape/layout/_partial/categories.ejs","hash":"02cf5a962644da311e52fa441d2b300b0c9286a5","modified":1577254339210},{"_id":"themes/landscape/layout/_partial/menu.ejs","hash":"e2f1c6944b269760456575fb7fed713fa04a1761","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/photoswipe.ejs","hash":"d1d36cf0a2c03ff3c2acbc208fe11cd0afd8b7bd","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/screen.ejs","hash":"13af4ef864cd53ec5a657aa1f5ebc4bc2c175297","modified":1577258652375},{"_id":"themes/landscape/layout/_partial/scripts.ejs","hash":"041a2e405157447b20b5d339596f35a2ec89808c","modified":1577254339213},{"_id":"themes/landscape/layout/_partial/tags.ejs","hash":"16cfcf585417ec279c12d8cfbcf6383bf7f2a8c6","modified":1577254339214},{"_id":"themes/landscape/source/css/diaspora.css","hash":"9a0e2fbf349026007af3452d99272a56b7a63418","modified":1577258395723},{"_id":"themes/landscape/source/img/favicon.png","hash":"efb938a836c0b69baecdaadb89a94511f9abb299","modified":1577254339217},{"_id":"themes/landscape/source/img/logo.png","hash":"26aa13d23a30369b683aab639499f977fe9f8175","modified":1577254339218},{"_id":"themes/landscape/source/js/diaspora.js","hash":"559740e9f119855dcd4b94435c8bc532ba7caeb3","modified":1577254339220},{"_id":"themes/landscape/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1577254339222},{"_id":"themes/landscape/source/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1577254339224},{"_id":"themes/landscape/source/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1577254339225},{"_id":"themes/landscape/source/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1577254339225},{"_id":"themes/landscape/source/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1577254339227},{"_id":"themes/landscape/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1577254339221},{"_id":"themes/landscape/source/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1577254339226},{"_id":"themes/landscape/layout/_partial/post/article.ejs","hash":"e825fd563381178382f790a6ce3da71ca7a3f113","modified":1577254339211},{"_id":"themes/landscape/layout/_partial/post/gitalk.ejs","hash":"92002826f42956360b867fcc364e5a6a47f0bac3","modified":1578361890162},{"_id":"themes/landscape/layout/_partial/post/header.ejs","hash":"1809fa1db9c24613b7579ba9977296ffd561bc6f","modified":1578362022124},{"_id":"themes/landscape/layout/_partial/post/item.ejs","hash":"b7a75aa667765b5c3a16b3b9a71ed38ea0a128a4","modified":1577254339212},{"_id":"themes/landscape/source/img/cover.jpg","hash":"dc7103d4c4e05650595712b3fa395b89726df32b","modified":1577254339217},{"_id":"themes/landscape/source/img/welcome-cover.jpg","hash":"c393dfeb52aff20a9921c1f56e2ce127683ab35a","modified":1577254339219},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1577254339223},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1577254339223},{"_id":"themes/landscape/source/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1577254339224},{"_id":"themes/landscape/source/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1577254339224},{"_id":"source/about/me.md","hash":"f60c39053a6356e0e157ee84b8d2ab6d62145496","modified":1578361619504},{"_id":"source/_posts/my-text.md","hash":"58f5139b72ea7041283ea5a4c7a40f8217ed7651","modified":1578361793588},{"_id":"source/_posts/vue-3-0-学习记录.md","hash":"df2cc8facf69199c0bd8ae876ec9fbc440fb4bfb","modified":1578362148131}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2019-12-25T06:41:27.676Z","updated":"2019-12-25T06:41:27.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4kxli4j0000xxc991mo9stj","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"vue 3.0 学习记录","date":"2020-01-07T01:55:48.000Z","_content":"#### 一、响应式系统实现过程: \n![RUNOOB 图标](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n#### 二、基本例子\nVue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 `packages/reactivity` 模块下调试。\n1. 在项目根目录运行 `yarn dev reactivity`，然后进入 `packages/reactivity` 目录找到产出的 `dist/reactivity.global.js` 文件。\n2. 新建一个 `index.html`，写入如下代码：\n```\n<script src=\"./dist/reactivity.global.js\"></script>\n<script>\nconst { reactive, effect } = VueObserver\n\nconst origin = {\n  count: 0\n}\nconst state = reactive(origin)\n\nconst fn = () => {\n  const count = state.count\n  console.log(`set count to ${count}`)\n}\neffect(fn)\n</script>\n```\n3. 在浏览器打开该文件，于控制台执行 `state.count++`，便可看到输出 `set count to 1`。\n\n在上述的例子中，我们使用 `reactive()` 函数把 `origin` 对象转化成了 Proxy 对象 `state`；使用 `effect()` 函数把 `fn()` 作为响应式回调。当 `state.count` 发生变化时，便触发了 `fn()`。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。\n\n#### 三、初始化阶段\n![vueInt](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b098adf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n在初始化阶段，主要做了两件事。\n\n1. 把 `origin` 对象转化成响应式的 Proxy 对象 `state`。\n2. 把函数 `fn()` 作为一个响应式的 effect 函数。\n\n首先我们来分析第一件事。\n\n大家都知道，Vue 3.0 使用了 Proxy 来代替之前的 `Object.defineProperty()`，改写了对象的 getter/setter，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 getter/setter 的，这个在后续的”依赖收集阶段“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 `reactive()` 函数：\n\n```\nexport function reactive(target) {\n  const observed = new Proxy(target, handler)\n  return observed\n}\n复制代码\n```\n\n> 完整代码在 [reactive.js](https://github.com/jrainlau/tiny-reactive/blob/master/src/reactive.js)。这里的 `handler` 就是改造 getter/setter 的关键，我们放到后文讲解。\n\n接下来我们分析第二件事。\n\n当一个普通的函数 `fn()` 被 `effect()` 包裹之后，就会变成一个响应式的 effect 函数，而 `fn()` 也会被**立即执行一次**。\n\n**由于在 `fn()` 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集。**\n\n除此之外，这个 effect 函数也会被压入一个名为”activeReactiveEffectStack“（此处为 effectStack）的栈中，供后续依赖收集的时候使用。\n\n来看看代码（完成代码请看 [effect.js](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L47-L65)）：\n\n```\nexport function effect (fn) {\n  // 构造一个 effect\n  const effect = function effect(...args) {\n    return run(effect, fn, args)\n  }\n  // 立即执行一次\n  effect()\n  return effect\n}\n\nexport function run(effect, fn, args) {\n  if (effectStack.indexOf(effect) === -1) {\n    try {\n      // 往池子里放入当前 effect\n      effectStack.push(effect)\n      // 立即执行一遍 fn()\n      // fn() 执行过程会完成依赖收集，会用到 effect\n      return fn(...args)\n    } finally {\n      // 完成依赖收集后从池子中扔掉这个 effect\n      effectStack.pop()\n    }\n  }\n}\n```\n至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。\n\n#### 四、依赖收集阶段\n![vueDepen](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37c860761?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n这个阶段的触发时机，就是在 effect 被立即执行，其内部的 `fn()` 触发了 Proxy 对象的 getter 的时候。简单来说，只要执行到类似 `state.count` 的语句，就会触发 state 的 getter。\n\n依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”targetMap\"。targetMap 是一个 WeakMap，其 key 值是~~当前的 Proxy 对象 `state`~~代理前的对象`origin`，而 value 则是该对象所对应的 depsMap。\n\ndepsMap 是一个 Map，key 值为触发 getter 时的属性值（此处为 `count`），而 value 则是**触发过该属性值**所对应的各个 effect。\n\n还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：\n\n```\nconst state = reactive({\n  count: 0,\n  age: 18\n})\n\nconst effect1 = effect(() => {\n  console.log('effect1: ' + state.count)\n})\n\nconst effect2 = effect(() => {\n  console.log('effect2: ' + state.age)\n})\n\nconst effect3 = effect(() => {\n  console.log('effect3: ' + state.count, state.age)\n})\n复制代码\n```\n\n那么这里的 targetMap 应该为这个样子：\n\n![image](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37aa0f4c6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n\n这样，`{ target -> key -> dep }` 的对应关系就建立起来了，依赖收集也就完成了。[代码](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L4-L21)如下：\n\n```\nexport function track (target, operationType, key) {\n  const effect = effectStack[effectStack.length - 1]\n  if (effect) {\n    let depsMap = targetMap.get(target)\n    if (depsMap === void 0) {\n      targetMap.set(target, (depsMap = new Map()))\n    }\n\n    let dep = depsMap.get(key)\n    if (dep === void 0) {\n      depsMap.set(key, (dep = new Set()))\n    }\n\n    if (!dep.has(effect)) {\n      dep.add(effect)\n    }\n  }\n}\n\n复制代码\n```\n\n弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。\n\n#### 五、响应阶段\n\n回顾上一章节的例子，我们得到了一个 `{ count: 0, age: 18 }` 的 Proxy，并构造了三个 effect。在控制台上看看效果：\n\n![image](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37dadf75d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n\n效果符合预期，那么它是怎么实现的呢？首先来看看这个阶段的原理图：\n![vue 3 响应式系统原理](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n当修改对象的某个属性值的时候，会触发对应的 setter。\n\nsetter 里面的 trigger() 函数会从依赖收集表里找到当前属性对应的各个 dep，然后把它们推入到 `effects` 和 `computedEffects（计算属性）` 队列中，最后通过 `scheduleRun()` 挨个执行里面的 effect。\n\n由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了，可以看看具体的[代码实现](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L23-L45)：\n\n```\nexport function trigger (target, operationType, key) {\n  // 取得对应的 depsMap\n  const depsMap = targetMap.get(target)\n  if (depsMap === void 0) {\n    return\n  }\n  // 取得对应的各个 dep\n  const effects = new Set()\n  if (key !== void 0) {\n    const dep = depsMap.get(key)\n    dep && dep.forEach(effect => {\n      effects.add(effect)\n    })\n  }\n  // 简化版 scheduleRun，挨个执行 effect\n  effects.forEach(effect => {\n    effect()\n  })\n}\n```\n","source":"_posts/vue-3-0-学习记录.md","raw":"---\ntitle: vue 3.0 学习记录\ndate: 2020-01-07 09:55:48\ntags:\n---\n#### 一、响应式系统实现过程: \n![RUNOOB 图标](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n#### 二、基本例子\nVue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 `packages/reactivity` 模块下调试。\n1. 在项目根目录运行 `yarn dev reactivity`，然后进入 `packages/reactivity` 目录找到产出的 `dist/reactivity.global.js` 文件。\n2. 新建一个 `index.html`，写入如下代码：\n```\n<script src=\"./dist/reactivity.global.js\"></script>\n<script>\nconst { reactive, effect } = VueObserver\n\nconst origin = {\n  count: 0\n}\nconst state = reactive(origin)\n\nconst fn = () => {\n  const count = state.count\n  console.log(`set count to ${count}`)\n}\neffect(fn)\n</script>\n```\n3. 在浏览器打开该文件，于控制台执行 `state.count++`，便可看到输出 `set count to 1`。\n\n在上述的例子中，我们使用 `reactive()` 函数把 `origin` 对象转化成了 Proxy 对象 `state`；使用 `effect()` 函数把 `fn()` 作为响应式回调。当 `state.count` 发生变化时，便触发了 `fn()`。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。\n\n#### 三、初始化阶段\n![vueInt](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b098adf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n在初始化阶段，主要做了两件事。\n\n1. 把 `origin` 对象转化成响应式的 Proxy 对象 `state`。\n2. 把函数 `fn()` 作为一个响应式的 effect 函数。\n\n首先我们来分析第一件事。\n\n大家都知道，Vue 3.0 使用了 Proxy 来代替之前的 `Object.defineProperty()`，改写了对象的 getter/setter，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 getter/setter 的，这个在后续的”依赖收集阶段“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 `reactive()` 函数：\n\n```\nexport function reactive(target) {\n  const observed = new Proxy(target, handler)\n  return observed\n}\n复制代码\n```\n\n> 完整代码在 [reactive.js](https://github.com/jrainlau/tiny-reactive/blob/master/src/reactive.js)。这里的 `handler` 就是改造 getter/setter 的关键，我们放到后文讲解。\n\n接下来我们分析第二件事。\n\n当一个普通的函数 `fn()` 被 `effect()` 包裹之后，就会变成一个响应式的 effect 函数，而 `fn()` 也会被**立即执行一次**。\n\n**由于在 `fn()` 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集。**\n\n除此之外，这个 effect 函数也会被压入一个名为”activeReactiveEffectStack“（此处为 effectStack）的栈中，供后续依赖收集的时候使用。\n\n来看看代码（完成代码请看 [effect.js](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L47-L65)）：\n\n```\nexport function effect (fn) {\n  // 构造一个 effect\n  const effect = function effect(...args) {\n    return run(effect, fn, args)\n  }\n  // 立即执行一次\n  effect()\n  return effect\n}\n\nexport function run(effect, fn, args) {\n  if (effectStack.indexOf(effect) === -1) {\n    try {\n      // 往池子里放入当前 effect\n      effectStack.push(effect)\n      // 立即执行一遍 fn()\n      // fn() 执行过程会完成依赖收集，会用到 effect\n      return fn(...args)\n    } finally {\n      // 完成依赖收集后从池子中扔掉这个 effect\n      effectStack.pop()\n    }\n  }\n}\n```\n至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。\n\n#### 四、依赖收集阶段\n![vueDepen](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37c860761?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n这个阶段的触发时机，就是在 effect 被立即执行，其内部的 `fn()` 触发了 Proxy 对象的 getter 的时候。简单来说，只要执行到类似 `state.count` 的语句，就会触发 state 的 getter。\n\n依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”targetMap\"。targetMap 是一个 WeakMap，其 key 值是~~当前的 Proxy 对象 `state`~~代理前的对象`origin`，而 value 则是该对象所对应的 depsMap。\n\ndepsMap 是一个 Map，key 值为触发 getter 时的属性值（此处为 `count`），而 value 则是**触发过该属性值**所对应的各个 effect。\n\n还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：\n\n```\nconst state = reactive({\n  count: 0,\n  age: 18\n})\n\nconst effect1 = effect(() => {\n  console.log('effect1: ' + state.count)\n})\n\nconst effect2 = effect(() => {\n  console.log('effect2: ' + state.age)\n})\n\nconst effect3 = effect(() => {\n  console.log('effect3: ' + state.count, state.age)\n})\n复制代码\n```\n\n那么这里的 targetMap 应该为这个样子：\n\n![image](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37aa0f4c6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n\n这样，`{ target -> key -> dep }` 的对应关系就建立起来了，依赖收集也就完成了。[代码](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L4-L21)如下：\n\n```\nexport function track (target, operationType, key) {\n  const effect = effectStack[effectStack.length - 1]\n  if (effect) {\n    let depsMap = targetMap.get(target)\n    if (depsMap === void 0) {\n      targetMap.set(target, (depsMap = new Map()))\n    }\n\n    let dep = depsMap.get(key)\n    if (dep === void 0) {\n      depsMap.set(key, (dep = new Set()))\n    }\n\n    if (!dep.has(effect)) {\n      dep.add(effect)\n    }\n  }\n}\n\n复制代码\n```\n\n弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。\n\n#### 五、响应阶段\n\n回顾上一章节的例子，我们得到了一个 `{ count: 0, age: 18 }` 的 Proxy，并构造了三个 effect。在控制台上看看效果：\n\n![image](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37dadf75d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n\n效果符合预期，那么它是怎么实现的呢？首先来看看这个阶段的原理图：\n![vue 3 响应式系统原理](https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n当修改对象的某个属性值的时候，会触发对应的 setter。\n\nsetter 里面的 trigger() 函数会从依赖收集表里找到当前属性对应的各个 dep，然后把它们推入到 `effects` 和 `computedEffects（计算属性）` 队列中，最后通过 `scheduleRun()` 挨个执行里面的 effect。\n\n由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了，可以看看具体的[代码实现](https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L23-L45)：\n\n```\nexport function trigger (target, operationType, key) {\n  // 取得对应的 depsMap\n  const depsMap = targetMap.get(target)\n  if (depsMap === void 0) {\n    return\n  }\n  // 取得对应的各个 dep\n  const effects = new Set()\n  if (key !== void 0) {\n    const dep = depsMap.get(key)\n    dep && dep.forEach(effect => {\n      effects.add(effect)\n    })\n  }\n  // 简化版 scheduleRun，挨个执行 effect\n  effects.forEach(effect => {\n    effect()\n  })\n}\n```\n","slug":"vue-3-0-学习记录","published":1,"updated":"2020-01-07T02:35:30.569Z","_id":"ck5382pme00009bc997khewir","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、响应式系统实现过程\"><a href=\"#一、响应式系统实现过程\" class=\"headerlink\" title=\"一、响应式系统实现过程:\"></a>一、响应式系统实现过程:</h4><p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"RUNOOB 图标\"></p>\n<h4 id=\"二、基本例子\"><a href=\"#二、基本例子\" class=\"headerlink\" title=\"二、基本例子\"></a>二、基本例子</h4><p>Vue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 <code>packages/reactivity</code> 模块下调试。</p>\n<ol>\n<li>在项目根目录运行 <code>yarn dev reactivity</code>，然后进入 <code>packages/reactivity</code> 目录找到产出的 <code>dist/reactivity.global.js</code> 文件。</li>\n<li>新建一个 <code>index.html</code>，写入如下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;.&#x2F;dist&#x2F;reactivity.global.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const &#123; reactive, effect &#125; &#x3D; VueObserver</span><br><span class=\"line\"></span><br><span class=\"line\">const origin &#x3D; &#123;</span><br><span class=\"line\">  count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const state &#x3D; reactive(origin)</span><br><span class=\"line\"></span><br><span class=\"line\">const fn &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const count &#x3D; state.count</span><br><span class=\"line\">  console.log(&#96;set count to $&#123;count&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">effect(fn)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>在浏览器打开该文件，于控制台执行 <code>state.count++</code>，便可看到输出 <code>set count to 1</code>。</li>\n</ol>\n<p>在上述的例子中，我们使用 <code>reactive()</code> 函数把 <code>origin</code> 对象转化成了 Proxy 对象 <code>state</code>；使用 <code>effect()</code> 函数把 <code>fn()</code> 作为响应式回调。当 <code>state.count</code> 发生变化时，便触发了 <code>fn()</code>。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。</p>\n<h4 id=\"三、初始化阶段\"><a href=\"#三、初始化阶段\" class=\"headerlink\" title=\"三、初始化阶段\"></a>三、初始化阶段</h4><p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b098adf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"vueInt\"><br>在初始化阶段，主要做了两件事。</p>\n<ol>\n<li>把 <code>origin</code> 对象转化成响应式的 Proxy 对象 <code>state</code>。</li>\n<li>把函数 <code>fn()</code> 作为一个响应式的 effect 函数。</li>\n</ol>\n<p>首先我们来分析第一件事。</p>\n<p>大家都知道，Vue 3.0 使用了 Proxy 来代替之前的 <code>Object.defineProperty()</code>，改写了对象的 getter/setter，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 getter/setter 的，这个在后续的”依赖收集阶段“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 <code>reactive()</code> 函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function reactive(target) &#123;</span><br><span class=\"line\">  const observed &#x3D; new Proxy(target, handler)</span><br><span class=\"line\">  return observed</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>完整代码在 <a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/reactive.js\" target=\"_blank\" rel=\"noopener\">reactive.js</a>。这里的 <code>handler</code> 就是改造 getter/setter 的关键，我们放到后文讲解。</p>\n</blockquote>\n<p>接下来我们分析第二件事。</p>\n<p>当一个普通的函数 <code>fn()</code> 被 <code>effect()</code> 包裹之后，就会变成一个响应式的 effect 函数，而 <code>fn()</code> 也会被<strong>立即执行一次</strong>。</p>\n<p><strong>由于在 <code>fn()</code> 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集。</strong></p>\n<p>除此之外，这个 effect 函数也会被压入一个名为”activeReactiveEffectStack“（此处为 effectStack）的栈中，供后续依赖收集的时候使用。</p>\n<p>来看看代码（完成代码请看 <a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L47-L65\" target=\"_blank\" rel=\"noopener\">effect.js</a>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function effect (fn) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 构造一个 effect</span><br><span class=\"line\">  const effect &#x3D; function effect(...args) &#123;</span><br><span class=\"line\">    return run(effect, fn, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 立即执行一次</span><br><span class=\"line\">  effect()</span><br><span class=\"line\">  return effect</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function run(effect, fn, args) &#123;</span><br><span class=\"line\">  if (effectStack.indexOf(effect) &#x3D;&#x3D;&#x3D; -1) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 往池子里放入当前 effect</span><br><span class=\"line\">      effectStack.push(effect)</span><br><span class=\"line\">      &#x2F;&#x2F; 立即执行一遍 fn()</span><br><span class=\"line\">      &#x2F;&#x2F; fn() 执行过程会完成依赖收集，会用到 effect</span><br><span class=\"line\">      return fn(...args)</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 完成依赖收集后从池子中扔掉这个 effect</span><br><span class=\"line\">      effectStack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。</p>\n<h4 id=\"四、依赖收集阶段\"><a href=\"#四、依赖收集阶段\" class=\"headerlink\" title=\"四、依赖收集阶段\"></a>四、依赖收集阶段</h4><p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37c860761?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"vueDepen\"><br>这个阶段的触发时机，就是在 effect 被立即执行，其内部的 <code>fn()</code> 触发了 Proxy 对象的 getter 的时候。简单来说，只要执行到类似 <code>state.count</code> 的语句，就会触发 state 的 getter。</p>\n<p>依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”targetMap”。targetMap 是一个 WeakMap，其 key 值是<del>当前的 Proxy 对象 <code>state</code></del>代理前的对象<code>origin</code>，而 value 则是该对象所对应的 depsMap。</p>\n<p>depsMap 是一个 Map，key 值为触发 getter 时的属性值（此处为 <code>count</code>），而 value 则是<strong>触发过该属性值</strong>所对应的各个 effect。</p>\n<p>还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const state &#x3D; reactive(&#123;</span><br><span class=\"line\">  count: 0,</span><br><span class=\"line\">  age: 18</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect1 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect1: &#39; + state.count)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect2 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect2: &#39; + state.age)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect3 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect3: &#39; + state.count, state.age)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>那么这里的 targetMap 应该为这个样子：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37aa0f4c6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<p>这样，<code>{ target -&gt; key -&gt; dep }</code> 的对应关系就建立起来了，依赖收集也就完成了。<a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L4-L21\" target=\"_blank\" rel=\"noopener\">代码</a>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function track (target, operationType, key) &#123;</span><br><span class=\"line\">  const effect &#x3D; effectStack[effectStack.length - 1]</span><br><span class=\"line\">  if (effect) &#123;</span><br><span class=\"line\">    let depsMap &#x3D; targetMap.get(target)</span><br><span class=\"line\">    if (depsMap &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">      targetMap.set(target, (depsMap &#x3D; new Map()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    let dep &#x3D; depsMap.get(key)</span><br><span class=\"line\">    if (dep &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">      depsMap.set(key, (dep &#x3D; new Set()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!dep.has(effect)) &#123;</span><br><span class=\"line\">      dep.add(effect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。</p>\n<h4 id=\"五、响应阶段\"><a href=\"#五、响应阶段\" class=\"headerlink\" title=\"五、响应阶段\"></a>五、响应阶段</h4><p>回顾上一章节的例子，我们得到了一个 <code>{ count: 0, age: 18 }</code> 的 Proxy，并构造了三个 effect。在控制台上看看效果：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37dadf75d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<p>效果符合预期，那么它是怎么实现的呢？首先来看看这个阶段的原理图：<br><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"vue 3 响应式系统原理\"><br>当修改对象的某个属性值的时候，会触发对应的 setter。</p>\n<p>setter 里面的 trigger() 函数会从依赖收集表里找到当前属性对应的各个 dep，然后把它们推入到 <code>effects</code> 和 <code>computedEffects（计算属性）</code> 队列中，最后通过 <code>scheduleRun()</code> 挨个执行里面的 effect。</p>\n<p>由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了，可以看看具体的<a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L23-L45\" target=\"_blank\" rel=\"noopener\">代码实现</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function trigger (target, operationType, key) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 取得对应的 depsMap</span><br><span class=\"line\">  const depsMap &#x3D; targetMap.get(target)</span><br><span class=\"line\">  if (depsMap &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 取得对应的各个 dep</span><br><span class=\"line\">  const effects &#x3D; new Set()</span><br><span class=\"line\">  if (key !&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">    const dep &#x3D; depsMap.get(key)</span><br><span class=\"line\">    dep &amp;&amp; dep.forEach(effect &#x3D;&gt; &#123;</span><br><span class=\"line\">      effects.add(effect)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 简化版 scheduleRun，挨个执行 effect</span><br><span class=\"line\">  effects.forEach(effect &#x3D;&gt; &#123;</span><br><span class=\"line\">    effect()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、响应式系统实现过程\"><a href=\"#一、响应式系统实现过程\" class=\"headerlink\" title=\"一、响应式系统实现过程:\"></a>一、响应式系统实现过程:</h4><p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"RUNOOB 图标\"></p>\n<h4 id=\"二、基本例子\"><a href=\"#二、基本例子\" class=\"headerlink\" title=\"二、基本例子\"></a>二、基本例子</h4><p>Vue 3.0 的响应式系统是独立的模块，可以完全脱离 Vue 而使用，所以我们在 clone 了源码下来以后，可以直接在 <code>packages/reactivity</code> 模块下调试。</p>\n<ol>\n<li>在项目根目录运行 <code>yarn dev reactivity</code>，然后进入 <code>packages/reactivity</code> 目录找到产出的 <code>dist/reactivity.global.js</code> 文件。</li>\n<li>新建一个 <code>index.html</code>，写入如下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;.&#x2F;dist&#x2F;reactivity.global.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const &#123; reactive, effect &#125; &#x3D; VueObserver</span><br><span class=\"line\"></span><br><span class=\"line\">const origin &#x3D; &#123;</span><br><span class=\"line\">  count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const state &#x3D; reactive(origin)</span><br><span class=\"line\"></span><br><span class=\"line\">const fn &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const count &#x3D; state.count</span><br><span class=\"line\">  console.log(&#96;set count to $&#123;count&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">effect(fn)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>在浏览器打开该文件，于控制台执行 <code>state.count++</code>，便可看到输出 <code>set count to 1</code>。</li>\n</ol>\n<p>在上述的例子中，我们使用 <code>reactive()</code> 函数把 <code>origin</code> 对象转化成了 Proxy 对象 <code>state</code>；使用 <code>effect()</code> 函数把 <code>fn()</code> 作为响应式回调。当 <code>state.count</code> 发生变化时，便触发了 <code>fn()</code>。接下来我们将以这个例子结合上文的流程图，来讲解这套响应式系统是怎么运行的。</p>\n<h4 id=\"三、初始化阶段\"><a href=\"#三、初始化阶段\" class=\"headerlink\" title=\"三、初始化阶段\"></a>三、初始化阶段</h4><p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b098adf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"vueInt\"><br>在初始化阶段，主要做了两件事。</p>\n<ol>\n<li>把 <code>origin</code> 对象转化成响应式的 Proxy 对象 <code>state</code>。</li>\n<li>把函数 <code>fn()</code> 作为一个响应式的 effect 函数。</li>\n</ol>\n<p>首先我们来分析第一件事。</p>\n<p>大家都知道，Vue 3.0 使用了 Proxy 来代替之前的 <code>Object.defineProperty()</code>，改写了对象的 getter/setter，完成依赖收集和响应触发。但是在这一阶段中，我们暂时先不管它是如何改写对象的 getter/setter 的，这个在后续的”依赖收集阶段“会详细说明。为了简单起见，我们可以把这部分的内容浓缩成一个只有两行代码的 <code>reactive()</code> 函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function reactive(target) &#123;</span><br><span class=\"line\">  const observed &#x3D; new Proxy(target, handler)</span><br><span class=\"line\">  return observed</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>完整代码在 <a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/reactive.js\" target=\"_blank\" rel=\"noopener\">reactive.js</a>。这里的 <code>handler</code> 就是改造 getter/setter 的关键，我们放到后文讲解。</p>\n</blockquote>\n<p>接下来我们分析第二件事。</p>\n<p>当一个普通的函数 <code>fn()</code> 被 <code>effect()</code> 包裹之后，就会变成一个响应式的 effect 函数，而 <code>fn()</code> 也会被<strong>立即执行一次</strong>。</p>\n<p><strong>由于在 <code>fn()</code> 里面有引用到 Proxy 对象的属性，所以这一步会触发对象的 getter，从而启动依赖收集。</strong></p>\n<p>除此之外，这个 effect 函数也会被压入一个名为”activeReactiveEffectStack“（此处为 effectStack）的栈中，供后续依赖收集的时候使用。</p>\n<p>来看看代码（完成代码请看 <a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L47-L65\" target=\"_blank\" rel=\"noopener\">effect.js</a>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function effect (fn) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 构造一个 effect</span><br><span class=\"line\">  const effect &#x3D; function effect(...args) &#123;</span><br><span class=\"line\">    return run(effect, fn, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 立即执行一次</span><br><span class=\"line\">  effect()</span><br><span class=\"line\">  return effect</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function run(effect, fn, args) &#123;</span><br><span class=\"line\">  if (effectStack.indexOf(effect) &#x3D;&#x3D;&#x3D; -1) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 往池子里放入当前 effect</span><br><span class=\"line\">      effectStack.push(effect)</span><br><span class=\"line\">      &#x2F;&#x2F; 立即执行一遍 fn()</span><br><span class=\"line\">      &#x2F;&#x2F; fn() 执行过程会完成依赖收集，会用到 effect</span><br><span class=\"line\">      return fn(...args)</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 完成依赖收集后从池子中扔掉这个 effect</span><br><span class=\"line\">      effectStack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，初始化阶段已经完成。接下来就是整个系统最关键的一步——依赖收集阶段。</p>\n<h4 id=\"四、依赖收集阶段\"><a href=\"#四、依赖收集阶段\" class=\"headerlink\" title=\"四、依赖收集阶段\"></a>四、依赖收集阶段</h4><p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37c860761?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"vueDepen\"><br>这个阶段的触发时机，就是在 effect 被立即执行，其内部的 <code>fn()</code> 触发了 Proxy 对象的 getter 的时候。简单来说，只要执行到类似 <code>state.count</code> 的语句，就会触发 state 的 getter。</p>\n<p>依赖收集阶段最重要的目的，就是建立一份”依赖收集表“，也就是图示的”targetMap”。targetMap 是一个 WeakMap，其 key 值是<del>当前的 Proxy 对象 <code>state</code></del>代理前的对象<code>origin</code>，而 value 则是该对象所对应的 depsMap。</p>\n<p>depsMap 是一个 Map，key 值为触发 getter 时的属性值（此处为 <code>count</code>），而 value 则是<strong>触发过该属性值</strong>所对应的各个 effect。</p>\n<p>还是有点绕？那么我们再举个例子。假设有个 Proxy 对象和 effect 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const state &#x3D; reactive(&#123;</span><br><span class=\"line\">  count: 0,</span><br><span class=\"line\">  age: 18</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect1 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect1: &#39; + state.count)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect2 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect2: &#39; + state.age)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const effect3 &#x3D; effect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;effect3: &#39; + state.count, state.age)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>那么这里的 targetMap 应该为这个样子：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37aa0f4c6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<p>这样，<code>{ target -&gt; key -&gt; dep }</code> 的对应关系就建立起来了，依赖收集也就完成了。<a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L4-L21\" target=\"_blank\" rel=\"noopener\">代码</a>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function track (target, operationType, key) &#123;</span><br><span class=\"line\">  const effect &#x3D; effectStack[effectStack.length - 1]</span><br><span class=\"line\">  if (effect) &#123;</span><br><span class=\"line\">    let depsMap &#x3D; targetMap.get(target)</span><br><span class=\"line\">    if (depsMap &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">      targetMap.set(target, (depsMap &#x3D; new Map()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    let dep &#x3D; depsMap.get(key)</span><br><span class=\"line\">    if (dep &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">      depsMap.set(key, (dep &#x3D; new Set()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!dep.has(effect)) &#123;</span><br><span class=\"line\">      dep.add(effect)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>弄明白依赖收集表 targetMap 是非常重要的，因为这是整个响应式系统核心中的核心。</p>\n<h4 id=\"五、响应阶段\"><a href=\"#五、响应阶段\" class=\"headerlink\" title=\"五、响应阶段\"></a>五、响应阶段</h4><p>回顾上一章节的例子，我们得到了一个 <code>{ count: 0, age: 18 }</code> 的 Proxy，并构造了三个 effect。在控制台上看看效果：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37dadf75d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<p>效果符合预期，那么它是怎么实现的呢？首先来看看这个阶段的原理图：<br><img src=\"https://user-gold-cdn.xitu.io/2019/10/9/16dafca37b2e0534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"vue 3 响应式系统原理\"><br>当修改对象的某个属性值的时候，会触发对应的 setter。</p>\n<p>setter 里面的 trigger() 函数会从依赖收集表里找到当前属性对应的各个 dep，然后把它们推入到 <code>effects</code> 和 <code>computedEffects（计算属性）</code> 队列中，最后通过 <code>scheduleRun()</code> 挨个执行里面的 effect。</p>\n<p>由于已经建立了依赖收集表，所以要找到属性所对应的 dep 也就轻而易举了，可以看看具体的<a href=\"https://github.com/jrainlau/tiny-reactive/blob/master/src/effect.js#L23-L45\" target=\"_blank\" rel=\"noopener\">代码实现</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function trigger (target, operationType, key) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 取得对应的 depsMap</span><br><span class=\"line\">  const depsMap &#x3D; targetMap.get(target)</span><br><span class=\"line\">  if (depsMap &#x3D;&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 取得对应的各个 dep</span><br><span class=\"line\">  const effects &#x3D; new Set()</span><br><span class=\"line\">  if (key !&#x3D;&#x3D; void 0) &#123;</span><br><span class=\"line\">    const dep &#x3D; depsMap.get(key)</span><br><span class=\"line\">    dep &amp;&amp; dep.forEach(effect &#x3D;&gt; &#123;</span><br><span class=\"line\">      effects.add(effect)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 简化版 scheduleRun，挨个执行 effect</span><br><span class=\"line\">  effects.forEach(effect &#x3D;&gt; &#123;</span><br><span class=\"line\">    effect()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}